/*! For license information please see tfjs-pose_detection.js.LICENSE.txt */
var e={452:function(e,t,n){var s;e.exports=(s=n(8249),n(8269),n(8214),n(888),n(5109),function(){var e=s,t=e.lib.BlockCipher,n=e.algo,r=[],a=[],o=[],i=[],l=[],u=[],c=[],h=[],d=[],p=[];!function(){for(var e=[],t=0;t<256;t++)e[t]=t<128?t<<1:t<<1^283;var n=0,s=0;for(t=0;t<256;t++){var f=s^s<<1^s<<2^s<<3^s<<4;f=f>>>8^255&f^99,r[n]=f,a[f]=n;var m=e[n],g=e[m],x=e[g],b=257*e[f]^16843008*f;o[n]=b<<24|b>>>8,i[n]=b<<16|b>>>16,l[n]=b<<8|b>>>24,u[n]=b,b=16843009*x^65537*g^257*m^16843008*n,c[f]=b<<24|b>>>8,h[f]=b<<16|b>>>16,d[f]=b<<8|b>>>24,p[f]=b,n?(n=m^e[e[e[x^m]]],s^=e[e[s]]):n=s=1}}();var f=[0,1,2,4,8,16,32,64,128,27,54],m=n.AES=t.extend({_doReset:function(){if(!this._nRounds||this._keyPriorReset!==this._key){for(var e=this._keyPriorReset=this._key,t=e.words,n=e.sigBytes/4,s=4*((this._nRounds=n+6)+1),a=this._keySchedule=[],o=0;o<s;o++)o<n?a[o]=t[o]:(u=a[o-1],o%n?n>6&&o%n==4&&(u=r[u>>>24]<<24|r[u>>>16&255]<<16|r[u>>>8&255]<<8|r[255&u]):(u=r[(u=u<<8|u>>>24)>>>24]<<24|r[u>>>16&255]<<16|r[u>>>8&255]<<8|r[255&u],u^=f[o/n|0]<<24),a[o]=a[o-n]^u);for(var i=this._invKeySchedule=[],l=0;l<s;l++){if(o=s-l,l%4)var u=a[o];else u=a[o-4];i[l]=l<4||o<=4?u:c[r[u>>>24]]^h[r[u>>>16&255]]^d[r[u>>>8&255]]^p[r[255&u]]}}},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._keySchedule,o,i,l,u,r)},decryptBlock:function(e,t){var n=e[t+1];e[t+1]=e[t+3],e[t+3]=n,this._doCryptBlock(e,t,this._invKeySchedule,c,h,d,p,a),n=e[t+1],e[t+1]=e[t+3],e[t+3]=n},_doCryptBlock:function(e,t,n,s,r,a,o,i){for(var l=this._nRounds,u=e[t]^n[0],c=e[t+1]^n[1],h=e[t+2]^n[2],d=e[t+3]^n[3],p=4,f=1;f<l;f++){var m=s[u>>>24]^r[c>>>16&255]^a[h>>>8&255]^o[255&d]^n[p++],g=s[c>>>24]^r[h>>>16&255]^a[d>>>8&255]^o[255&u]^n[p++],x=s[h>>>24]^r[d>>>16&255]^a[u>>>8&255]^o[255&c]^n[p++],b=s[d>>>24]^r[u>>>16&255]^a[c>>>8&255]^o[255&h]^n[p++];u=m,c=g,h=x,d=b}m=(i[u>>>24]<<24|i[c>>>16&255]<<16|i[h>>>8&255]<<8|i[255&d])^n[p++],g=(i[c>>>24]<<24|i[h>>>16&255]<<16|i[d>>>8&255]<<8|i[255&u])^n[p++],x=(i[h>>>24]<<24|i[d>>>16&255]<<16|i[u>>>8&255]<<8|i[255&c])^n[p++],b=(i[d>>>24]<<24|i[u>>>16&255]<<16|i[c>>>8&255]<<8|i[255&h])^n[p++],e[t]=m,e[t+1]=g,e[t+2]=x,e[t+3]=b},keySize:8});e.AES=t._createHelper(m)}(),s.AES)},7407:function(e,t,n){var s;e.exports=(s=n(8249),n(8269),n(8214),n(888),n(5109),function(){var e=s,t=e.lib.BlockCipher,n=e.algo;const r=16,a=[608135816,2242054355,320440878,57701188,2752067618,698298832,137296536,3964562569,1160258022,953160567,3193202383,887688300,3232508343,3380367581,1065670069,3041331479,2450970073,2306472731],o=[[3509652390,2564797868,805139163,3491422135,3101798381,1780907670,3128725573,4046225305,614570311,3012652279,134345442,2240740374,1667834072,1901547113,2757295779,4103290238,227898511,1921955416,1904987480,2182433518,2069144605,3260701109,2620446009,720527379,3318853667,677414384,3393288472,3101374703,2390351024,1614419982,1822297739,2954791486,3608508353,3174124327,2024746970,1432378464,3864339955,2857741204,1464375394,1676153920,1439316330,715854006,3033291828,289532110,2706671279,2087905683,3018724369,1668267050,732546397,1947742710,3462151702,2609353502,2950085171,1814351708,2050118529,680887927,999245976,1800124847,3300911131,1713906067,1641548236,4213287313,1216130144,1575780402,4018429277,3917837745,3693486850,3949271944,596196993,3549867205,258830323,2213823033,772490370,2760122372,1774776394,2652871518,566650946,4142492826,1728879713,2882767088,1783734482,3629395816,2517608232,2874225571,1861159788,326777828,3124490320,2130389656,2716951837,967770486,1724537150,2185432712,2364442137,1164943284,2105845187,998989502,3765401048,2244026483,1075463327,1455516326,1322494562,910128902,469688178,1117454909,936433444,3490320968,3675253459,1240580251,122909385,2157517691,634681816,4142456567,3825094682,3061402683,2540495037,79693498,3249098678,1084186820,1583128258,426386531,1761308591,1047286709,322548459,995290223,1845252383,2603652396,3431023940,2942221577,3202600964,3727903485,1712269319,422464435,3234572375,1170764815,3523960633,3117677531,1434042557,442511882,3600875718,1076654713,1738483198,4213154764,2393238008,3677496056,1014306527,4251020053,793779912,2902807211,842905082,4246964064,1395751752,1040244610,2656851899,3396308128,445077038,3742853595,3577915638,679411651,2892444358,2354009459,1767581616,3150600392,3791627101,3102740896,284835224,4246832056,1258075500,768725851,2589189241,3069724005,3532540348,1274779536,3789419226,2764799539,1660621633,3471099624,4011903706,913787905,3497959166,737222580,2514213453,2928710040,3937242737,1804850592,3499020752,2949064160,2386320175,2390070455,2415321851,4061277028,2290661394,2416832540,1336762016,1754252060,3520065937,3014181293,791618072,3188594551,3933548030,2332172193,3852520463,3043980520,413987798,3465142937,3030929376,4245938359,2093235073,3534596313,375366246,2157278981,2479649556,555357303,3870105701,2008414854,3344188149,4221384143,3956125452,2067696032,3594591187,2921233993,2428461,544322398,577241275,1471733935,610547355,4027169054,1432588573,1507829418,2025931657,3646575487,545086370,48609733,2200306550,1653985193,298326376,1316178497,3007786442,2064951626,458293330,2589141269,3591329599,3164325604,727753846,2179363840,146436021,1461446943,4069977195,705550613,3059967265,3887724982,4281599278,3313849956,1404054877,2845806497,146425753,1854211946],[1266315497,3048417604,3681880366,3289982499,290971e4,1235738493,2632868024,2414719590,3970600049,1771706367,1449415276,3266420449,422970021,1963543593,2690192192,3826793022,1062508698,1531092325,1804592342,2583117782,2714934279,4024971509,1294809318,4028980673,1289560198,2221992742,1669523910,35572830,157838143,1052438473,1016535060,1802137761,1753167236,1386275462,3080475397,2857371447,1040679964,2145300060,2390574316,1461121720,2956646967,4031777805,4028374788,33600511,2920084762,1018524850,629373528,3691585981,3515945977,2091462646,2486323059,586499841,988145025,935516892,3367335476,2599673255,2839830854,265290510,3972581182,2759138881,3795373465,1005194799,847297441,406762289,1314163512,1332590856,1866599683,4127851711,750260880,613907577,1450815602,3165620655,3734664991,3650291728,3012275730,3704569646,1427272223,778793252,1343938022,2676280711,2052605720,1946737175,3164576444,3914038668,3967478842,3682934266,1661551462,3294938066,4011595847,840292616,3712170807,616741398,312560963,711312465,1351876610,322626781,1910503582,271666773,2175563734,1594956187,70604529,3617834859,1007753275,1495573769,4069517037,2549218298,2663038764,504708206,2263041392,3941167025,2249088522,1514023603,1998579484,1312622330,694541497,2582060303,2151582166,1382467621,776784248,2618340202,3323268794,2497899128,2784771155,503983604,4076293799,907881277,423175695,432175456,1378068232,4145222326,3954048622,3938656102,3820766613,2793130115,2977904593,26017576,3274890735,3194772133,1700274565,1756076034,4006520079,3677328699,720338349,1533947780,354530856,688349552,3973924725,1637815568,332179504,3949051286,53804574,2852348879,3044236432,1282449977,3583942155,3416972820,4006381244,1617046695,2628476075,3002303598,1686838959,431878346,2686675385,1700445008,1080580658,1009431731,832498133,3223435511,2605976345,2271191193,2516031870,1648197032,4164389018,2548247927,300782431,375919233,238389289,3353747414,2531188641,2019080857,1475708069,455242339,2609103871,448939670,3451063019,1395535956,2413381860,1841049896,1491858159,885456874,4264095073,4001119347,1565136089,3898914787,1108368660,540939232,1173283510,2745871338,3681308437,4207628240,3343053890,4016749493,1699691293,1103962373,3625875870,2256883143,3830138730,1031889488,3479347698,1535977030,4236805024,3251091107,2132092099,1774941330,1199868427,1452454533,157007616,2904115357,342012276,595725824,1480756522,206960106,497939518,591360097,863170706,2375253569,3596610801,1814182875,2094937945,3421402208,1082520231,3463918190,2785509508,435703966,3908032597,1641649973,2842273706,3305899714,1510255612,2148256476,2655287854,3276092548,4258621189,236887753,3681803219,274041037,1734335097,3815195456,3317970021,1899903192,1026095262,4050517792,356393447,2410691914,3873677099,3682840055],[3913112168,2491498743,4132185628,2489919796,1091903735,1979897079,3170134830,3567386728,3557303409,857797738,1136121015,1342202287,507115054,2535736646,337727348,3213592640,1301675037,2528481711,1895095763,1721773893,3216771564,62756741,2142006736,835421444,2531993523,1442658625,3659876326,2882144922,676362277,1392781812,170690266,3921047035,1759253602,3611846912,1745797284,664899054,1329594018,3901205900,3045908486,2062866102,2865634940,3543621612,3464012697,1080764994,553557557,3656615353,3996768171,991055499,499776247,1265440854,648242737,3940784050,980351604,3713745714,1749149687,3396870395,4211799374,3640570775,1161844396,3125318951,1431517754,545492359,4268468663,3499529547,1437099964,2702547544,3433638243,2581715763,2787789398,1060185593,1593081372,2418618748,4260947970,69676912,2159744348,86519011,2512459080,3838209314,1220612927,3339683548,133810670,1090789135,1078426020,1569222167,845107691,3583754449,4072456591,1091646820,628848692,1613405280,3757631651,526609435,236106946,48312990,2942717905,3402727701,1797494240,859738849,992217954,4005476642,2243076622,3870952857,3732016268,765654824,3490871365,2511836413,1685915746,3888969200,1414112111,2273134842,3281911079,4080962846,172450625,2569994100,980381355,4109958455,2819808352,2716589560,2568741196,3681446669,3329971472,1835478071,660984891,3704678404,4045999559,3422617507,3040415634,1762651403,1719377915,3470491036,2693910283,3642056355,3138596744,1364962596,2073328063,1983633131,926494387,3423689081,2150032023,4096667949,1749200295,3328846651,309677260,2016342300,1779581495,3079819751,111262694,1274766160,443224088,298511866,1025883608,3806446537,1145181785,168956806,3641502830,3584813610,1689216846,3666258015,3200248200,1692713982,2646376535,4042768518,1618508792,1610833997,3523052358,4130873264,2001055236,3610705100,2202168115,4028541809,2961195399,1006657119,2006996926,3186142756,1430667929,3210227297,1314452623,4074634658,4101304120,2273951170,1399257539,3367210612,3027628629,1190975929,2062231137,2333990788,2221543033,2438960610,1181637006,548689776,2362791313,3372408396,3104550113,3145860560,296247880,1970579870,3078560182,3769228297,1714227617,3291629107,3898220290,166772364,1251581989,493813264,448347421,195405023,2709975567,677966185,3703036547,1463355134,2715995803,1338867538,1343315457,2802222074,2684532164,233230375,2599980071,2000651841,3277868038,1638401717,4028070440,3237316320,6314154,819756386,300326615,590932579,1405279636,3267499572,3150704214,2428286686,3959192993,3461946742,1862657033,1266418056,963775037,2089974820,2263052895,1917689273,448879540,3550394620,3981727096,150775221,3627908307,1303187396,508620638,2975983352,2726630617,1817252668,1876281319,1457606340,908771278,3720792119,3617206836,2455994898,1729034894,1080033504],[976866871,3556439503,2881648439,1522871579,1555064734,1336096578,3548522304,2579274686,3574697629,3205460757,3593280638,3338716283,3079412587,564236357,2993598910,1781952180,1464380207,3163844217,3332601554,1699332808,1393555694,1183702653,3581086237,1288719814,691649499,2847557200,2895455976,3193889540,2717570544,1781354906,1676643554,2592534050,3230253752,1126444790,2770207658,2633158820,2210423226,2615765581,2414155088,3127139286,673620729,2805611233,1269405062,4015350505,3341807571,4149409754,1057255273,2012875353,2162469141,2276492801,2601117357,993977747,3918593370,2654263191,753973209,36408145,2530585658,25011837,3520020182,2088578344,530523599,2918365339,1524020338,1518925132,3760827505,3759777254,1202760957,3985898139,3906192525,674977740,4174734889,2031300136,2019492241,3983892565,4153806404,3822280332,352677332,2297720250,60907813,90501309,3286998549,1016092578,2535922412,2839152426,457141659,509813237,4120667899,652014361,1966332200,2975202805,55981186,2327461051,676427537,3255491064,2882294119,3433927263,1307055953,942726286,933058658,2468411793,3933900994,4215176142,1361170020,2001714738,2830558078,3274259782,1222529897,1679025792,2729314320,3714953764,1770335741,151462246,3013232138,1682292957,1483529935,471910574,1539241949,458788160,3436315007,1807016891,3718408830,978976581,1043663428,3165965781,1927990952,4200891579,2372276910,3208408903,3533431907,1412390302,2931980059,4132332400,1947078029,3881505623,4168226417,2941484381,1077988104,1320477388,886195818,18198404,3786409e3,2509781533,112762804,3463356488,1866414978,891333506,18488651,661792760,1628790961,3885187036,3141171499,876946877,2693282273,1372485963,791857591,2686433993,3759982718,3167212022,3472953795,2716379847,445679433,3561995674,3504004811,3574258232,54117162,3331405415,2381918588,3769707343,4154350007,1140177722,4074052095,668550556,3214352940,367459370,261225585,2610173221,4209349473,3468074219,3265815641,314222801,3066103646,3808782860,282218597,3406013506,3773591054,379116347,1285071038,846784868,2669647154,3771962079,3550491691,2305946142,453669953,1268987020,3317592352,3279303384,3744833421,2610507566,3859509063,266596637,3847019092,517658769,3462560207,3443424879,370717030,4247526661,2224018117,4143653529,4112773975,2788324899,2477274417,1456262402,2901442914,1517677493,1846949527,2295493580,3734397586,2176403920,1280348187,1908823572,3871786941,846861322,1172426758,3287448474,3383383037,1655181056,3139813346,901632758,1897031941,2986607138,3066810236,3447102507,1393639104,373351379,950779232,625454576,3124240540,4148612726,2007998917,544563296,2244738638,2330496472,2058025392,1291430526,424198748,50039436,29584100,3605783033,2429876329,2791104160,1057563949,3255363231,3075367218,3463963227,1469046755,985887462]];var i={pbox:[],sbox:[]};function l(e,t){let n=t>>24&255,s=t>>16&255,r=t>>8&255,a=255&t,o=e.sbox[0][n]+e.sbox[1][s];return o^=e.sbox[2][r],o+=e.sbox[3][a],o}function u(e,t,n){let s,a=t,o=n;for(let t=0;t<r;++t)a^=e.pbox[t],o=l(e,a)^o,s=a,a=o,o=s;return s=a,a=o,o=s,o^=e.pbox[r],a^=e.pbox[r+1],{left:a,right:o}}var c=n.Blowfish=t.extend({_doReset:function(){if(this._keyPriorReset!==this._key){var e=this._keyPriorReset=this._key,t=e.words,n=e.sigBytes/4;!function(e,t,n){for(let t=0;t<4;t++){e.sbox[t]=[];for(let n=0;n<256;n++)e.sbox[t][n]=o[t][n]}let s=0;for(let o=0;o<r+2;o++)e.pbox[o]=a[o]^t[s],s++,s>=n&&(s=0);let i=0,l=0,c=0;for(let t=0;t<r+2;t+=2)c=u(e,i,l),i=c.left,l=c.right,e.pbox[t]=i,e.pbox[t+1]=l;for(let t=0;t<4;t++)for(let n=0;n<256;n+=2)c=u(e,i,l),i=c.left,l=c.right,e.sbox[t][n]=i,e.sbox[t][n+1]=l}(i,t,n)}},encryptBlock:function(e,t){var n=u(i,e[t],e[t+1]);e[t]=n.left,e[t+1]=n.right},decryptBlock:function(e,t){var n=function(e,t,n){let s,a=t,o=n;for(let t=r+1;t>1;--t)a^=e.pbox[t],o=l(e,a)^o,s=a,a=o,o=s;return s=a,a=o,o=s,o^=e.pbox[1],a^=e.pbox[0],{left:a,right:o}}(i,e[t],e[t+1]);e[t]=n.left,e[t+1]=n.right},blockSize:2,keySize:4,ivSize:2});e.Blowfish=t._createHelper(c)}(),s.Blowfish)},5109:function(e,t,n){var s,r,a,o,i,l,u,c,h,d,p,f,m,g,x,b,y,v,k;e.exports=(s=n(8249),n(888),void(s.lib.Cipher||(a=(r=s).lib,o=a.Base,i=a.WordArray,l=a.BufferedBlockAlgorithm,(u=r.enc).Utf8,c=u.Base64,h=r.algo.EvpKDF,d=a.Cipher=l.extend({cfg:o.extend(),createEncryptor:function(e,t){return this.create(this._ENC_XFORM_MODE,e,t)},createDecryptor:function(e,t){return this.create(this._DEC_XFORM_MODE,e,t)},init:function(e,t,n){this.cfg=this.cfg.extend(n),this._xformMode=e,this._key=t,this.reset()},reset:function(){l.reset.call(this),this._doReset()},process:function(e){return this._append(e),this._process()},finalize:function(e){return e&&this._append(e),this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(){function e(e){return"string"==typeof e?k:y}return function(t){return{encrypt:function(n,s,r){return e(s).encrypt(t,n,s,r)},decrypt:function(n,s,r){return e(s).decrypt(t,n,s,r)}}}}()}),a.StreamCipher=d.extend({_doFinalize:function(){return this._process(!0)},blockSize:1}),p=r.mode={},f=a.BlockCipherMode=o.extend({createEncryptor:function(e,t){return this.Encryptor.create(e,t)},createDecryptor:function(e,t){return this.Decryptor.create(e,t)},init:function(e,t){this._cipher=e,this._iv=t}}),m=p.CBC=function(){var e=f.extend();function t(e,t,n){var s,r=this._iv;r?(s=r,this._iv=void 0):s=this._prevBlock;for(var a=0;a<n;a++)e[t+a]^=s[a]}return e.Encryptor=e.extend({processBlock:function(e,n){var s=this._cipher,r=s.blockSize;t.call(this,e,n,r),s.encryptBlock(e,n),this._prevBlock=e.slice(n,n+r)}}),e.Decryptor=e.extend({processBlock:function(e,n){var s=this._cipher,r=s.blockSize,a=e.slice(n,n+r);s.decryptBlock(e,n),t.call(this,e,n,r),this._prevBlock=a}}),e}(),g=(r.pad={}).Pkcs7={pad:function(e,t){for(var n=4*t,s=n-e.sigBytes%n,r=s<<24|s<<16|s<<8|s,a=[],o=0;o<s;o+=4)a.push(r);var l=i.create(a,s);e.concat(l)},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},a.BlockCipher=d.extend({cfg:d.cfg.extend({mode:m,padding:g}),reset:function(){var e;d.reset.call(this);var t=this.cfg,n=t.iv,s=t.mode;this._xformMode==this._ENC_XFORM_MODE?e=s.createEncryptor:(e=s.createDecryptor,this._minBufferSize=1),this._mode&&this._mode.__creator==e?this._mode.init(this,n&&n.words):(this._mode=e.call(s,this,n&&n.words),this._mode.__creator=e)},_doProcessBlock:function(e,t){this._mode.processBlock(e,t)},_doFinalize:function(){var e,t=this.cfg.padding;return this._xformMode==this._ENC_XFORM_MODE?(t.pad(this._data,this.blockSize),e=this._process(!0)):(e=this._process(!0),t.unpad(e)),e},blockSize:4}),x=a.CipherParams=o.extend({init:function(e){this.mixIn(e)},toString:function(e){return(e||this.formatter).stringify(this)}}),b=(r.format={}).OpenSSL={stringify:function(e){var t=e.ciphertext,n=e.salt;return(n?i.create([1398893684,1701076831]).concat(n).concat(t):t).toString(c)},parse:function(e){var t,n=c.parse(e),s=n.words;return 1398893684==s[0]&&1701076831==s[1]&&(t=i.create(s.slice(2,4)),s.splice(0,4),n.sigBytes-=16),x.create({ciphertext:n,salt:t})}},y=a.SerializableCipher=o.extend({cfg:o.extend({format:b}),encrypt:function(e,t,n,s){s=this.cfg.extend(s);var r=e.createEncryptor(n,s),a=r.finalize(t),o=r.cfg;return x.create({ciphertext:a,key:n,iv:o.iv,algorithm:e,mode:o.mode,padding:o.padding,blockSize:e.blockSize,formatter:s.format})},decrypt:function(e,t,n,s){return s=this.cfg.extend(s),t=this._parse(t,s.format),e.createDecryptor(n,s).finalize(t.ciphertext)},_parse:function(e,t){return"string"==typeof e?t.parse(e,this):e}}),v=(r.kdf={}).OpenSSL={execute:function(e,t,n,s,r){if(s||(s=i.random(8)),r)a=h.create({keySize:t+n,hasher:r}).compute(e,s);else var a=h.create({keySize:t+n}).compute(e,s);var o=i.create(a.words.slice(t),4*n);return a.sigBytes=4*t,x.create({key:a,iv:o,salt:s})}},k=a.PasswordBasedCipher=y.extend({cfg:y.cfg.extend({kdf:v}),encrypt:function(e,t,n,s){var r=(s=this.cfg.extend(s)).kdf.execute(n,e.keySize,e.ivSize,s.salt,s.hasher);s.iv=r.iv;var a=y.encrypt.call(this,e,t,r.key,s);return a.mixIn(r),a},decrypt:function(e,t,n,s){s=this.cfg.extend(s),t=this._parse(t,s.format);var r=s.kdf.execute(n,e.keySize,e.ivSize,t.salt,s.hasher);return s.iv=r.iv,y.decrypt.call(this,e,t,r.key,s)}}))))},8249:function(e,t,n){var s;e.exports=(s=s||function(e,t){var s;if("undefined"!=typeof window&&window.crypto&&(s=window.crypto),"undefined"!=typeof self&&self.crypto&&(s=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(s=globalThis.crypto),!s&&"undefined"!=typeof window&&window.msCrypto&&(s=window.msCrypto),!s&&void 0!==n.g&&n.g.crypto&&(s=n.g.crypto),!s)try{s=n(2480)}catch(e){}var r=function(){if(s){if("function"==typeof s.getRandomValues)try{return s.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof s.randomBytes)try{return s.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")},a=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),o={},i=o.lib={},l=i.Base={extend:function(e){var t=a(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},u=i.WordArray=l.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||h).stringify(this)},concat:function(e){var t=this.words,n=e.words,s=this.sigBytes,r=e.sigBytes;if(this.clamp(),s%4)for(var a=0;a<r;a++){var o=n[a>>>2]>>>24-a%4*8&255;t[s+a>>>2]|=o<<24-(s+a)%4*8}else for(var i=0;i<r;i+=4)t[s+i>>>2]=n[i>>>2];return this.sigBytes+=r,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=l.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],n=0;n<e;n+=4)t.push(r());return new u.init(t,e)}}),c=o.enc={},h=c.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,s=[],r=0;r<n;r++){var a=t[r>>>2]>>>24-r%4*8&255;s.push((a>>>4).toString(16)),s.push((15&a).toString(16))}return s.join("")},parse:function(e){for(var t=e.length,n=[],s=0;s<t;s+=2)n[s>>>3]|=parseInt(e.substr(s,2),16)<<24-s%8*4;return new u.init(n,t/2)}},d=c.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,s=[],r=0;r<n;r++){var a=t[r>>>2]>>>24-r%4*8&255;s.push(String.fromCharCode(a))}return s.join("")},parse:function(e){for(var t=e.length,n=[],s=0;s<t;s++)n[s>>>2]|=(255&e.charCodeAt(s))<<24-s%4*8;return new u.init(n,t)}},p=c.Utf8={stringify:function(e){try{return decodeURIComponent(escape(d.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return d.parse(unescape(encodeURIComponent(e)))}},f=i.BufferedBlockAlgorithm=l.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=p.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n,s=this._data,r=s.words,a=s.sigBytes,o=this.blockSize,i=a/(4*o),l=(i=t?e.ceil(i):e.max((0|i)-this._minBufferSize,0))*o,c=e.min(4*l,a);if(l){for(var h=0;h<l;h+=o)this._doProcessBlock(r,h);n=r.splice(0,l),s.sigBytes-=c}return new u.init(n,c)},clone:function(){var e=l.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),m=(i.Hasher=f.extend({cfg:l.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new m.HMAC.init(e,n).finalize(t)}}}),o.algo={});return o}(Math),s)},8269:function(e,t,n){var s,r,a;e.exports=(s=n(8249),a=(r=s).lib.WordArray,r.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,s=this._map;e.clamp();for(var r=[],a=0;a<n;a+=3)for(var o=(t[a>>>2]>>>24-a%4*8&255)<<16|(t[a+1>>>2]>>>24-(a+1)%4*8&255)<<8|t[a+2>>>2]>>>24-(a+2)%4*8&255,i=0;i<4&&a+.75*i<n;i++)r.push(s.charAt(o>>>6*(3-i)&63));var l=s.charAt(64);if(l)for(;r.length%4;)r.push(l);return r.join("")},parse:function(e){var t=e.length,n=this._map,s=this._reverseMap;if(!s){s=this._reverseMap=[];for(var r=0;r<n.length;r++)s[n.charCodeAt(r)]=r}var o=n.charAt(64);if(o){var i=e.indexOf(o);-1!==i&&(t=i)}return function(e,t,n){for(var s=[],r=0,o=0;o<t;o++)if(o%4){var i=n[e.charCodeAt(o-1)]<<o%4*2|n[e.charCodeAt(o)]>>>6-o%4*2;s[r>>>2]|=i<<24-r%4*8,r++}return a.create(s,r)}(e,t,s)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},s.enc.Base64)},3786:function(e,t,n){var s,r,a;e.exports=(s=n(8249),a=(r=s).lib.WordArray,r.enc.Base64url={stringify:function(e,t){void 0===t&&(t=!0);var n=e.words,s=e.sigBytes,r=t?this._safe_map:this._map;e.clamp();for(var a=[],o=0;o<s;o+=3)for(var i=(n[o>>>2]>>>24-o%4*8&255)<<16|(n[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|n[o+2>>>2]>>>24-(o+2)%4*8&255,l=0;l<4&&o+.75*l<s;l++)a.push(r.charAt(i>>>6*(3-l)&63));var u=r.charAt(64);if(u)for(;a.length%4;)a.push(u);return a.join("")},parse:function(e,t){void 0===t&&(t=!0);var n=e.length,s=t?this._safe_map:this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var o=0;o<s.length;o++)r[s.charCodeAt(o)]=o}var i=s.charAt(64);if(i){var l=e.indexOf(i);-1!==l&&(n=l)}return function(e,t,n){for(var s=[],r=0,o=0;o<t;o++)if(o%4){var i=n[e.charCodeAt(o-1)]<<o%4*2|n[e.charCodeAt(o)]>>>6-o%4*2;s[r>>>2]|=i<<24-r%4*8,r++}return a.create(s,r)}(e,n,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",_safe_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"},s.enc.Base64url)},298:function(e,t,n){var s;e.exports=(s=n(8249),function(){var e=s,t=e.lib.WordArray,n=e.enc;function r(e){return e<<8&4278255360|e>>>8&16711935}n.Utf16=n.Utf16BE={stringify:function(e){for(var t=e.words,n=e.sigBytes,s=[],r=0;r<n;r+=2){var a=t[r>>>2]>>>16-r%4*8&65535;s.push(String.fromCharCode(a))}return s.join("")},parse:function(e){for(var n=e.length,s=[],r=0;r<n;r++)s[r>>>1]|=e.charCodeAt(r)<<16-r%2*16;return t.create(s,2*n)}},n.Utf16LE={stringify:function(e){for(var t=e.words,n=e.sigBytes,s=[],a=0;a<n;a+=2){var o=r(t[a>>>2]>>>16-a%4*8&65535);s.push(String.fromCharCode(o))}return s.join("")},parse:function(e){for(var n=e.length,s=[],a=0;a<n;a++)s[a>>>1]|=r(e.charCodeAt(a)<<16-a%2*16);return t.create(s,2*n)}}}(),s.enc.Utf16)},888:function(e,t,n){var s,r,a,o,i,l,u,c;e.exports=(s=n(8249),n(2783),n(9824),o=(a=(r=s).lib).Base,i=a.WordArray,u=(l=r.algo).MD5,c=l.EvpKDF=o.extend({cfg:o.extend({keySize:4,hasher:u,iterations:1}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n,s=this.cfg,r=s.hasher.create(),a=i.create(),o=a.words,l=s.keySize,u=s.iterations;o.length<l;){n&&r.update(n),n=r.update(e).finalize(t),r.reset();for(var c=1;c<u;c++)n=r.finalize(n),r.reset();a.concat(n)}return a.sigBytes=4*l,a}}),r.EvpKDF=function(e,t,n){return c.create(n).compute(e,t)},s.EvpKDF)},2209:function(e,t,n){var s,r,a,o;e.exports=(s=n(8249),n(5109),a=(r=s).lib.CipherParams,o=r.enc.Hex,r.format.Hex={stringify:function(e){return e.ciphertext.toString(o)},parse:function(e){var t=o.parse(e);return a.create({ciphertext:t})}},s.format.Hex)},9824:function(e,t,n){var s,r,a,o;e.exports=(s=n(8249),a=(r=s).lib.Base,o=r.enc.Utf8,void(r.algo.HMAC=a.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=o.parse(t));var n=e.blockSize,s=4*n;t.sigBytes>s&&(t=e.finalize(t)),t.clamp();for(var r=this._oKey=t.clone(),a=this._iKey=t.clone(),i=r.words,l=a.words,u=0;u<n;u++)i[u]^=1549556828,l[u]^=909522486;r.sigBytes=a.sigBytes=s,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})))},1354:function(e,t,n){var s;e.exports=(s=n(8249),n(4938),n(4433),n(298),n(8269),n(3786),n(8214),n(2783),n(2153),n(4988),n(34),n(7460),n(3327),n(706),n(9824),n(2112),n(888),n(5109),n(8568),n(4242),n(9968),n(7660),n(1148),n(3615),n(2807),n(1077),n(6475),n(6991),n(2209),n(452),n(4253),n(1857),n(4454),n(3974),n(7407),s)},4433:function(e,t,n){var s;e.exports=(s=n(8249),function(){if("function"==typeof ArrayBuffer){var e=s.lib.WordArray,t=e.init,n=e.init=function(e){if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),(e instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&e instanceof Uint8ClampedArray||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array)&&(e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)),e instanceof Uint8Array){for(var n=e.byteLength,s=[],r=0;r<n;r++)s[r>>>2]|=e[r]<<24-r%4*8;t.call(this,s,n)}else t.apply(this,arguments)};n.prototype=e}}(),s.lib.WordArray)},8214:function(e,t,n){var s;e.exports=(s=n(8249),function(e){var t=s,n=t.lib,r=n.WordArray,a=n.Hasher,o=t.algo,i=[];!function(){for(var t=0;t<64;t++)i[t]=4294967296*e.abs(e.sin(t+1))|0}();var l=o.MD5=a.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var s=t+n,r=e[s];e[s]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8)}var a=this._hash.words,o=e[t+0],l=e[t+1],p=e[t+2],f=e[t+3],m=e[t+4],g=e[t+5],x=e[t+6],b=e[t+7],y=e[t+8],v=e[t+9],k=e[t+10],w=e[t+11],I=e[t+12],N=e[t+13],S=e[t+14],$=e[t+15],C=a[0],T=a[1],E=a[2],R=a[3];C=u(C,T,E,R,o,7,i[0]),R=u(R,C,T,E,l,12,i[1]),E=u(E,R,C,T,p,17,i[2]),T=u(T,E,R,C,f,22,i[3]),C=u(C,T,E,R,m,7,i[4]),R=u(R,C,T,E,g,12,i[5]),E=u(E,R,C,T,x,17,i[6]),T=u(T,E,R,C,b,22,i[7]),C=u(C,T,E,R,y,7,i[8]),R=u(R,C,T,E,v,12,i[9]),E=u(E,R,C,T,k,17,i[10]),T=u(T,E,R,C,w,22,i[11]),C=u(C,T,E,R,I,7,i[12]),R=u(R,C,T,E,N,12,i[13]),E=u(E,R,C,T,S,17,i[14]),C=c(C,T=u(T,E,R,C,$,22,i[15]),E,R,l,5,i[16]),R=c(R,C,T,E,x,9,i[17]),E=c(E,R,C,T,w,14,i[18]),T=c(T,E,R,C,o,20,i[19]),C=c(C,T,E,R,g,5,i[20]),R=c(R,C,T,E,k,9,i[21]),E=c(E,R,C,T,$,14,i[22]),T=c(T,E,R,C,m,20,i[23]),C=c(C,T,E,R,v,5,i[24]),R=c(R,C,T,E,S,9,i[25]),E=c(E,R,C,T,f,14,i[26]),T=c(T,E,R,C,y,20,i[27]),C=c(C,T,E,R,N,5,i[28]),R=c(R,C,T,E,p,9,i[29]),E=c(E,R,C,T,b,14,i[30]),C=h(C,T=c(T,E,R,C,I,20,i[31]),E,R,g,4,i[32]),R=h(R,C,T,E,y,11,i[33]),E=h(E,R,C,T,w,16,i[34]),T=h(T,E,R,C,S,23,i[35]),C=h(C,T,E,R,l,4,i[36]),R=h(R,C,T,E,m,11,i[37]),E=h(E,R,C,T,b,16,i[38]),T=h(T,E,R,C,k,23,i[39]),C=h(C,T,E,R,N,4,i[40]),R=h(R,C,T,E,o,11,i[41]),E=h(E,R,C,T,f,16,i[42]),T=h(T,E,R,C,x,23,i[43]),C=h(C,T,E,R,v,4,i[44]),R=h(R,C,T,E,I,11,i[45]),E=h(E,R,C,T,$,16,i[46]),C=d(C,T=h(T,E,R,C,p,23,i[47]),E,R,o,6,i[48]),R=d(R,C,T,E,b,10,i[49]),E=d(E,R,C,T,S,15,i[50]),T=d(T,E,R,C,g,21,i[51]),C=d(C,T,E,R,I,6,i[52]),R=d(R,C,T,E,f,10,i[53]),E=d(E,R,C,T,k,15,i[54]),T=d(T,E,R,C,l,21,i[55]),C=d(C,T,E,R,y,6,i[56]),R=d(R,C,T,E,$,10,i[57]),E=d(E,R,C,T,x,15,i[58]),T=d(T,E,R,C,N,21,i[59]),C=d(C,T,E,R,m,6,i[60]),R=d(R,C,T,E,w,10,i[61]),E=d(E,R,C,T,p,15,i[62]),T=d(T,E,R,C,v,21,i[63]),a[0]=a[0]+C|0,a[1]=a[1]+T|0,a[2]=a[2]+E|0,a[3]=a[3]+R|0},_doFinalize:function(){var t=this._data,n=t.words,s=8*this._nDataBytes,r=8*t.sigBytes;n[r>>>5]|=128<<24-r%32;var a=e.floor(s/4294967296),o=s;n[15+(r+64>>>9<<4)]=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),n[14+(r+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),t.sigBytes=4*(n.length+1),this._process();for(var i=this._hash,l=i.words,u=0;u<4;u++){var c=l[u];l[u]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return i},clone:function(){var e=a.clone.call(this);return e._hash=this._hash.clone(),e}});function u(e,t,n,s,r,a,o){var i=e+(t&n|~t&s)+r+o;return(i<<a|i>>>32-a)+t}function c(e,t,n,s,r,a,o){var i=e+(t&s|n&~s)+r+o;return(i<<a|i>>>32-a)+t}function h(e,t,n,s,r,a,o){var i=e+(t^n^s)+r+o;return(i<<a|i>>>32-a)+t}function d(e,t,n,s,r,a,o){var i=e+(n^(t|~s))+r+o;return(i<<a|i>>>32-a)+t}t.MD5=a._createHelper(l),t.HmacMD5=a._createHmacHelper(l)}(Math),s.MD5)},8568:function(e,t,n){var s;e.exports=(s=n(8249),n(5109),s.mode.CFB=function(){var e=s.lib.BlockCipherMode.extend();function t(e,t,n,s){var r,a=this._iv;a?(r=a.slice(0),this._iv=void 0):r=this._prevBlock,s.encryptBlock(r,0);for(var o=0;o<n;o++)e[t+o]^=r[o]}return e.Encryptor=e.extend({processBlock:function(e,n){var s=this._cipher,r=s.blockSize;t.call(this,e,n,r,s),this._prevBlock=e.slice(n,n+r)}}),e.Decryptor=e.extend({processBlock:function(e,n){var s=this._cipher,r=s.blockSize,a=e.slice(n,n+r);t.call(this,e,n,r,s),this._prevBlock=a}}),e}(),s.mode.CFB)},9968:function(e,t,n){var s;e.exports=(s=n(8249),n(5109),s.mode.CTRGladman=function(){var e=s.lib.BlockCipherMode.extend();function t(e){if(255==(e>>24&255)){var t=e>>16&255,n=e>>8&255,s=255&e;255===t?(t=0,255===n?(n=0,255===s?s=0:++s):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=s}else e+=1<<24;return e}var n=e.Encryptor=e.extend({processBlock:function(e,n){var s=this._cipher,r=s.blockSize,a=this._iv,o=this._counter;a&&(o=this._counter=a.slice(0),this._iv=void 0),function(e){0===(e[0]=t(e[0]))&&(e[1]=t(e[1]))}(o);var i=o.slice(0);s.encryptBlock(i,0);for(var l=0;l<r;l++)e[n+l]^=i[l]}});return e.Decryptor=n,e}(),s.mode.CTRGladman)},4242:function(e,t,n){var s,r,a;e.exports=(s=n(8249),n(5109),s.mode.CTR=(a=(r=s.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(e,t){var n=this._cipher,s=n.blockSize,r=this._iv,a=this._counter;r&&(a=this._counter=r.slice(0),this._iv=void 0);var o=a.slice(0);n.encryptBlock(o,0),a[s-1]=a[s-1]+1|0;for(var i=0;i<s;i++)e[t+i]^=o[i]}}),r.Decryptor=a,r),s.mode.CTR)},1148:function(e,t,n){var s,r;e.exports=(s=n(8249),n(5109),s.mode.ECB=((r=s.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(e,t){this._cipher.encryptBlock(e,t)}}),r.Decryptor=r.extend({processBlock:function(e,t){this._cipher.decryptBlock(e,t)}}),r),s.mode.ECB)},7660:function(e,t,n){var s,r,a;e.exports=(s=n(8249),n(5109),s.mode.OFB=(a=(r=s.lib.BlockCipherMode.extend()).Encryptor=r.extend({processBlock:function(e,t){var n=this._cipher,s=n.blockSize,r=this._iv,a=this._keystream;r&&(a=this._keystream=r.slice(0),this._iv=void 0),n.encryptBlock(a,0);for(var o=0;o<s;o++)e[t+o]^=a[o]}}),r.Decryptor=a,r),s.mode.OFB)},3615:function(e,t,n){var s;e.exports=(s=n(8249),n(5109),s.pad.AnsiX923={pad:function(e,t){var n=e.sigBytes,s=4*t,r=s-n%s,a=n+r-1;e.clamp(),e.words[a>>>2]|=r<<24-a%4*8,e.sigBytes+=r},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},s.pad.Ansix923)},2807:function(e,t,n){var s;e.exports=(s=n(8249),n(5109),s.pad.Iso10126={pad:function(e,t){var n=4*t,r=n-e.sigBytes%n;e.concat(s.lib.WordArray.random(r-1)).concat(s.lib.WordArray.create([r<<24],1))},unpad:function(e){var t=255&e.words[e.sigBytes-1>>>2];e.sigBytes-=t}},s.pad.Iso10126)},1077:function(e,t,n){var s;e.exports=(s=n(8249),n(5109),s.pad.Iso97971={pad:function(e,t){e.concat(s.lib.WordArray.create([2147483648],1)),s.pad.ZeroPadding.pad(e,t)},unpad:function(e){s.pad.ZeroPadding.unpad(e),e.sigBytes--}},s.pad.Iso97971)},6991:function(e,t,n){var s;e.exports=(s=n(8249),n(5109),s.pad.NoPadding={pad:function(){},unpad:function(){}},s.pad.NoPadding)},6475:function(e,t,n){var s;e.exports=(s=n(8249),n(5109),s.pad.ZeroPadding={pad:function(e,t){var n=4*t;e.clamp(),e.sigBytes+=n-(e.sigBytes%n||n)},unpad:function(e){var t=e.words,n=e.sigBytes-1;for(n=e.sigBytes-1;n>=0;n--)if(t[n>>>2]>>>24-n%4*8&255){e.sigBytes=n+1;break}}},s.pad.ZeroPadding)},2112:function(e,t,n){var s,r,a,o,i,l,u,c,h;e.exports=(s=n(8249),n(2153),n(9824),o=(a=(r=s).lib).Base,i=a.WordArray,u=(l=r.algo).SHA256,c=l.HMAC,h=l.PBKDF2=o.extend({cfg:o.extend({keySize:4,hasher:u,iterations:25e4}),init:function(e){this.cfg=this.cfg.extend(e)},compute:function(e,t){for(var n=this.cfg,s=c.create(n.hasher,e),r=i.create(),a=i.create([1]),o=r.words,l=a.words,u=n.keySize,h=n.iterations;o.length<u;){var d=s.update(t).finalize(a);s.reset();for(var p=d.words,f=p.length,m=d,g=1;g<h;g++){m=s.finalize(m),s.reset();for(var x=m.words,b=0;b<f;b++)p[b]^=x[b]}r.concat(d),l[0]++}return r.sigBytes=4*u,r}}),r.PBKDF2=function(e,t,n){return h.create(n).compute(e,t)},s.PBKDF2)},3974:function(e,t,n){var s;e.exports=(s=n(8249),n(8269),n(8214),n(888),n(5109),function(){var e=s,t=e.lib.StreamCipher,n=e.algo,r=[],a=[],o=[],i=n.RabbitLegacy=t.extend({_doReset:function(){var e=this._key.words,t=this.cfg.iv,n=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],s=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];this._b=0;for(var r=0;r<4;r++)l.call(this);for(r=0;r<8;r++)s[r]^=n[r+4&7];if(t){var a=t.words,o=a[0],i=a[1],u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),c=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),h=u>>>16|4294901760&c,d=c<<16|65535&u;for(s[0]^=u,s[1]^=h,s[2]^=c,s[3]^=d,s[4]^=u,s[5]^=h,s[6]^=c,s[7]^=d,r=0;r<4;r++)l.call(this)}},_doProcessBlock:function(e,t){var n=this._X;l.call(this),r[0]=n[0]^n[5]>>>16^n[3]<<16,r[1]=n[2]^n[7]>>>16^n[5]<<16,r[2]=n[4]^n[1]>>>16^n[7]<<16,r[3]=n[6]^n[3]>>>16^n[1]<<16;for(var s=0;s<4;s++)r[s]=16711935&(r[s]<<8|r[s]>>>24)|4278255360&(r[s]<<24|r[s]>>>8),e[t+s]^=r[s]},blockSize:4,ivSize:2});function l(){for(var e=this._X,t=this._C,n=0;n<8;n++)a[n]=t[n];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<a[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<a[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<a[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<a[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<a[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<a[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<a[6]>>>0?1:0)|0,this._b=t[7]>>>0<a[7]>>>0?1:0,n=0;n<8;n++){var s=e[n]+t[n],r=65535&s,i=s>>>16,l=((r*r>>>17)+r*i>>>15)+i*i,u=((4294901760&s)*s|0)+((65535&s)*s|0);o[n]=l^u}e[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,e[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,e[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,e[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,e[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,e[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,e[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,e[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}e.RabbitLegacy=t._createHelper(i)}(),s.RabbitLegacy)},4454:function(e,t,n){var s;e.exports=(s=n(8249),n(8269),n(8214),n(888),n(5109),function(){var e=s,t=e.lib.StreamCipher,n=e.algo,r=[],a=[],o=[],i=n.Rabbit=t.extend({_doReset:function(){for(var e=this._key.words,t=this.cfg.iv,n=0;n<4;n++)e[n]=16711935&(e[n]<<8|e[n]>>>24)|4278255360&(e[n]<<24|e[n]>>>8);var s=this._X=[e[0],e[3]<<16|e[2]>>>16,e[1],e[0]<<16|e[3]>>>16,e[2],e[1]<<16|e[0]>>>16,e[3],e[2]<<16|e[1]>>>16],r=this._C=[e[2]<<16|e[2]>>>16,4294901760&e[0]|65535&e[1],e[3]<<16|e[3]>>>16,4294901760&e[1]|65535&e[2],e[0]<<16|e[0]>>>16,4294901760&e[2]|65535&e[3],e[1]<<16|e[1]>>>16,4294901760&e[3]|65535&e[0]];for(this._b=0,n=0;n<4;n++)l.call(this);for(n=0;n<8;n++)r[n]^=s[n+4&7];if(t){var a=t.words,o=a[0],i=a[1],u=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),c=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8),h=u>>>16|4294901760&c,d=c<<16|65535&u;for(r[0]^=u,r[1]^=h,r[2]^=c,r[3]^=d,r[4]^=u,r[5]^=h,r[6]^=c,r[7]^=d,n=0;n<4;n++)l.call(this)}},_doProcessBlock:function(e,t){var n=this._X;l.call(this),r[0]=n[0]^n[5]>>>16^n[3]<<16,r[1]=n[2]^n[7]>>>16^n[5]<<16,r[2]=n[4]^n[1]>>>16^n[7]<<16,r[3]=n[6]^n[3]>>>16^n[1]<<16;for(var s=0;s<4;s++)r[s]=16711935&(r[s]<<8|r[s]>>>24)|4278255360&(r[s]<<24|r[s]>>>8),e[t+s]^=r[s]},blockSize:4,ivSize:2});function l(){for(var e=this._X,t=this._C,n=0;n<8;n++)a[n]=t[n];for(t[0]=t[0]+1295307597+this._b|0,t[1]=t[1]+3545052371+(t[0]>>>0<a[0]>>>0?1:0)|0,t[2]=t[2]+886263092+(t[1]>>>0<a[1]>>>0?1:0)|0,t[3]=t[3]+1295307597+(t[2]>>>0<a[2]>>>0?1:0)|0,t[4]=t[4]+3545052371+(t[3]>>>0<a[3]>>>0?1:0)|0,t[5]=t[5]+886263092+(t[4]>>>0<a[4]>>>0?1:0)|0,t[6]=t[6]+1295307597+(t[5]>>>0<a[5]>>>0?1:0)|0,t[7]=t[7]+3545052371+(t[6]>>>0<a[6]>>>0?1:0)|0,this._b=t[7]>>>0<a[7]>>>0?1:0,n=0;n<8;n++){var s=e[n]+t[n],r=65535&s,i=s>>>16,l=((r*r>>>17)+r*i>>>15)+i*i,u=((4294901760&s)*s|0)+((65535&s)*s|0);o[n]=l^u}e[0]=o[0]+(o[7]<<16|o[7]>>>16)+(o[6]<<16|o[6]>>>16)|0,e[1]=o[1]+(o[0]<<8|o[0]>>>24)+o[7]|0,e[2]=o[2]+(o[1]<<16|o[1]>>>16)+(o[0]<<16|o[0]>>>16)|0,e[3]=o[3]+(o[2]<<8|o[2]>>>24)+o[1]|0,e[4]=o[4]+(o[3]<<16|o[3]>>>16)+(o[2]<<16|o[2]>>>16)|0,e[5]=o[5]+(o[4]<<8|o[4]>>>24)+o[3]|0,e[6]=o[6]+(o[5]<<16|o[5]>>>16)+(o[4]<<16|o[4]>>>16)|0,e[7]=o[7]+(o[6]<<8|o[6]>>>24)+o[5]|0}e.Rabbit=t._createHelper(i)}(),s.Rabbit)},1857:function(e,t,n){var s;e.exports=(s=n(8249),n(8269),n(8214),n(888),n(5109),function(){var e=s,t=e.lib.StreamCipher,n=e.algo,r=n.RC4=t.extend({_doReset:function(){for(var e=this._key,t=e.words,n=e.sigBytes,s=this._S=[],r=0;r<256;r++)s[r]=r;r=0;for(var a=0;r<256;r++){var o=r%n,i=t[o>>>2]>>>24-o%4*8&255;a=(a+s[r]+i)%256;var l=s[r];s[r]=s[a],s[a]=l}this._i=this._j=0},_doProcessBlock:function(e,t){e[t]^=a.call(this)},keySize:8,ivSize:0});function a(){for(var e=this._S,t=this._i,n=this._j,s=0,r=0;r<4;r++){n=(n+e[t=(t+1)%256])%256;var a=e[t];e[t]=e[n],e[n]=a,s|=e[(e[t]+e[n])%256]<<24-8*r}return this._i=t,this._j=n,s}e.RC4=t._createHelper(r);var o=n.RC4Drop=r.extend({cfg:r.cfg.extend({drop:192}),_doReset:function(){r._doReset.call(this);for(var e=this.cfg.drop;e>0;e--)a.call(this)}});e.RC4Drop=t._createHelper(o)}(),s.RC4)},706:function(e,t,n){var s;e.exports=(s=n(8249),function(e){var t=s,n=t.lib,r=n.WordArray,a=n.Hasher,o=t.algo,i=r.create([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13]),l=r.create([5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11]),u=r.create([11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6]),c=r.create([8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]),h=r.create([0,1518500249,1859775393,2400959708,2840853838]),d=r.create([1352829926,1548603684,1836072691,2053994217,0]),p=o.RIPEMD160=a.extend({_doReset:function(){this._hash=r.create([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var s=t+n,r=e[s];e[s]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8)}var a,o,p,v,k,w,I,N,S,$,C,T=this._hash.words,E=h.words,R=d.words,A=i.words,_=l.words,F=u.words,D=c.words;for(w=a=T[0],I=o=T[1],N=p=T[2],S=v=T[3],$=k=T[4],n=0;n<80;n+=1)C=a+e[t+A[n]]|0,C+=n<16?f(o,p,v)+E[0]:n<32?m(o,p,v)+E[1]:n<48?g(o,p,v)+E[2]:n<64?x(o,p,v)+E[3]:b(o,p,v)+E[4],C=(C=y(C|=0,F[n]))+k|0,a=k,k=v,v=y(p,10),p=o,o=C,C=w+e[t+_[n]]|0,C+=n<16?b(I,N,S)+R[0]:n<32?x(I,N,S)+R[1]:n<48?g(I,N,S)+R[2]:n<64?m(I,N,S)+R[3]:f(I,N,S)+R[4],C=(C=y(C|=0,D[n]))+$|0,w=$,$=S,S=y(N,10),N=I,I=C;C=T[1]+p+S|0,T[1]=T[2]+v+$|0,T[2]=T[3]+k+w|0,T[3]=T[4]+a+I|0,T[4]=T[0]+o+N|0,T[0]=C},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,s=8*e.sigBytes;t[s>>>5]|=128<<24-s%32,t[14+(s+64>>>9<<4)]=16711935&(n<<8|n>>>24)|4278255360&(n<<24|n>>>8),e.sigBytes=4*(t.length+1),this._process();for(var r=this._hash,a=r.words,o=0;o<5;o++){var i=a[o];a[o]=16711935&(i<<8|i>>>24)|4278255360&(i<<24|i>>>8)}return r},clone:function(){var e=a.clone.call(this);return e._hash=this._hash.clone(),e}});function f(e,t,n){return e^t^n}function m(e,t,n){return e&t|~e&n}function g(e,t,n){return(e|~t)^n}function x(e,t,n){return e&n|t&~n}function b(e,t,n){return e^(t|~n)}function y(e,t){return e<<t|e>>>32-t}t.RIPEMD160=a._createHelper(p),t.HmacRIPEMD160=a._createHmacHelper(p)}(Math),s.RIPEMD160)},2783:function(e,t,n){var s,r,a,o,i,l,u,c;e.exports=(s=n(8249),a=(r=s).lib,o=a.WordArray,i=a.Hasher,l=r.algo,u=[],c=l.SHA1=i.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=this._hash.words,s=n[0],r=n[1],a=n[2],o=n[3],i=n[4],l=0;l<80;l++){if(l<16)u[l]=0|e[t+l];else{var c=u[l-3]^u[l-8]^u[l-14]^u[l-16];u[l]=c<<1|c>>>31}var h=(s<<5|s>>>27)+i+u[l];h+=l<20?1518500249+(r&a|~r&o):l<40?1859775393+(r^a^o):l<60?(r&a|r&o|a&o)-1894007588:(r^a^o)-899497514,i=o,o=a,a=r<<30|r>>>2,r=s,s=h}n[0]=n[0]+s|0,n[1]=n[1]+r|0,n[2]=n[2]+a|0,n[3]=n[3]+o|0,n[4]=n[4]+i|0},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,s=8*e.sigBytes;return t[s>>>5]|=128<<24-s%32,t[14+(s+64>>>9<<4)]=Math.floor(n/4294967296),t[15+(s+64>>>9<<4)]=n,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}}),r.SHA1=i._createHelper(c),r.HmacSHA1=i._createHmacHelper(c),s.SHA1)},4988:function(e,t,n){var s,r,a,o,i,l;e.exports=(s=n(8249),n(2153),a=(r=s).lib.WordArray,o=r.algo,i=o.SHA256,l=o.SHA224=i.extend({_doReset:function(){this._hash=new a.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428])},_doFinalize:function(){var e=i._doFinalize.call(this);return e.sigBytes-=4,e}}),r.SHA224=i._createHelper(l),r.HmacSHA224=i._createHmacHelper(l),s.SHA224)},2153:function(e,t,n){var s;e.exports=(s=n(8249),function(e){var t=s,n=t.lib,r=n.WordArray,a=n.Hasher,o=t.algo,i=[],l=[];!function(){function t(t){for(var n=e.sqrt(t),s=2;s<=n;s++)if(!(t%s))return!1;return!0}function n(e){return 4294967296*(e-(0|e))|0}for(var s=2,r=0;r<64;)t(s)&&(r<8&&(i[r]=n(e.pow(s,.5))),l[r]=n(e.pow(s,1/3)),r++),s++}();var u=[],c=o.SHA256=a.extend({_doReset:function(){this._hash=new r.init(i.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,s=n[0],r=n[1],a=n[2],o=n[3],i=n[4],c=n[5],h=n[6],d=n[7],p=0;p<64;p++){if(p<16)u[p]=0|e[t+p];else{var f=u[p-15],m=(f<<25|f>>>7)^(f<<14|f>>>18)^f>>>3,g=u[p-2],x=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;u[p]=m+u[p-7]+x+u[p-16]}var b=s&r^s&a^r&a,y=(s<<30|s>>>2)^(s<<19|s>>>13)^(s<<10|s>>>22),v=d+((i<<26|i>>>6)^(i<<21|i>>>11)^(i<<7|i>>>25))+(i&c^~i&h)+l[p]+u[p];d=h,h=c,c=i,i=o+v|0,o=a,a=r,r=s,s=v+(y+b)|0}n[0]=n[0]+s|0,n[1]=n[1]+r|0,n[2]=n[2]+a|0,n[3]=n[3]+o|0,n[4]=n[4]+i|0,n[5]=n[5]+c|0,n[6]=n[6]+h|0,n[7]=n[7]+d|0},_doFinalize:function(){var t=this._data,n=t.words,s=8*this._nDataBytes,r=8*t.sigBytes;return n[r>>>5]|=128<<24-r%32,n[14+(r+64>>>9<<4)]=e.floor(s/4294967296),n[15+(r+64>>>9<<4)]=s,t.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=a.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=a._createHelper(c),t.HmacSHA256=a._createHmacHelper(c)}(Math),s.SHA256)},3327:function(e,t,n){var s;e.exports=(s=n(8249),n(4938),function(e){var t=s,n=t.lib,r=n.WordArray,a=n.Hasher,o=t.x64.Word,i=t.algo,l=[],u=[],c=[];!function(){for(var e=1,t=0,n=0;n<24;n++){l[e+5*t]=(n+1)*(n+2)/2%64;var s=(2*e+3*t)%5;e=t%5,t=s}for(e=0;e<5;e++)for(t=0;t<5;t++)u[e+5*t]=t+(2*e+3*t)%5*5;for(var r=1,a=0;a<24;a++){for(var i=0,h=0,d=0;d<7;d++){if(1&r){var p=(1<<d)-1;p<32?h^=1<<p:i^=1<<p-32}128&r?r=r<<1^113:r<<=1}c[a]=o.create(i,h)}}();var h=[];!function(){for(var e=0;e<25;e++)h[e]=o.create()}();var d=i.SHA3=a.extend({cfg:a.cfg.extend({outputLength:512}),_doReset:function(){for(var e=this._state=[],t=0;t<25;t++)e[t]=new o.init;this.blockSize=(1600-2*this.cfg.outputLength)/32},_doProcessBlock:function(e,t){for(var n=this._state,s=this.blockSize/2,r=0;r<s;r++){var a=e[t+2*r],o=e[t+2*r+1];a=16711935&(a<<8|a>>>24)|4278255360&(a<<24|a>>>8),o=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),(T=n[r]).high^=o,T.low^=a}for(var i=0;i<24;i++){for(var d=0;d<5;d++){for(var p=0,f=0,m=0;m<5;m++)p^=(T=n[d+5*m]).high,f^=T.low;var g=h[d];g.high=p,g.low=f}for(d=0;d<5;d++){var x=h[(d+4)%5],b=h[(d+1)%5],y=b.high,v=b.low;for(p=x.high^(y<<1|v>>>31),f=x.low^(v<<1|y>>>31),m=0;m<5;m++)(T=n[d+5*m]).high^=p,T.low^=f}for(var k=1;k<25;k++){var w=(T=n[k]).high,I=T.low,N=l[k];N<32?(p=w<<N|I>>>32-N,f=I<<N|w>>>32-N):(p=I<<N-32|w>>>64-N,f=w<<N-32|I>>>64-N);var S=h[u[k]];S.high=p,S.low=f}var $=h[0],C=n[0];for($.high=C.high,$.low=C.low,d=0;d<5;d++)for(m=0;m<5;m++){var T=n[k=d+5*m],E=h[k],R=h[(d+1)%5+5*m],A=h[(d+2)%5+5*m];T.high=E.high^~R.high&A.high,T.low=E.low^~R.low&A.low}T=n[0];var _=c[i];T.high^=_.high,T.low^=_.low}},_doFinalize:function(){var t=this._data,n=t.words,s=(this._nDataBytes,8*t.sigBytes),a=32*this.blockSize;n[s>>>5]|=1<<24-s%32,n[(e.ceil((s+1)/a)*a>>>5)-1]|=128,t.sigBytes=4*n.length,this._process();for(var o=this._state,i=this.cfg.outputLength/8,l=i/8,u=[],c=0;c<l;c++){var h=o[c],d=h.high,p=h.low;d=16711935&(d<<8|d>>>24)|4278255360&(d<<24|d>>>8),p=16711935&(p<<8|p>>>24)|4278255360&(p<<24|p>>>8),u.push(p),u.push(d)}return new r.init(u,i)},clone:function(){for(var e=a.clone.call(this),t=e._state=this._state.slice(0),n=0;n<25;n++)t[n]=t[n].clone();return e}});t.SHA3=a._createHelper(d),t.HmacSHA3=a._createHmacHelper(d)}(Math),s.SHA3)},7460:function(e,t,n){var s,r,a,o,i,l,u,c;e.exports=(s=n(8249),n(4938),n(34),a=(r=s).x64,o=a.Word,i=a.WordArray,l=r.algo,u=l.SHA512,c=l.SHA384=u.extend({_doReset:function(){this._hash=new i.init([new o.init(3418070365,3238371032),new o.init(1654270250,914150663),new o.init(2438529370,812702999),new o.init(355462360,4144912697),new o.init(1731405415,4290775857),new o.init(2394180231,1750603025),new o.init(3675008525,1694076839),new o.init(1203062813,3204075428)])},_doFinalize:function(){var e=u._doFinalize.call(this);return e.sigBytes-=16,e}}),r.SHA384=u._createHelper(c),r.HmacSHA384=u._createHmacHelper(c),s.SHA384)},34:function(e,t,n){var s;e.exports=(s=n(8249),n(4938),function(){var e=s,t=e.lib.Hasher,n=e.x64,r=n.Word,a=n.WordArray,o=e.algo;function i(){return r.create.apply(r,arguments)}var l=[i(1116352408,3609767458),i(1899447441,602891725),i(3049323471,3964484399),i(3921009573,2173295548),i(961987163,4081628472),i(1508970993,3053834265),i(2453635748,2937671579),i(2870763221,3664609560),i(3624381080,2734883394),i(310598401,1164996542),i(607225278,1323610764),i(1426881987,3590304994),i(1925078388,4068182383),i(2162078206,991336113),i(2614888103,633803317),i(3248222580,3479774868),i(3835390401,2666613458),i(4022224774,944711139),i(264347078,2341262773),i(604807628,2007800933),i(770255983,1495990901),i(1249150122,1856431235),i(1555081692,3175218132),i(1996064986,2198950837),i(2554220882,3999719339),i(2821834349,766784016),i(2952996808,2566594879),i(3210313671,3203337956),i(3336571891,1034457026),i(3584528711,2466948901),i(113926993,3758326383),i(338241895,168717936),i(666307205,1188179964),i(773529912,1546045734),i(1294757372,1522805485),i(1396182291,2643833823),i(1695183700,2343527390),i(1986661051,1014477480),i(2177026350,1206759142),i(2456956037,344077627),i(2730485921,1290863460),i(2820302411,3158454273),i(3259730800,3505952657),i(3345764771,106217008),i(3516065817,3606008344),i(3600352804,1432725776),i(4094571909,1467031594),i(275423344,851169720),i(430227734,3100823752),i(506948616,1363258195),i(659060556,3750685593),i(883997877,3785050280),i(958139571,3318307427),i(1322822218,3812723403),i(1537002063,2003034995),i(1747873779,3602036899),i(1955562222,1575990012),i(2024104815,1125592928),i(2227730452,2716904306),i(2361852424,442776044),i(2428436474,593698344),i(2756734187,3733110249),i(3204031479,2999351573),i(3329325298,3815920427),i(3391569614,3928383900),i(3515267271,566280711),i(3940187606,3454069534),i(4118630271,4000239992),i(116418474,1914138554),i(174292421,2731055270),i(289380356,3203993006),i(460393269,320620315),i(685471733,587496836),i(852142971,1086792851),i(1017036298,365543100),i(1126000580,2618297676),i(1288033470,3409855158),i(1501505948,4234509866),i(1607167915,987167468),i(1816402316,1246189591)],u=[];!function(){for(var e=0;e<80;e++)u[e]=i()}();var c=o.SHA512=t.extend({_doReset:function(){this._hash=new a.init([new r.init(1779033703,4089235720),new r.init(3144134277,2227873595),new r.init(1013904242,4271175723),new r.init(2773480762,1595750129),new r.init(1359893119,2917565137),new r.init(2600822924,725511199),new r.init(528734635,4215389547),new r.init(1541459225,327033209)])},_doProcessBlock:function(e,t){for(var n=this._hash.words,s=n[0],r=n[1],a=n[2],o=n[3],i=n[4],c=n[5],h=n[6],d=n[7],p=s.high,f=s.low,m=r.high,g=r.low,x=a.high,b=a.low,y=o.high,v=o.low,k=i.high,w=i.low,I=c.high,N=c.low,S=h.high,$=h.low,C=d.high,T=d.low,E=p,R=f,A=m,_=g,F=x,D=b,O=y,M=v,L=k,B=w,P=I,z=N,W=S,V=$,U=C,G=T,H=0;H<80;H++){var j,K,q=u[H];if(H<16)K=q.high=0|e[t+2*H],j=q.low=0|e[t+2*H+1];else{var X=u[H-15],Y=X.high,Z=X.low,J=(Y>>>1|Z<<31)^(Y>>>8|Z<<24)^Y>>>7,Q=(Z>>>1|Y<<31)^(Z>>>8|Y<<24)^(Z>>>7|Y<<25),ee=u[H-2],te=ee.high,ne=ee.low,se=(te>>>19|ne<<13)^(te<<3|ne>>>29)^te>>>6,re=(ne>>>19|te<<13)^(ne<<3|te>>>29)^(ne>>>6|te<<26),ae=u[H-7],oe=ae.high,ie=ae.low,le=u[H-16],ue=le.high,ce=le.low;K=(K=(K=J+oe+((j=Q+ie)>>>0<Q>>>0?1:0))+se+((j+=re)>>>0<re>>>0?1:0))+ue+((j+=ce)>>>0<ce>>>0?1:0),q.high=K,q.low=j}var he,de=L&P^~L&W,pe=B&z^~B&V,fe=E&A^E&F^A&F,me=R&_^R&D^_&D,ge=(E>>>28|R<<4)^(E<<30|R>>>2)^(E<<25|R>>>7),xe=(R>>>28|E<<4)^(R<<30|E>>>2)^(R<<25|E>>>7),be=(L>>>14|B<<18)^(L>>>18|B<<14)^(L<<23|B>>>9),ye=(B>>>14|L<<18)^(B>>>18|L<<14)^(B<<23|L>>>9),ve=l[H],ke=ve.high,we=ve.low,Ie=U+be+((he=G+ye)>>>0<G>>>0?1:0),Ne=xe+me;U=W,G=V,W=P,V=z,P=L,z=B,L=O+(Ie=(Ie=(Ie=Ie+de+((he+=pe)>>>0<pe>>>0?1:0))+ke+((he+=we)>>>0<we>>>0?1:0))+K+((he+=j)>>>0<j>>>0?1:0))+((B=M+he|0)>>>0<M>>>0?1:0)|0,O=F,M=D,F=A,D=_,A=E,_=R,E=Ie+(ge+fe+(Ne>>>0<xe>>>0?1:0))+((R=he+Ne|0)>>>0<he>>>0?1:0)|0}f=s.low=f+R,s.high=p+E+(f>>>0<R>>>0?1:0),g=r.low=g+_,r.high=m+A+(g>>>0<_>>>0?1:0),b=a.low=b+D,a.high=x+F+(b>>>0<D>>>0?1:0),v=o.low=v+M,o.high=y+O+(v>>>0<M>>>0?1:0),w=i.low=w+B,i.high=k+L+(w>>>0<B>>>0?1:0),N=c.low=N+z,c.high=I+P+(N>>>0<z>>>0?1:0),$=h.low=$+V,h.high=S+W+($>>>0<V>>>0?1:0),T=d.low=T+G,d.high=C+U+(T>>>0<G>>>0?1:0)},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,s=8*e.sigBytes;return t[s>>>5]|=128<<24-s%32,t[30+(s+128>>>10<<5)]=Math.floor(n/4294967296),t[31+(s+128>>>10<<5)]=n,e.sigBytes=4*t.length,this._process(),this._hash.toX32()},clone:function(){var e=t.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32});e.SHA512=t._createHelper(c),e.HmacSHA512=t._createHmacHelper(c)}(),s.SHA512)},4253:function(e,t,n){var s;e.exports=(s=n(8249),n(8269),n(8214),n(888),n(5109),function(){var e=s,t=e.lib,n=t.WordArray,r=t.BlockCipher,a=e.algo,o=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],i=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],l=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],u=[{0:8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{0:1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{0:260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{0:2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{0:128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{0:268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{0:1048576,16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{0:134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],c=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],h=a.DES=r.extend({_doReset:function(){for(var e=this._key.words,t=[],n=0;n<56;n++){var s=o[n]-1;t[n]=e[s>>>5]>>>31-s%32&1}for(var r=this._subKeys=[],a=0;a<16;a++){var u=r[a]=[],c=l[a];for(n=0;n<24;n++)u[n/6|0]|=t[(i[n]-1+c)%28]<<31-n%6,u[4+(n/6|0)]|=t[28+(i[n+24]-1+c)%28]<<31-n%6;for(u[0]=u[0]<<1|u[0]>>>31,n=1;n<7;n++)u[n]=u[n]>>>4*(n-1)+3;u[7]=u[7]<<5|u[7]>>>27}var h=this._invSubKeys=[];for(n=0;n<16;n++)h[n]=r[15-n]},encryptBlock:function(e,t){this._doCryptBlock(e,t,this._subKeys)},decryptBlock:function(e,t){this._doCryptBlock(e,t,this._invSubKeys)},_doCryptBlock:function(e,t,n){this._lBlock=e[t],this._rBlock=e[t+1],d.call(this,4,252645135),d.call(this,16,65535),p.call(this,2,858993459),p.call(this,8,16711935),d.call(this,1,1431655765);for(var s=0;s<16;s++){for(var r=n[s],a=this._lBlock,o=this._rBlock,i=0,l=0;l<8;l++)i|=u[l][((o^r[l])&c[l])>>>0];this._lBlock=o,this._rBlock=a^i}var h=this._lBlock;this._lBlock=this._rBlock,this._rBlock=h,d.call(this,1,1431655765),p.call(this,8,16711935),p.call(this,2,858993459),d.call(this,16,65535),d.call(this,4,252645135),e[t]=this._lBlock,e[t+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});function d(e,t){var n=(this._lBlock>>>e^this._rBlock)&t;this._rBlock^=n,this._lBlock^=n<<e}function p(e,t){var n=(this._rBlock>>>e^this._lBlock)&t;this._lBlock^=n,this._rBlock^=n<<e}e.DES=r._createHelper(h);var f=a.TripleDES=r.extend({_doReset:function(){var e=this._key.words;if(2!==e.length&&4!==e.length&&e.length<6)throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");var t=e.slice(0,2),s=e.length<4?e.slice(0,2):e.slice(2,4),r=e.length<6?e.slice(0,2):e.slice(4,6);this._des1=h.createEncryptor(n.create(t)),this._des2=h.createEncryptor(n.create(s)),this._des3=h.createEncryptor(n.create(r))},encryptBlock:function(e,t){this._des1.encryptBlock(e,t),this._des2.decryptBlock(e,t),this._des3.encryptBlock(e,t)},decryptBlock:function(e,t){this._des3.decryptBlock(e,t),this._des2.encryptBlock(e,t),this._des1.decryptBlock(e,t)},keySize:6,ivSize:2,blockSize:2});e.TripleDES=r._createHelper(f)}(),s.TripleDES)},4938:function(e,t,n){var s,r,a,o,i,l;e.exports=(s=n(8249),a=(r=s).lib,o=a.Base,i=a.WordArray,(l=r.x64={}).Word=o.extend({init:function(e,t){this.high=e,this.low=t}}),l.WordArray=o.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:8*e.length},toX32:function(){for(var e=this.words,t=e.length,n=[],s=0;s<t;s++){var r=e[s];n.push(r.high),n.push(r.low)}return i.create(n,this.sigBytes)},clone:function(){for(var e=o.clone.call(this),t=e.words=this.words.slice(0),n=t.length,s=0;s<n;s++)t[s]=t[s].clone();return e}}),s)},3720:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function s(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=s;var r={},a={};function o(e,t){var n,s,o;return t?(o=0<=(e>>>=0)&&e<256)&&(s=a[e])?s:(n=l(e,(0|e)<0?-1:0,!0),o&&(a[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(s=r[e])?s:(n=l(e,e<0?-1:0,!1),o&&(r[e]=n),n)}function i(e,t){if(isNaN(e))return t?x:g;if(t){if(e<0)return x;if(e>=p)return w}else{if(e<=-f)return I;if(e+1>=f)return k}return e<0?i(-e,t).neg():l(e%d|0,e/d|0,t)}function l(e,t,s){return new n(e,t,s)}n.fromInt=o,n.fromNumber=i,n.fromBits=l;var u=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return c(e.substring(1),t,n).neg();for(var r=i(u(n,8)),a=g,o=0;o<e.length;o+=8){var l=Math.min(8,e.length-o),h=parseInt(e.substring(o,o+l),n);if(l<8){var d=i(u(n,l));a=a.mul(d).add(i(h))}else a=(a=a.mul(r)).add(i(h))}return a.unsigned=t,a}function h(e,t){return"number"==typeof e?i(e,t):"string"==typeof e?c(e,t):l(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=h;var d=4294967296,p=d*d,f=p/2,m=o(1<<24),g=o(0);n.ZERO=g;var x=o(0,!0);n.UZERO=x;var b=o(1);n.ONE=b;var y=o(1,!0);n.UONE=y;var v=o(-1);n.NEG_ONE=v;var k=l(-1,2147483647,!1);n.MAX_VALUE=k;var w=l(-1,-1,!0);n.MAX_UNSIGNED_VALUE=w;var I=l(0,-2147483648,!1);n.MIN_VALUE=I;var N=n.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},N.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=i(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=i(u(e,6),this.unsigned),a=this,o="";;){var l=a.div(r),c=(a.sub(l.mul(r)).toInt()>>>0).toString(e);if((a=l).isZero())return c+o;for(;c.length<6;)c="0"+c;o=""+c+o}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1==(1&this.low)},N.isEven=function(){return 0==(1&this.low)},N.equals=function(e){return s(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},N.eq=N.equals,N.notEquals=function(e){return!this.eq(e)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(e){return this.comp(e)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(e){return this.comp(e)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(e){return this.comp(e)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(e){return this.comp(e)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(e){if(s(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},N.neg=N.negate,N.add=function(e){s(e)||(e=h(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,o=e.high>>>16,i=65535&e.high,u=e.low>>>16,c=0,d=0,p=0,f=0;return p+=(f+=a+(65535&e.low))>>>16,d+=(p+=r+u)>>>16,c+=(d+=n+i)>>>16,c+=t+o,l((p&=65535)<<16|(f&=65535),(c&=65535)<<16|(d&=65535),this.unsigned)},N.subtract=function(e){return s(e)||(e=h(e)),this.add(e.neg())},N.sub=N.subtract,N.multiply=function(e){if(this.isZero())return g;if(s(e)||(e=h(e)),t)return l(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return i(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,r=65535&this.high,a=this.low>>>16,o=65535&this.low,u=e.high>>>16,c=65535&e.high,d=e.low>>>16,p=65535&e.low,f=0,x=0,b=0,y=0;return b+=(y+=o*p)>>>16,x+=(b+=a*p)>>>16,b&=65535,x+=(b+=o*d)>>>16,f+=(x+=r*p)>>>16,x&=65535,f+=(x+=a*d)>>>16,x&=65535,f+=(x+=o*c)>>>16,f+=n*p+r*d+a*c+o*u,l((b&=65535)<<16|(y&=65535),(f&=65535)<<16|(x&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(e){if(s(e)||(e=h(e)),e.isZero())throw Error("division by zero");var n,r,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?l((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?x:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return x;if(e.gt(this.shru(1)))return y;a=x}else{if(this.eq(I))return e.eq(b)||e.eq(v)?I:e.eq(I)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:v:(r=this.sub(e.mul(n)),a=n.add(r.div(e)));if(e.eq(I))return this.unsigned?x:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=g}for(r=this;r.gte(e);){n=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),c=o<=48?1:u(2,o-48),d=i(n),p=d.mul(e);p.isNegative()||p.gt(r);)p=(d=i(n-=c,this.unsigned)).mul(e);d.isZero()&&(d=b),a=a.add(d),r=r.sub(p)}return a},N.div=N.divide,N.modulo=function(e){return s(e)||(e=h(e)),t?l((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return l(~this.low,~this.high,this.unsigned)},N.and=function(e){return s(e)||(e=h(e)),l(this.low&e.low,this.high&e.high,this.unsigned)},N.or=function(e){return s(e)||(e=h(e)),l(this.low|e.low,this.high|e.high,this.unsigned)},N.xor=function(e){return s(e)||(e=h(e)),l(this.low^e.low,this.high^e.high,this.unsigned)},N.shiftLeft=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):l(0,this.low<<e-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):l(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(e){if(s(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?l(this.low>>>e|t<<32-e,t>>>e,this.unsigned):l(32===e?t:t>>>e-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},N.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},N.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,s){return s?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},6377:(e,t,n)=>{var s=n(4832),r=n(8652),a=n(801),o=n(2030),i=n(3618),l=n(9049),u=n(1971);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=o,u.xor4096=i,u.tychei=l,e.exports=u},4832:function(e,t,n){var s;!function(e,r,a){function o(e){var t,n=this,s=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new o(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},9049:function(e,t,n){var s;!function(e,r,a){function o(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new o(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},8652:function(e,t,n){var s;!function(e,r,a){function o(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new o(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},3618:function(e,t,n){var s;!function(e,r,a){function o(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,o,i=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(o=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(o=o+1640531527|0,r=0==(n=i[127&a]^=s+o)?r+1:0);for(r>=128&&(i[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=i[r+34&127],n=i[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,i[r]=s^n;e.w=o,e.X=i,e.i=r}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new o(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},2030:function(e,t,n){var s;!function(e,r,a){function o(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new o(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var s;!function(e,r,a){function o(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new o(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&i(s,n),r.state=function(){return i(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},1971:function(e,t,n){var s;!function(r,a,o){var i,l=256,u=o.pow(l,6),c=o.pow(2,52),h=2*c,d=l-1;function p(e,t,n){var s=[],d=x(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(r.crypto||r.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=r.navigator,n=t&&t.plugins;return[+new Date,r,n,r.screen,b(a)]}}():e,3),s),p=new f(s),y=function(){for(var e=p.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=p.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return y.int32=function(){return 0|p.g(4)},y.quick=function(){return p.g(4)/4294967296},y.double=y,x(b(p.S),a),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,p),e.state=function(){return m(p,{})}),n?(o.random=e,t):e})(y,d,"global"in t?t.global:this==o,t.state)}function f(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);r<l;)o[r]=r++;for(r=0;r<l;r++)o[r]=o[a=d&a+e[r%n]+(t=o[r])],o[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,o=s.S;e--;)t=o[r=d&r+1],n=n*l+o[d&(o[r]=o[a=d&a+t])+(o[a]=t)];return s.i=r,s.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(g(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function x(e,t){for(var n,s=e+"",r=0;r<s.length;)t[d&r]=d&(n^=19*t[d&r])+s.charCodeAt(r++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(x(o.random(),a),e.exports){e.exports=p;try{i=n(5042)}catch(e){}}else void 0===(s=function(){return p}.call(t,n,t,e))||(e.exports=s)}("undefined"!=typeof self?self:this,[],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5755:()=>{},7004:()=>{},2480:()=>{},5042:()=>{}},t={};function n(s){var r=t[s];if(void 0!==r)return r.exports;var a=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var s={};(()=>{n.d(s,{Z:()=>cse});var e={};n.r(e),n.d(e,{assertParamsValid:()=>qa,computeFlatOffset:()=>io,computeOutShape:()=>Ya,getNormalizedAxes:()=>eo,isSliceContinous:()=>oo,maskToAxes:()=>Xa,parseSliceParams:()=>lo,sliceInfo:()=>uo,startForAxis:()=>ro,startIndicesWithElidedDims:()=>to,stopForAxis:()=>ao,stopIndicesWithElidedDims:()=>no,stridesForAxis:()=>so,stridesWithElidedDims:()=>Za});var t={};n.r(t),n.d(t,{collectGatherOpShapeInfo:()=>th,computeOutShape:()=>eh,segOpComputeOptimalWindowSize:()=>Qc});var r={};n.r(r),n.d(r,{ERF_A1:()=>xc,ERF_A2:()=>bc,ERF_A3:()=>yc,ERF_A4:()=>vc,ERF_A5:()=>kc,ERF_P:()=>gc,PARALLELIZE_THRESHOLD:()=>nc,RowPartitionType:()=>Zu,SELU_SCALE:()=>mc,SELU_SCALEALPHA:()=>fc,applyActivation:()=>jl,assertAndGetBroadcastShape:()=>Ha,assertAxesAreInnerMostDims:()=>Li,assertParamsConsistent:()=>Xu,assignToTypedArray:()=>Cc,axesAreInnerMostDims:()=>Fi,calculateShapes:()=>pc,checkEinsumDimSizes:()=>Mc,checkPadOnDimRoundingMode:()=>Vo,combineLocations:()=>Di,combineRaggedTensorToTensorShapes:()=>Ju,complexWithEvenIndex:()=>Nc,complexWithOddIndex:()=>Sc,computeConv2DInfo:()=>_o,computeConv3DInfo:()=>Fo,computeDefaultPad:()=>Do,computeDilation2DInfo:()=>Eo,computeOptimalWindowSize:()=>sc,computeOutAndReduceShapes:()=>Oi,computeOutShape:()=>Yu,computePool2DInfo:()=>Ro,computePool3DInfo:()=>Ao,convertConv2DDataFormat:()=>Wo,decodeEinsumEquation:()=>Dc,eitherStridesOrDilationsAreOne:()=>zo,expandShapeToKeepDim:()=>Mi,exponent:()=>Ec,exponents:()=>Tc,fromStringArrayToUint8:()=>sh,fromUint8ToStringArray:()=>nh,getAxesPermutation:()=>Bi,getBroadcastDims:()=>Ua,getComplexWithIndex:()=>$c,getEinsumComputePath:()=>Lc,getEinsumPermutation:()=>Oc,getFusedBiasGradient:()=>Hl,getFusedDyActivation:()=>Gl,getImageCenter:()=>rc,getInnerMostAxes:()=>zi,getPermuted:()=>oc,getRaggedRank:()=>ec,getReductionAxes:()=>Ga,getReshaped:()=>ac,getReshapedPermuted:()=>ic,getRowPartitionTypesHelper:()=>Qu,getSliceBeginCoords:()=>lc,getSliceSize:()=>uc,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Wc,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Vc,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Uc,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>jc,getSparseReshapeInputOutputMismatchErrorMessage:()=>qc,getSparseReshapeInputOutputMultipleErrorMessage:()=>Kc,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>Gc,getSparseReshapeNegativeOutputDimErrorMessage:()=>Hc,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>Jc,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Xc,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>Yc,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>Zc,getUndoAxesPermutation:()=>Pi,isIdentityPermutation:()=>Bc,log:()=>Fs,mergeRealAndImagArrays:()=>wc,prepareAndValidate:()=>cc,prepareSplitSize:()=>zc,segment_util:()=>t,shouldFuse:()=>Kl,slice_util:()=>e,splitRealAndImagArrays:()=>Ic,tupleValuesAreOne:()=>Po,upcastType:()=>Ar,validateDefaultValueShape:()=>tc,validateInput:()=>dc,validateUpdateShape:()=>hc,warn:()=>_s});var a={};n.r(a),n.d(a,{addImpl:()=>Ph,bincountImpl:()=>Id,bincountReduceImpl:()=>Nd,castImpl:()=>Dh,ceilImpl:()=>Cd,concatImpl:()=>_d,equalImpl:()=>mp,expImpl:()=>Sp,expm1Impl:()=>Rp,floorImpl:()=>jp,gatherNdImpl:()=>ef,gatherV2Impl:()=>nf,greaterEqualImpl:()=>lf,greaterImpl:()=>rf,lessEqualImpl:()=>bf,lessImpl:()=>mf,linSpaceImpl:()=>kf,logImpl:()=>If,maxImpl:()=>Mf,maximumImpl:()=>Pf,minimumImpl:()=>Xf,multiplyImpl:()=>ip,negImpl:()=>sm,notEqualImpl:()=>hm,prodImpl:()=>Nm,raggedGatherImpl:()=>Cm,raggedTensorToTensorImpl:()=>Fm,rangeImpl:()=>Om,rsqrtImpl:()=>jm,scatterImpl:()=>Xm,sigmoidImpl:()=>Sh,simpleAbsImpl:()=>qh,sliceImpl:()=>yd,sparseFillEmptyRowsImpl:()=>fg,sparseReshapeImpl:()=>gg,sparseSegmentReductionImpl:()=>bg,sqrtImpl:()=>Ig,stridedSliceImpl:()=>_g,stringNGramsImpl:()=>Og,stringSplitImpl:()=>Bg,stringToHashBucketFastImpl:()=>zg,subImpl:()=>Op,tileImpl:()=>Gg,topKImpl:()=>Kg,transposeImpl:()=>Qh,uniqueImpl:()=>Qg});var o={};n.r(o),n.d(o,{CompositeArrayBuffer:()=>AA,browserFiles:()=>hF,browserHTTPRequest:()=>vF,concatenateArrayBuffers:()=>BA,copyModel:()=>N_,decodeWeights:()=>DA,encodeWeights:()=>FA,fromMemory:()=>NF,fromMemorySync:()=>SF,getLoadHandlers:()=>YA,getModelArtifactsForJSON:()=>VA,getModelArtifactsForJSONSync:()=>WA,getModelArtifactsInfoForJSON:()=>UA,getSaveHandlers:()=>XA,getWeightSpecs:()=>GA,http:()=>yF,isHTTPScheme:()=>xF,listModels:()=>w_,loadWeights:()=>fF,moveModel:()=>S_,registerLoadRouter:()=>qA,registerSaveRouter:()=>KA,removeModel:()=>I_,weightsLoaderFactory:()=>mF,withSaveHandler:()=>$F,withSaveHandlerSync:()=>CF});var i={};n.r(i),n.d(i,{assertParamsValid:()=>FF,computeFlatOffset:()=>jF,computeOutShape:()=>OF,getNormalizedAxes:()=>PF,isSliceContinous:()=>HF,maskToAxes:()=>DF,parseSliceParams:()=>KF,sliceInfo:()=>qF,startForAxis:()=>UF,startIndicesWithElidedDims:()=>zF,stopForAxis:()=>GF,stopIndicesWithElidedDims:()=>WF,stridesForAxis:()=>VF,stridesWithElidedDims:()=>MF});var l={};n.r(l),n.d(l,{conv2d:()=>oB,depthwiseConv2d:()=>uB,matMul:()=>cB});var u={};n.r(u),n.d(u,{collectGatherOpShapeInfo:()=>pz,computeOutShape:()=>dz,segOpComputeOptimalWindowSize:()=>hz});var c={};n.r(c),n.d(c,{ERF_A1:()=>EP,ERF_A2:()=>RP,ERF_A3:()=>AP,ERF_A4:()=>_P,ERF_A5:()=>FP,ERF_P:()=>TP,PARALLELIZE_THRESHOLD:()=>xP,RowPartitionType:()=>dP,SELU_SCALE:()=>CP,SELU_SCALEALPHA:()=>$P,applyActivation:()=>rB,assertAndGetBroadcastShape:()=>rF,assertAxesAreInnerMostDims:()=>kO,assertParamsConsistent:()=>cP,assignToTypedArray:()=>PP,axesAreInnerMostDims:()=>xO,calculateShapes:()=>DL,checkEinsumDimSizes:()=>qP,checkPadOnDimRoundingMode:()=>wD,combineLocations:()=>bO,combineRaggedTensorToTensorShapes:()=>pP,complexWithEvenIndex:()=>MP,complexWithOddIndex:()=>LP,computeConv2DInfo:()=>hD,computeConv3DInfo:()=>dD,computeDefaultPad:()=>pD,computeDilation2DInfo:()=>lD,computeOptimalWindowSize:()=>bP,computeOutAndReduceShapes:()=>yO,computeOutShape:()=>hP,computePool2DInfo:()=>uD,computePool3DInfo:()=>cD,convertConv2DDataFormat:()=>kD,decodeEinsumEquation:()=>jP,eitherStridesOrDilationsAreOne:()=>yD,expandShapeToKeepDim:()=>vO,exponent:()=>WP,exponents:()=>zP,fromStringArrayToUint8:()=>mz,fromUint8ToStringArray:()=>fz,getAxesPermutation:()=>wO,getBroadcastDims:()=>nF,getComplexWithIndex:()=>BP,getEinsumComputePath:()=>XP,getEinsumPermutation:()=>KP,getFusedBiasGradient:()=>sB,getFusedDyActivation:()=>nB,getImageCenter:()=>yP,getInnerMostAxes:()=>NO,getPermuted:()=>kP,getRaggedRank:()=>mP,getReductionAxes:()=>sF,getReshaped:()=>vP,getReshapedPermuted:()=>wP,getRowPartitionTypesHelper:()=>fP,getSliceBeginCoords:()=>IP,getSliceSize:()=>NP,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>QP,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>ez,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>tz,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>rz,getSparseReshapeInputOutputMismatchErrorMessage:()=>oz,getSparseReshapeInputOutputMultipleErrorMessage:()=>az,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>nz,getSparseReshapeNegativeOutputDimErrorMessage:()=>sz,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>cz,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>iz,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>lz,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>uz,getUndoAxesPermutation:()=>IO,isIdentityPermutation:()=>YP,log:()=>rR,mergeRealAndImagArrays:()=>DP,prepareAndValidate:()=>SP,prepareSplitSize:()=>JP,segment_util:()=>u,shouldFuse:()=>aB,slice_util:()=>i,splitRealAndImagArrays:()=>OP,stridesOrDilationsArePositive:()=>vD,tupleValuesAreOne:()=>bD,upcastType:()=>rA,validateDefaultValueShape:()=>gP,validateInput:()=>FL,validateUpdateShape:()=>_L,warn:()=>sR});var h={};n.r(h),n.d(h,{json:()=>IX});var d={};n.r(d),n.d(d,{json:()=>NX});var p={};n.r(p),n.d(p,{json:()=>SX});var f={};n.r(f),n.d(f,{json:()=>$X});var m={};n.r(m),n.d(m,{json:()=>CX});var g={};n.r(g),n.d(g,{json:()=>TX});var x={};n.r(x),n.d(x,{json:()=>EX});var b={};n.r(b),n.d(b,{json:()=>RX});var y={};n.r(y),n.d(y,{json:()=>AX});var v={};n.r(v),n.d(v,{json:()=>_X});var k={};n.r(k),n.d(k,{json:()=>FX});var w={};n.r(w),n.d(w,{json:()=>DX});var I={};n.r(I),n.d(I,{json:()=>OX});var N={};n.r(N),n.d(N,{json:()=>MX});var S={};n.r(S),n.d(S,{json:()=>LX});var $={};n.r($),n.d($,{json:()=>BX});var C={};n.r(C),n.d(C,{json:()=>PX});var T={};n.r(T),n.d(T,{json:()=>zX});var E={};n.r(E),n.d(E,{json:()=>WX});var R={};n.r(R),n.d(R,{OP_SCOPE_SUFFIX:()=>SA,abs:()=>tF,acos:()=>YF,acosh:()=>ZF,add:()=>L_,addN:()=>JF,all:()=>QF,any:()=>eD,argMax:()=>tD,argMin:()=>nD,asin:()=>sD,asinh:()=>rD,atan:()=>aD,atan2:()=>oD,atanh:()=>iD,avgPool:()=>ND,avgPool3d:()=>SD,basicLSTMCell:()=>AD,batchNorm:()=>FD,batchNorm2d:()=>DD,batchNorm3d:()=>OD,batchNorm4d:()=>MD,batchToSpaceND:()=>_D,bincount:()=>LD,bitwiseAnd:()=>BD,booleanMaskAsync:()=>HL,broadcastArgs:()=>PD,broadcastTo:()=>zD,buffer:()=>T_,cast:()=>E_,ceil:()=>WD,clipByValue:()=>VD,clone:()=>R_,complex:()=>CA,concat:()=>$D,concat1d:()=>UD,concat2d:()=>GD,concat3d:()=>HD,concat4d:()=>jD,conv1d:()=>qD,conv2d:()=>KD,conv2dTranspose:()=>YD,conv3d:()=>ZD,conv3dTranspose:()=>QD,cos:()=>eO,cosh:()=>tO,cosineWindow:()=>QL,cumprod:()=>nO,cumsum:()=>sO,denseBincount:()=>rO,depthToSpace:()=>aO,depthwiseConv2d:()=>oO,diag:()=>iO,dilation2d:()=>lO,div:()=>P_,divNoNan:()=>hO,dot:()=>dO,dropout:()=>ZL,einsum:()=>pO,elu:()=>fO,enclosingPowerOfTwo:()=>JL,ensureShape:()=>mO,equal:()=>uO,erf:()=>gO,euclideanNorm:()=>RO,exp:()=>AO,expandDims:()=>_O,expm1:()=>FO,eye:()=>OO,fft:()=>gL,fill:()=>J_,floor:()=>MO,floorDiv:()=>B_,fused:()=>l,gather:()=>LO,gatherND:()=>YL,greater:()=>BO,greaterEqual:()=>PO,ifft:()=>xL,imag:()=>zO,image:()=>rP,inTopKAsync:()=>eB,irfft:()=>bL,isFinite:()=>WO,isInf:()=>VO,isNaN:()=>UO,leakyRelu:()=>GO,less:()=>HO,lessEqual:()=>jO,linalg:()=>aP,linspace:()=>KO,localResponseNormalization:()=>qO,log:()=>XO,log1p:()=>YO,logSigmoid:()=>QO,logSoftmax:()=>eM,logSumExp:()=>tM,logicalAnd:()=>nM,logicalNot:()=>sM,logicalOr:()=>rM,logicalXor:()=>aM,losses:()=>oP,lowerBound:()=>lM,matMul:()=>CD,max:()=>SO,maxPool:()=>uM,maxPool3d:()=>cM,maxPoolWithArgmax:()=>hM,maximum:()=>aF,mean:()=>dM,meshgrid:()=>mM,min:()=>$O,minimum:()=>gM,mirrorPad:()=>xM,mod:()=>bM,moments:()=>yM,movingAverage:()=>KL,mul:()=>z_,multiRNNCell:()=>vM,multinomial:()=>kM,neg:()=>ZO,norm:()=>EO,notEqual:()=>wM,oneHot:()=>IM,ones:()=>fM,onesLike:()=>NM,op:()=>$A,outerProduct:()=>SM,pad:()=>$M,pad1d:()=>CM,pad2d:()=>TM,pad3d:()=>EM,pad4d:()=>RM,pool:()=>_M,pow:()=>Q_,prelu:()=>FM,print:()=>A_,prod:()=>DM,raggedGather:()=>OM,raggedRange:()=>MM,raggedTensorToTensor:()=>LM,rand:()=>BM,randomGamma:()=>VM,randomNormal:()=>UM,randomStandardNormal:()=>GM,randomUniform:()=>HM,randomUniformInt:()=>jM,range:()=>KM,real:()=>qM,reciprocal:()=>XM,relu:()=>YM,relu6:()=>ZM,reshape:()=>ID,reverse:()=>JM,reverse1d:()=>QM,reverse2d:()=>eL,reverse3d:()=>tL,reverse4d:()=>nL,rfft:()=>vL,round:()=>sL,rsqrt:()=>rL,scalar:()=>H_,scatterND:()=>qL,searchSorted:()=>iM,selu:()=>aL,separableConv2d:()=>oL,setdiff1dAsync:()=>iL,sigmoid:()=>TD,sign:()=>lL,signal:()=>sP,sin:()=>uL,sinh:()=>cL,slice:()=>ED,slice1d:()=>hL,slice2d:()=>dL,slice3d:()=>pL,slice4d:()=>fL,softmax:()=>mL,softplus:()=>JO,spaceToBatchND:()=>AM,sparse:()=>iP,sparseToDense:()=>XL,spectral:()=>nP,split:()=>yL,sqrt:()=>W_,square:()=>V_,squaredDifference:()=>kL,squeeze:()=>wL,stack:()=>IL,step:()=>NL,stridedSlice:()=>SL,string:()=>lP,sub:()=>eF,sum:()=>CO,tan:()=>$L,tanh:()=>RD,tensor:()=>EA,tensor1d:()=>CL,tensor2d:()=>TL,tensor3d:()=>TF,tensor4d:()=>EL,tensor5d:()=>RL,tensor6d:()=>AL,tensorScatterUpdate:()=>OL,tile:()=>DO,topk:()=>ML,transpose:()=>jL,truncatedNormal:()=>LL,unique:()=>BL,unsortedSegmentSum:()=>PL,unstack:()=>zL,upperBound:()=>WL,variable:()=>VL,where:()=>cO,whereAsync:()=>GL,zeros:()=>pM,zerosLike:()=>U_});var A={};n.r(A),n.d(A,{addImpl:()=>MZ,bincountImpl:()=>TJ,bincountReduceImpl:()=>EJ,bitwiseAndImpl:()=>AJ,castImpl:()=>AZ,ceilImpl:()=>OJ,concatImpl:()=>WJ,equalImpl:()=>SQ,expImpl:()=>MQ,expm1Impl:()=>WQ,floorImpl:()=>r0,gatherNdImpl:()=>d0,gatherV2Impl:()=>f0,greaterEqualImpl:()=>y0,greaterImpl:()=>g0,lessEqualImpl:()=>_0,lessImpl:()=>E0,linSpaceImpl:()=>O0,logImpl:()=>L0,maxImpl:()=>J0,maximumImpl:()=>t1,minimumImpl:()=>h1,multiplyImpl:()=>xQ,negImpl:()=>k1,notEqualImpl:()=>E1,prodImpl:()=>V1,raggedGatherImpl:()=>H1,raggedRangeImpl:()=>q1,raggedTensorToTensorImpl:()=>e2,rangeImpl:()=>n2,rsqrtImpl:()=>f2,scatterImpl:()=>x2,sigmoidImpl:()=>wZ,simpleAbsImpl:()=>HZ,sliceImpl:()=>NJ,sparseFillEmptyRowsImpl:()=>L2,sparseReshapeImpl:()=>P2,sparseSegmentReductionImpl:()=>W2,sqrtImpl:()=>j2,staticRegexReplaceImpl:()=>Q2,stridedSliceImpl:()=>r3,stringNGramsImpl:()=>i3,stringSplitImpl:()=>c3,stringToHashBucketFastImpl:()=>d3,subImpl:()=>KQ,tileImpl:()=>x3,topKImpl:()=>v3,transposeImpl:()=>JZ,uniqueImpl:()=>$3});class _{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class F{refCount(e){return D("refCount")}incRef(e){return D("incRef")}timerAvailable(){return!0}time(e){return D("time")}read(e){return D("read")}readSync(e){return D("readSync")}readToGPU(e,t){return D("readToGPU")}numDataIds(){return D("numDataIds")}disposeData(e,t){return D("disposeData")}write(e,t,n){return D("write")}move(e,t,n,s,r){return D("move")}memory(){return D("memory")}floatPrecision(){return D("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return D("dispose")}}function D(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function O(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,B(e,t,n)}function M(e,t,n){return Math.max(e,Math.min(t,n))}function L(e){return e%2==0?e:e+1}function B(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function P(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function z(e,t,n=""){P(G(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function W(e){P(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function V(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||te(e)&&!n)for(let s=0;s<e.length;++s)V(e[s],t,n);else t.push(e);return t}function U(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function G(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function H(e){return e%1==0}function j(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function K(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function q(e,t=(e=>0),n,s=setTimeout){return new Promise(((r,a)=>{let o=0;const i=()=>{if(e())return void r();o++;const l=t(o);null!=n&&o>=n?a():s(i,l)};i()}))}function X(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function Y(e,t){const n=t.length;return P((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),P(e.every((e=>H(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function Z(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:Y(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function J(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function Q(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function ee(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function te(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function ne(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function se(e){return"string"==typeof e||e instanceof String}function re(e){return"number"==typeof e}function ae(e){return Array.isArray(e)?ae(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":re(e)?"float32":se(e)?"string":"boolean"==typeof e?"bool":"float32"}function oe(e){return!!(e&&e.constructor&&e.call&&e.apply)}function ie(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function le(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function ue(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=ue(e+t*i,o,n,s)}return r}function ce(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return ue(0,e,t,n)}function he(e,t){const n=de(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function de(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function pe(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return ce(e,new Float32Array(n));if("int32"===t)return ce(e,new Int32Array(n));if("bool"===t)return ce(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function fe(e){e.forEach((t=>{P(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function me(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function ge(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function xe(e){return e&&e.then&&"function"==typeof e.then}const be="tfjsflags";class ye{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ve,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(ke().getBool("IS_TEST")||ke().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];ke().getBool("IS_TEST")||ke().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(xe(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);be in e&&e[be].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function ve(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function ke(){return Ie}let we,Ie=null;function Ne(){if(null==we){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}we=e}return we}function Se(e,t){const n=function(){const e=Ne();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const $e="Abs",Ce="Acos",Te="Acosh",Ee="Add",Re="AddN",Ae="All",_e="Any",Fe="ArgMax",De="ArgMin",Oe="Asin",Me="Asinh",Le="Atan",Be="Atanh",Pe="Atan2",ze="AvgPool",We="AvgPoolGrad",Ve="AvgPool3D",Ue="AvgPool3DGrad",Ge="BatchMatMul",He="BatchToSpaceND",je="Bincount",Ke="BroadcastArgs",qe="Cast",Xe="Ceil",Ye="ClipByValue",Ze="Complex",Je="ComplexAbs",Qe="Concat",et="Conv2D",tt="Conv2DBackpropFilter",nt="Conv2DBackpropInput",st="Conv3D",rt="Conv3DBackpropFilterV2",at="Conv3DBackpropInputV2",ot="Cos",it="Cosh",lt="Cumprod",ut="Cumsum",ct="CropAndResize",ht="DenseBincount",dt="DepthToSpace",pt="DepthwiseConv2dNative",ft="DepthwiseConv2dNativeBackpropFilter",mt="DepthwiseConv2dNativeBackpropInput",gt="Diag",xt="Dilation2D",bt="Dilation2DBackpropInput",yt="Dilation2DBackpropFilter",vt="RealDiv",kt="Einsum",wt="Elu",It="EluGrad",Nt="Erf",St="Equal",$t="Exp",Ct="ExpandDims",Tt="Expm1",Et="FFT",Rt="Fill",At="FlipLeftRight",_t="Floor",Ft="FloorDiv",Dt="FusedBatchNorm",Ot="GatherV2",Mt="GatherNd",Lt="Greater",Bt="GreaterEqual",Pt="Identity",zt="IFFT",Wt="Imag",Vt="IsFinite",Ut="IsInf",Gt="IsNan",Ht="LeakyRelu",jt="Less",Kt="LessEqual",qt="LinSpace",Xt="Log",Yt="Log1p",Zt="LogicalAnd",Jt="LogicalNot",Qt="LogicalOr",en="LRN",tn="LRNGrad",nn="Max",sn="Maximum",rn="MaxPool",an="MaxPoolGrad",on="MaxPool3D",ln="MaxPool3DGrad",un="MaxPoolWithArgmax",cn="Mean",hn="Min",dn="Minimum",pn="MirrorPad",fn="Mod",mn="Multinomial",gn="Multiply",xn="Neg",bn="NotEqual",yn="NonMaxSuppressionV3",vn="NonMaxSuppressionV4",kn="NonMaxSuppressionV5",wn="OnesLike",In="OneHot",Nn="Pack",Sn="PadV2",$n="Pow",Cn="Prelu",Tn="Prod",En="RaggedGather",Rn="RaggedTensorToTensor",An="Range",_n="Real",Fn="Reciprocal",Dn="Relu",On="Reshape",Mn="ResizeNearestNeighbor",Ln="ResizeNearestNeighborGrad",Bn="ResizeBilinear",Pn="ResizeBilinearGrad",zn="Relu6",Wn="Reverse",Vn="Round",Un="Rsqrt",Gn="ScatterNd",Hn="SearchSorted",jn="Select",Kn="Selu",qn="Slice",Xn="Sin",Yn="Sinh",Zn="Sign",Jn="Sigmoid",Qn="Softplus",es="Sqrt",ts="Sum",ns="SpaceToBatchND",ss="SplitV",rs="Softmax",as="SparseFillEmptyRows",os="SparseReshape",is="SparseSegmentMean",ls="SparseSegmentSum",us="SparseToDense",cs="SquaredDifference",hs="Square",ds="StridedSlice",ps="StringNGrams",fs="StringSplit",ms="StringToHashBucketFast",gs="Sub",xs="Tan",bs="Tanh",ys="Tile",vs="TopK",ks="Transform",ws="Transpose",Is="Unique",Ns="Unpack",Ss="UnsortedSegmentSum",$s="ZerosLike",Cs="Step",Ts="RotateWithOffset",Es="_FusedMatMul",Rs="FusedConv2D",As="FusedDepthwiseConv2D";function _s(...e){ke().getBool("IS_TEST")||ke().getBool("PROD")||console.warn(...e)}function Fs(...e){ke().getBool("IS_TEST")||ke().getBool("PROD")||console.log(...e)}const Ds=Se("kernelRegistry",(()=>new Map)),Os=Se("gradRegistry",(()=>new Map));function Ms(e,t){const n=Ws(e,t);return Ds.get(n)}function Ls(e){return Os.get(e)}function Bs(e){const t=Ds.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,o]=r,[i]=a.split("_");i===e&&n.push(o)}return n}function Ps(e){const{kernelName:t,backendName:n}=e,s=Ws(t,n);Ds.has(s)&&_s(`The kernel '${t}' for backend '${n}' is already registered`),Ds.set(s,e)}function zs(e){const{kernelName:t}=e;Os.has(t)&&ke().getBool("DEBUG")&&_s(`Overriding the gradient for '${t}'`),Os.set(t,e)}function Ws(e,t){return`${t}_${e}`}var Vs=n(3720),Us=n.n(Vs);const Gs=Us()||Vs;function Hs(e){return Gs.fromString(e,!0,16)}const js=Hs("c3a5c85c97cb3127"),Ks=Hs("b492b66fbe98f273"),qs=Hs("9ae16a3b2f90404f");function Xs(e){return e.xor(e.shru(47))}function Ys(e,t,n){const s=e.slice(t,t+n);return Gs.fromBytes(Array.from(s),!0,!0)}function Zs(e,t){return Ys(e,t,8)}function Js(e,t){return Ys(e,t,4)}function Qs(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function er(e,t,n=Hs("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function tr(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=Qs(a.add(r).add(s),21);const o=r;return r=(r=r.add(t)).add(n),a=a.add(Qs(r,44)),[r.add(s),a.add(o)]}(Zs(e,t),Zs(e,t+8),Zs(e,t+16),Zs(e,t+24),n,s)}function nr(e,t=e.length){const n=Gs.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=qs.add(2*t),s=Zs(e,0).add(qs),r=Zs(e,t-8);return er(Qs(r,37).mul(n).add(s),Qs(s,25).add(r).mul(n),n)}if(t>=4){const n=qs.add(2*t);return er(Js(e,0).shl(3).add(t),Js(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return Xs(qs.mul(n).xor(js.mul(s))).mul(qs)}return qs}(e,t):function(e,t=e.length){const n=qs.add(2*t),s=Zs(e,0).mul(Ks),r=Zs(e,8),a=Zs(e,t-8).mul(n),o=Zs(e,t-16).mul(qs);return er(Qs(s.add(r),43).add(Qs(a,30)).add(o),s.add(Qs(r.add(qs),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=qs.add(2*t),s=Zs(e,0).mul(qs),r=Zs(e,8),a=Zs(e,t-8).mul(n),o=Zs(e,t-16).mul(qs),i=Qs(s.add(r),43).add(Qs(a,30)).add(o),l=er(i,s.add(Qs(r.add(qs),18)).add(a),n),u=Zs(e,16).mul(n),c=Zs(e,24),h=i.add(Zs(e,t-32)).mul(n),d=l.add(Zs(e,t-24)).mul(n);return er(Qs(u.add(c),43).add(Qs(h,30)).add(d),u.add(Qs(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(Ks).add(113),a=Xs(r.mul(qs).add(113)).mul(qs),o=[Gs.UZERO,Gs.UZERO],i=[Gs.UZERO,Gs.UZERO];s=s.mul(qs).add(Zs(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Qs(s.add(r).add(o[0]).add(Zs(e,l+8)),37).mul(Ks),r=Qs(r.add(o[1]).add(Zs(e,l+48)),42).mul(Ks),s=s.xor(i[1]),r=r.add(o[0]).add(Zs(e,l+40)),a=Qs(a.add(i[0]),33).mul(Ks),o=tr(e,l,o[1].mul(Ks),s.add(i[0])),i=tr(e,l+32,a.add(i[1]),r.add(Zs(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=Ks.add(a.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),s=Qs(s.add(r).add(o[0]).add(Zs(e,l+8)),37).mul(h),r=Qs(r.add(o[1]).add(Zs(e,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(o[0].mul(9).add(Zs(e,l+40))),a=Qs(a.add(i[0]),33).mul(h),o=tr(e,l,o[1].mul(h),s.add(i[0])),i=tr(e,l+32,a.add(i[1]),r.add(Zs(e,l+16))),[a,s]=[s,a],er(er(o[0],i[0],h).add(Xs(r).mul(js)).add(a),er(o[1],i[1],h).add(s),h)}function sr(e,t){return"string"===t?or(e):rr([e],t)}function rr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=V(e)),ke().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function ar(){return ke().platform.now()}function or(e,t="utf-8"){return t=t||"utf-8",ke().platform.encode(e,t)}function ir(e,t="utf-8"){return t=t||"utf-8",ke().platform.decode(e,t)}class lr{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new cr)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const o=ar();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:ar()-o})}if(ke().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{ur(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function ur(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class cr{logKernelProfile(e,t,n,s,r,a){const o="number"==typeof s?K(`${s}ms`,9):s.error,i=K(e,25),l=t.rank,u=t.size,c=K(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const hr=20,dr=3,pr=7;function fr(e,t,n,s){const r=le(t),a=function(e,t,n,s){const r=U(t),a=s[s.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===n?br(e):e;if(i>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],mr(l[t+e],0,n).length)}return o}(e,t,n,r),o=t.length,i=xr(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function mr(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(pr))} + ${parseFloat(e[1].toFixed(pr))}j`:se(e)?`'${e}'`:"bool"===n?gr(e):parseFloat(e.toFixed(pr)).toString(),K(s,t)}function gr(e){return 0===e?"false":"true"}function xr(e,t,n,s,r,a=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===n?[mr(br(e)[0],0,n)]:"bool"===n?[gr(e[0])]:[e[0].toString()];if(1===l){if(i>hr){const t=dr*o;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-dr)*o,i*o));return"complex64"===n&&(s=br(s),a=br(a)),["["+s.map(((e,t)=>mr(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>mr(e,r[i-dr+t],n))).join(", ")+"]"]}return["["+("complex64"===n?br(e):Array.from(e)).map(((e,t)=>mr(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*o,d=[];if(i>hr){for(let t=0;t<dr;t++){const s=t*h,a=s+h;d.push(...xr(e.slice(s,a),u,n,c,r,!1))}d.push("...");for(let t=i-dr;t<i;t++){const s=t*h,a=s+h;d.push(...xr(e.slice(s,a),u,n,c,r,t===i-1))}}else for(let t=0;t<i;t++){const s=t*h,a=s+h;d.push(...xr(e.slice(s,a),u,n,c,r,t===i-1))}const p=2===l?",":"";d[0]="["+d[0]+p;for(let e=1;e<d.length-1;e++)d[e]=" "+d[e]+p;let f=",\n";for(let e=2;e<l;e++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":f),d}function br(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class yr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=U(e),null!=n){const e=n.length;P(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||Q(t,this.size),this.strides=le(e)}set(e,...t){0===t.length&&(t=[0]),P(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return vr().makeTensor(this.values,this.shape,this.dtype)}}let vr=null,kr=null,wr=null;class Ir{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=U(e),this.strides=le(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return kr.buffer(this.shape,this.dtype,e)}bufferSync(){return kr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return ce(this.shape,e,"complex64"===this.dtype)}arraySync(){return ce(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=vr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>ir(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),vr().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=vr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>ir(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await vr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(vr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return kr.print(this,e)}clone(){return this.throwIfDisposed(),kr.clone(this)}toString(e=!1){return fr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),kr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),vr().makeVariable(this,e,t,n)}}Object.defineProperty(Ir,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),Se("Tensor",(()=>Ir));class Nr extends Ir{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!G(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);vr().disposeTensor(this),this.dataId=e.dataId,vr().incRef(this,null)}dispose(){vr().disposeVariable(this),this.isDisposedInternal=!0}}var Sr,$r,Cr,Tr,Er;Object.defineProperty(Nr,Symbol.hasInstance,{value:e=>e instanceof Ir&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Sr||(Sr={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}($r||($r={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Cr||(Cr={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Tr||(Tr={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Er||(Er={}));const Rr={float32:Tr,int32:$r,bool:Cr,complex64:Er};function Ar(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Rr[e][t]}function _r(e){return Ar(e,"int32")}function Fr(e,t){if(e.dtype===t.dtype)return[e,t];const n=Ar(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Dr(e,t){return t.some((t=>t.id===e.id))}function Or(e){const t=[];return Mr(e,t,new Set),t}function Mr(e,t,n){if(null==e)return;if(e instanceof Ir)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),Mr(s,t,n))}}function Lr(e){return null!=e.kernelName}class Br{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Pr{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Br}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(_s(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new lr(this.backendInstance),!0}setupRegisteredKernels(){Bs(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Bs(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof F||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,_s(`Initialization of backend ${e} failed`),_s(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return _s(`Initialization of backend ${e} failed`),_s(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Pr.nextTensorId++}nextVariableId(){return Pr.nextVariableId++}clone(e){const t=Wr.runKernel(Pt,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return Wr.runKernel(qe,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==Ms(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=s-t-r-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Lr(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Lr(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=Ms(t,this.backendName);P(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=Lr(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=o()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=Ls(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(P(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>r[t]));return a.concat(o)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&se(e[0])&&(r=e.map((e=>or(e))));const a=s.write(r,t,n),o=new Ir(t,n,a,this.nextTensorId());if(this.trackTensor(o,s),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new Ir(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new Nr(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*ne(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Nr||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*ne(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},i=Ls(e);null!=i&&(s=i.gradFunc),null!=s&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=de(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Or(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(P(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));P(r instanceof Ir,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),i=!0,r[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=he(U(e),"float32");return Wr.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const r=n((()=>i[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const o=a.inputs[t];if(!G(r.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=r;else{const t=e[o.id];e[o.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Vr);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return P(oe(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;P(t.every((e=>e instanceof Ir)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),P(n.value instanceof Ir,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),P(oe(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];P(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),P(a.every((e=>e instanceof Ir)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=ar(),n=await this.backend.time(e);return n.wallMs=ar()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Br;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function zr(){const e=Ne();if(null==e._tfengine){const t=new ye(e);e._tfengine=new Pr(t)}var t;return t=e._tfengine.ENV,Ie=t,vr=()=>e._tfengine,e._tfengine}Pr.nextTensorId=0,Pr.nextVariableId=0;const Wr=zr();function Vr(e,t){const n={a:e,b:t};return Wr.runKernel(Ee,n)}function Ur(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Gr(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Hr=ke();function jr(e,t){let n=e;if(te(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||te(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&ke().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Kr(e,s,[]),s}function Kr(e,t,n){if(n=n||[],!Array.isArray(e)&&!te(e))return void P(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));P(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),P(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Kr(e[t],s,n.concat(t))}function qr(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Xr(e,t,n,s="numeric"){if(e instanceof Ir)return qr(s,e.dtype,t,n),e;let r=ae(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),qr(s,r,t,n),null==e||!te(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=jr(e,r);te(e)||Array.isArray(e)||(e=[e]);const o="string"!==r?rr(e,r):V(e,[],!0);return Wr.makeTensor(o,a,r)}function Yr(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Xr(e,`${t}[${r}]`,n,s)))}function Zr(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...e)=>{Wr.startScope(n);try{const t=s(...e);return xe(t)&&console.error("Cannot return a Promise inside of tidy."),Wr.endScope(t),t}catch(e){throw Wr.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}Hr.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Hr.registerFlag("IS_BROWSER",(()=>Gr())),Hr.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Hr.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Hr.registerFlag("PROD",(()=>!1)),Hr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Hr.getBool("DEBUG"))),Hr.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Hr.registerFlag("IS_TEST",(()=>!1)),Hr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Hr.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Hr.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),Hr.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Hr.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const Jr=Zr({complex_:function(e,t){const n=Xr(e,"real","complex"),s=Xr(t,"imag","complex");z(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Wr.runKernel(Ze,r)}});function Qr(e,t,n,s){if(null==s&&(s=ae(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!te(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){fe(t);const e=U(t),s=U(n);P(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==U(t.slice(e));P(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return te(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?rr(e,s):V(e,[],!0),Wr.makeTensor(e,t,s)}function ea(e,t,n){return Qr(e,t,jr(e,n),n)}async function ta(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const o=r[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:na(await Promise.all(s)),specs:n}}function na(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const sa="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ra(e){return sa?Buffer.byteLength(e):new Blob([e]).size}function aa(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function oa(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function ia(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:ra(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:ra(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}class la{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==la.instance&&(la.instance=new la),la.instance}static registerSaveRouter(e){la.getInstance().saveRouters.push(e)}static registerLoadRouter(e){la.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return la.getHandlers(e,"save")}static getLoadHandlers(e,t){return la.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?la.getInstance().loadRouters:la.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const ua="tensorflowjs",ca="models_store",ha="model_info_store";function da(){if(!ke().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function pa(e){const t=e.result;t.createObjectStore(ca,{keyPath:"modelPath"}),t.createObjectStore(ha,{keyPath:"modelPath"})}class fa{constructor(e){if(this.indexedDB=da(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(ua,1);s.onupgradeneeded=()=>pa(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(ca,"readonly"),s=t.objectStore(ca).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=ia(t),a=r.transaction(ha,"readwrite");let o=a.objectStore(ha);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;i.onsuccess=()=>{l=r.transaction(ca,"readwrite");const i=l.objectStore(ca).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});i.onsuccess=()=>e({modelArtifactsInfo:s}),i.onerror=e=>{o=a.objectStore(ha);const t=o.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(i.error)),t.onerror=e=>(r.close(),n(i.error))}},i.onerror=e=>(r.close(),n(i.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}fa.URL_SCHEME="indexeddb://";const ma=e=>{return ke().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(fa.URL_SCHEME)?(t=e.slice(fa.URL_SCHEME.length),new fa(t)):null;var t};la.registerSaveRouter(ma),la.registerLoadRouter(ma);class ga{constructor(){this.indexedDB=da()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(ua,1);n.onupgradeneeded=()=>pa(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(ha,"readonly"),a=r.objectStore(ha).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){return e=function(e){return e.startsWith(fa.URL_SCHEME)?e.slice(fa.URL_SCHEME.length):e}(e),new Promise(((t,n)=>{const s=this.indexedDB.open(ua,1);s.onupgradeneeded=()=>pa(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(ha,"readwrite"),o=a.objectStore(ha),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=o.delete(e),a=()=>{l=r.transaction(ca,"readwrite");const s=l.objectStore(ca).delete(e);s.onsuccess=()=>t(i.result.modelArtifactsInfo),s.onerror=e=>n(i.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(i.error))}},i.onerror=e=>(r.close(),n(i.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const xa="/",ba="tensorflowjs_models",ya="info",va="model_topology",ka="weight_specs",wa="weight_data",Ia="model_metadata";function Na(e){return{info:[ba,e,ya].join(xa),topology:[ba,e,va].join(xa),weightSpecs:[ba,e,ka].join(xa),weightData:[ba,e,wa].join(xa),modelMetadata:[ba,e,Ia].join(xa)}}function Sa(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function $a(e){const t=e.split(xa);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(xa)}class Ca{constructor(e){if(!ke().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Na(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=ia(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(sa)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw Sa(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(sa){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Ca.URL_SCHEME="localstorage://";const Ta=e=>{return ke().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ca.URL_SCHEME)?(t=e.slice(Ca.URL_SCHEME.length),new Ca(t)):null;var t};la.registerSaveRouter(Ta),la.registerLoadRouter(Ta);class Ea{constructor(){P(ke().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),P("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=ba+xa,n=xa+ya;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[$a(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){e=function(e){return e.startsWith(Ca.URL_SCHEME)?e.slice(Ca.URL_SCHEME.length):e}(e);const t=Na(e);if(null==this.LS.getItem(t.info))throw new Error(`Cannot find model at path '${e}'`);const n=JSON.parse(this.LS.getItem(t.info));return Sa(t),n}}class Ra{constructor(){this.managers={}}static getInstance(){return null==Ra.instance&&(Ra.instance=new Ra),Ra.instance}static registerManager(e,t){P(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),P(e.length>0,(()=>"scheme must not be an empty string."));const n=Ra.getInstance();P(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Ra.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Ra.getInstance().managers)}}class Aa{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&ke().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}}if(ke().get("IS_BROWSER")){ke().setPlatform("browser",new Aa);try{Ra.registerManager(Ca.URL_SCHEME,new Ea)}catch(e){}try{Ra.registerManager(fa.URL_SCHEME,new ga)}catch(e){}}let _a;function Fa(e,t="float32",n){return t=t||"float32",fe(e),new yr(e,t,n)}ke().get("IS_NODE")&&!ke().get("IS_BROWSER")&&ke().setPlatform("node",new class{constructor(){this.util=n(8628),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=ke().global.fetch?ke().global.fetch(e,t):(null==_a&&(_a=n(5410)),_a(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Da=Zr({cast_:function(e,t){const n=Xr(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Wr.runKernel(qe,s,r)}}),Oa=Zr({clone_:function(e){const t={x:Xr(e,"x","clone","string_or_numeric")};return Wr.runKernel(Pt,t)}});function Ma(e){return new Promise((e=>setTimeout(e))).then(e)}zr(),kr={buffer:Fa,cast:Da,clone:Oa,print:function(e,t=!1){console.log(e.toString(t))}};class La{constructor(e){if(!ke().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(La.URL_SCHEME)&&(e=e.slice(La.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=oa(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await Ma((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ma((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:ia(e)}}}}function Ba(e,t,n,s){!function(e){P(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){P(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),P(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),P(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++r/e.length*(s-n);return t(o),a})),a))))}async function Pa(e,t){null==t&&(t={});const n=null==t.fetchFunc?ke().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Ba(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Ba(r,t.onProgress,.5,1)}La.URL_SCHEME="downloads://",la.registerSaveRouter((e=>ke().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(La.URL_SCHEME)?function(e="model"){return new La(e)}(e.slice(La.URL_SCHEME.length)):null));class za{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(P("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=ke().platform.fetch,P(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&P(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=oa(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:ia(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return async function(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),function(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),s}(e,n,s)}(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=function(e){const t=[];for(const n of e)t.push(...n.weights);return t}(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(r+e+s);return this.weightUrlConverter&&o.push(...await Promise.all(i)),[a,aa(await Pa(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Wa(e){return null!=e.match(za.URL_SCHEME_REGEX)}za.URL_SCHEME_REGEX=/^https?:\/\//;const Va=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Wa(e))):Wa(e),n)return function(e,t){return new za(e,t)}(e,t)}return null};function Ua(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,o=e[a]||1;(t[t.length-1-r]||1)>1&&1===o&&s.unshift(a)}return s}function Ga(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,o=t[a];(null==r||1===r&&o>1)&&n.unshift(a)}return n}function Ha(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}la.registerSaveRouter(Va),la.registerLoadRouter(Va);const ja=-2,Ka=-1;function qa(e,t,n){const s=e.shape.length;P(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),P(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)P(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function Xa(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Ya(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function Za(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Ja(e,t,n){return n<=e?n:n-(t-1)}function Qa(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function eo(e,t,n,s,r,a,o,i,l){const u=e.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=to(o,l,u,s,e),h=no(i,l,u,r,e),d=Za(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=ro(o,s,a,e,t,l),h[t]=ao(i,r,a,e,t,l),d[t]=so(a,t,l);return{begin:c,end:h,strides:d}}function to(e,t,n,s,r){const a=[...r],o=Qa(n,t);for(let r=0;r<a.length;r++)if(o.indexOf(r)>-1)a[r]=0;else{const o=Ja(t,n,r);let i=s[o];e&1<<o&&(i=0),a[r]=i}return a}function no(e,t,n,s,r){const a=[...r],o=Qa(n,t);for(let r=0;r<a.length;r++)if(o.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const o=Ja(t,n,r);let i=s[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[r]=i}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=M(0,a[e],r[e])}return a}function so(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function ro(e,t,n,s,r,a){let o=t[r];const i=n[r]||1;(e&1<<r||a&1<<r||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=M(0,o,l-1),o}function ao(e,t,n,s,r,a){let o=t[r];const i=n[r]||1;(e&1<<r||a&1<<r||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=i>0?M(0,o,l):M(-1,o,l-1),o}function oo(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function io(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function lo(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{P(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(P(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function uo(e,t,n,s,r,a,o,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&i)&&h.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(ja),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(Ka),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,d);let p=!0,f=!0,m=!0;const g=[],x=[];for(let t=0;t<e.length;++t){if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(d.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const r=[d.beginMask&1<<t,d.endMask&1<<t],a=[d.strides[t]>0?0:-1,d.strides[t]>0?s:s-1];if(n&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[t];const o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(n){const e=d.begin[t]<0?s+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=s)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=co(d.begin[t],0,d.strides[t],s,r,a),d.end[t]=co(d.end[t],1,d.strides[t],s,r,a);const e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===s;p=p&&e,f=f&&(0===t&&1===d.strides[t]||e)}else p=p&&1===d.strides[t]&&o,f=f&&(0===t&&1===d.strides[t]||o);let i,l=!1;if(d.beginValid&&d.endValid?(i=d.end[t]-d.begin[t],l=!0):n?(i=1,l=!0):o&&s>=0&&(i=d.strides[t]<0?-s:s,l=!0),l){let e;e=0===i||i<0!=d.strides[t]<0?0:Math.trunc(i/d.strides[t])+(i%d.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){const t=d.finalShapeGatherIndices[e];t>=0?x.push(g[t]):t===ja&&x.push(1)}return{finalShapeSparse:x.filter(((e,t)=>d.finalShapeGatherIndices[t]!==ja)),finalShape:x,isIdentity:p,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function co(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}class ho{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class po{constructor(){this.classNameMap={}}static getMap(){return null==po.instance&&(po.instance=new po),po.instance}static register(e){po.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function fo(e){P(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),P("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),P(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),po.register(e)}function mo(){return Wr}function go(){return Wr.memory()}function xo(e,t){return Wr.tidy(e,t)}function bo(e){Or(e).forEach((e=>e.dispose()))}function yo(e){return Wr.keep(e)}function vo(e,t,n=1){return Wr.registerBackend(e,t,n)}function ko(e){return Wr.customGrad(e)}function wo(e,t){if((te(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&te(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Qr(e,[],[],t)}wr=function(e){ke().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};class Io extends ho{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return bo(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){P(oe(e),(()=>"The f passed in variableGrads(f) must be a function")),P(null==t||Array.isArray(t)&&t.every((e=>e instanceof Nr)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Wr.registeredVariables)t.push(Wr.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;P((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:o}=Wr.gradients(e,t,null,!0);P(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),P(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=s&&s.forEach((e=>i[e.name]=null)),{value:a,grads:i}}(e,t)}dispose(){null!=this.iterations_&&bo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:wo(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Io,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const No=Zr({abs_:function(e){const t=Xr(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Wr.runKernel(Je,e)}{const e={x:t};return Wr.runKernel($e,e)}}}),So=Zr({add_:function(e,t){let n=Xr(e,"a","add"),s=Xr(t,"b","add");[n,s]=Fr(n,s);const r={a:n,b:s};return Wr.runKernel(Ee,r)}}),$o=Zr({all_:function(e,t=null,n=!1){const s={x:Xr(e,"x","all","bool")},r={axis:t,keepDims:n};return Wr.runKernel(Ae,s,r)}}),Co=Zr({any_:function(e,t=null,n=!1){const s={x:Xr(e,"x","any","bool")},r={axis:t,keepDims:n};return Wr.runKernel(_e,s,r)}}),To=Zr({argMax_:function(e,t=0){const n={x:Xr(e,"x","argMax")},s={axis:t};return Wr.runKernel(Fe,n,s)}});function Eo(e,t,n,s,r="NHWC",a){return _o(e,[...t,e[3]],n,a,s,null,null,Wo(r))}function Ro(e,t,n,s,r,a,o="channelsLast"){const[i,l]=Oo(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return _o(e,u,n,s,r,a,!1,o)}function Ao(e,t,n,s,r,a,o="NDHWC"){const[i,l,u]=Mo(t);let c,h;if("NDHWC"===o)h="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",c=[i,l,u,e[1],e[1]]}return Fo(e,c,n,s,r,!1,h,a)}function _o(e,t,n,s,r,a,o=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=e}const[d,p,,f]=t,[m,g]=Oo(n),[x,b]=Oo(s),y=Lo(d,x),v=Lo(p,b),{padInfo:k,outHeight:w,outWidth:I}=function(e,t,n,s,r,a,o,i,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=Do(e,t,n));const a=e[1];return[Bo((e[0]-t+2*s)/n+1,r),Bo((a-t+2*s)/n+1,r)]}([t,n],a,s,e,i);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),i=Math.max(0,(h-1)*r+o-n),l=Math.floor(e/2),d=e-l,p=Math.floor(i/2);u={top:l,bottom:d,left:p,right:i-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-o+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===l?e[1][0]:e[2][0],p="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=Bo((t-a+d+p)/s+1,i),h=Bo((n-o+f+m)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,y,v,a,i),N=o?f*h:f;let S;return"channelsFirst"===i?S=[l,N,w,I]:"channelsLast"===i&&(S=[l,w,I,N]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:w,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:y,effectiveFilterWidth:v,dilationHeight:x,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Fo(e,t,n,s,r,a=!1,o="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h,d]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,d,u,c,h]=e}const[p,f,m,,g]=t,[x,b,y]=Mo(n),[v,k,w]=Mo(s),I=Lo(p,v),N=Lo(f,k),S=Lo(m,w),{padInfo:$,outDepth:C,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,o,i,l,u,c){let h,d,p,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=Do(e,t,s));const o=e[1],i=e[2];return[Bo((e[0]-t+2*r)/s+1,a),Bo((o-t+2*r)/s+1,a),Bo((i-t+2*r)/s+1,a),1]}([t,n,s,1],i,0,r,e,c);d=a[0],p=a[1],f=a[2]}else if("same"===e){d=Math.ceil(t/r),p=Math.ceil(n/a),f=Math.ceil(s/o);const e=(d-1)*r+i-t,c=(p-1)*a+l-n,m=(f-1)*o+u-s,g=Math.floor(e/2),x=e-g,b=Math.floor(c/2),y=c-b,v=Math.floor(m/2);h={top:b,bottom:y,left:v,right:m-v,front:g,back:x,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-i+1)/r),p=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/o)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,x,b,y,I,N,S,i),R=a?g*d:g;let A;return"channelsFirst"===o?A=[l,R,C,T,E]:"channelsLast"===o&&(A=[l,C,T,E,R]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:C,outHeight:T,outWidth:E,outChannels:R,padInfo:$,strideDepth:x,strideHeight:b,strideWidth:y,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:v,dilationHeight:k,dilationWidth:w,inShape:e,outShape:A,filterShape:t}}function Do(e,t,n,s=1){const r=Lo(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function Oo(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Mo(e){return"number"==typeof e?[e,e,e]:e}function Lo(e,t){return t<=1?e:e+(e-1)*(t-1)}function Bo(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Po(e){const[t,n,s]=Oo(e);return 1===t&&1===n&&1===s}function zo(e,t){return Po(e)||Po(t)}function Wo(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Vo(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)P(H(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{P(H(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const Uo=Zr({reshape_:function(e,t){const n={x:Xr(e,"x","reshape","string_or_numeric")},s={shape:t};return Wr.runKernel(On,n,s)}}),Go=Zr({avgPool_:function(e,t,n,s,r){const a=Xr(e,"x","avgPool","float32");P(zo(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=Uo(a,[1,a.shape[0],a.shape[1],a.shape[2]])),P(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),Vo("avgPool",s,r);const l={x:o},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Wr.runKernel(ze,l,u);return c=Da(c,a.dtype),i?Uo(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Ho=Zr({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const o=Xr(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),P(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),P("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Vo("avgPool3d",s,r);const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=Wr.runKernel(Ve,u,c);return h=Da(h,i.dtype),l?Uo(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),jo=Zr({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const o=Xr(e,"x","batchNorm"),i=Xr(t,"mean","batchNorm"),l=Xr(n,"variance","batchNorm");let u,c;null!=r&&(u=Xr(r,"scale","batchNorm")),null!=s&&(c=Xr(s,"offset","batchNorm")),P(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),P(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),P(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?Uo(e,[1,1,1,e.size]):2===e.rank?Uo(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Uo(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:u,offset:c,mean:i,variance:l},d={varianceEpsilon:a},p=Wr.runKernel(Dt,h,d);return Uo(p,o.shape)}}),Ko=Zr({batchNorm2d_:function(e,t,n,s,r,a){const o=Xr(e,"x","batchNorm"),i=Xr(t,"mean","batchNorm"),l=Xr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Xr(r,"scale","batchNorm")),null!=s&&(c=Xr(s,"offset","batchNorm")),P(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),P(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),P(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&P(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&P(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),jo(o,i,l,c,u,a)}}),qo=Zr({batchNorm3d_:function(e,t,n,s,r,a){const o=Xr(e,"x","batchNorm"),i=Xr(t,"mean","batchNorm"),l=Xr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Xr(r,"scale","batchNorm")),null!=s&&(c=Xr(s,"offset","batchNorm")),P(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),P(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),P(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&P(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&P(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),jo(o,i,l,c,u,a)}}),Xo=Zr({batchNorm4d_:function(e,t,n,s,r,a){const o=Xr(e,"x","batchNorm"),i=Xr(t,"mean","batchNorm"),l=Xr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Xr(r,"scale","batchNorm")),null!=s&&(c=Xr(s,"offset","batchNorm")),P(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),P(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),P(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&P(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&P(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),jo(o,i,l,c,u,a)}}),Yo=Zr({broadcastTo_:function(e,t){let n=Xr(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Uo(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Oa(n);const o={x:n},i={reps:a};return Wr.runKernel(ys,o,i)}});function Zo(e,t,n){const s={shape:e,value:t,dtype:n};return Wr.runKernel(Rt,{},s)}const Jo=Zr({clipByValue_:function(e,t,n){const s=Xr(e,"x","clipByValue");if(P(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return Zo(s.shape,t,s.dtype);const r={x:s},a={clipValueMin:t,clipValueMax:n};return Wr.runKernel(Ye,r,a)}}),Qo=Zr({concat_:function(e,t=0){P(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Yr(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Oa(n[0]);const s=n,r={axis:t};return Wr.runKernel(Qe,s,r)}}),ei=Zr({concat1d_:function(e){return Qo(e,0)}}),ti=Zr({concat2d_:function(e,t){return Qo(e,t)}}),ni=Zr({concat3d_:function(e,t){return Qo(e,t)}}),si=Zr({concat4d_:function(e,t){return Qo(e,t)}}),ri=Zr({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],o){const i=Xr(e,"x","conv2d","float32"),l=Xr(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Uo(i,[1,i.shape[0],i.shape[1],i.shape[2]])),P(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),P(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),Vo("conv2d",s,o);const h="NHWC"===r?u.shape[3]:u.shape[1];P(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),P(zo(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o},f=Wr.runKernel(et,d,p);return c?Uo(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ai=Zr({conv1d_:function(e,t,n,s,r="NWC",a=1,o){const i=Xr(e,"x","conv1d"),l=Xr(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=Uo(i,[1,i.shape[0],i.shape[1]])),P(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),P(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),Vo("conv1d",s,o),P(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),P(zo(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),P("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=Uo(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=Uo(u,[u.shape[0],1,u.shape[1],u.shape[2]]),p=ri(d,h,[1,n],s,"NHWC",[1,a],o);return Uo(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}}),oi=Zr({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",o){P(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),P(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),P(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),P(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],h="NHWC"===a?l.shape[3]:l.shape[1];P(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),P(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),Vo("conv2dDerInput",r,o);const d={dy:l,filter:n},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:o,inputShape:i},f=Wr.runKernel(nt,d,p);return u?Uo(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ii=Zr({conv2dTranspose_:function(e,t,n,s,r,a){const o=Xr(e,"x","conv2dTranspose"),i=Xr(t,"filter","conv2dTranspose");return oi(n,o,i,s,r,"NHWC",a)}}),li=Zr({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const o=Xr(e,"x","conv3d"),i=Xr(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),P(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),P(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),P(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),P(zo(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),P("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:i},h={strides:n,pad:s,dataFormat:r,dilations:a},d=Wr.runKernel(st,c,h);return u?Uo(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ui=Zr({conv3DBackpropInput_:function(e,t,n,s,r){P(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=o.shape[4];P(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),P(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),P(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),P(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),P(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},h={pad:r,strides:s,inputShape:a},d=Wr.runKernel(at,c,h);return i?Uo(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ci=Zr({conv3dTranspose_:function(e,t,n,s,r){const a=Xr(e,"x","conv3dTranspose"),o=Xr(t,"filter","conv3dTranspose");return ui(n,a,o,s,r)}}),hi=Zr({denseBincount_:function(e,t,n,s=!1){const r=Xr(e,"x","denseBincount"),a=Xr(t,"weights","denseBincount");P("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),P(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),P(n>=0,(()=>`size must be non-negative, but got ${n}.`)),P(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const o={x:r,weights:a},i={size:n,binaryOutput:s};return Wr.runKernel(ht,o,i)}}),di=Zr({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],o){const i=Xr(e,"x","depthwiseConv2d","float32"),l=Xr(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=Uo(i,[1,i.shape[0],i.shape[1],i.shape[2]])),P(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),P(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];P(h===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`)),Vo("depthwiseConv2d",s,o);const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o},f=Wr.runKernel(pt,d,p);return c?Uo(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),pi=Zr({floorDiv_:function(e,t){let n=Xr(e,"a","floorDiv"),s=Xr(t,"b","floorDiv");[n,s]=Fr(n,s);const r={a:n,b:s};return Wr.runKernel(Ft,r)}}),fi=Zr({div_:function(e,t){let n=Xr(e,"a","div"),s=Xr(t,"b","div");if([n,s]=Fr(n,s),"int32"===n.dtype&&"int32"===s.dtype)return pi(n,s);const r={a:n,b:s};return Wr.runKernel(vt,r,{})}}),mi=Zr({elu_:function(e){const t={x:Xr(e,"x","elu","float32")};return Wr.runKernel(wt,t)}}),gi=Zr({equal_:function(e,t){let n=Xr(e,"a","equal","string_or_numeric"),s=Xr(t,"b","equal","string_or_numeric");[n,s]=Fr(n,s),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(St,r)}}),xi=Zr({exp_:function(e){const t={x:Xr(e,"x","exp")};return Wr.runKernel($t,t)}}),bi=Zr({expandDims_:function(e,t=0){const n=Xr(e,"x","expandDims","string_or_numeric");P(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Wr.runKernel(Ct,s,r)}}),yi=Zr({tile_:function(e,t){const n=Xr(e,"x","tile","string_or_numeric");P(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Wr.runKernel(ys,s,r)}}),vi=Zr({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=Fa([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const o=Uo(r.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return yi(bi(o,0),[n[0],1,1]);if(2===n.length)return yi(bi(bi(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return yi(bi(bi(bi(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),ki=Zr({floor_:function(e){const t={x:Xr(e,"x","floor","float32")};return Wr.runKernel(_t,t)}}),wi=Zr({gather_:function(e,t,n=0,s=0){const r={x:Xr(e,"x","gather"),indices:Xr(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Wr.runKernel(Ot,r,a)}}),Ii=Zr({greater_:function(e,t){let n=Xr(e,"a","greater","string_or_numeric"),s=Xr(t,"b","greater","string_or_numeric");[n,s]=Fr(n,s),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(Lt,r)}}),Ni=Zr({greaterEqual_:function(e,t){let n=Xr(e,"a","greaterEqual","string_or_numeric"),s=Xr(t,"b","greaterEqual","string_or_numeric");[n,s]=Fr(n,s),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(Bt,r)}}),Si=Zr({leakyRelu_:function(e,t=.2){const n={x:Xr(e,"x","leakyRelu")},s={alpha:t};return Wr.runKernel(Ht,n,s)}}),$i=Zr({log_:function(e){const t={x:Xr(e,"x","log","float32")};return Wr.runKernel(Xt,t)}}),Ci=Zr({log1p_:function(e){const t={x:Xr(e,"x","log1p")};return Wr.runKernel(Yt,t)}}),Ti=Zr({max_:function(e,t=null,n=!1){const s={x:Xr(e,"x","max")},r={reductionIndices:t,keepDims:n};return Wr.runKernel(nn,s,r)}}),Ei=Zr({mul_:function(e,t){let n=Xr(e,"a","mul"),s=Xr(t,"b","mul");[n,s]=Fr(n,s);const r={a:n,b:s};return Wr.runKernel(gn,r)}}),Ri=Zr({sub_:function(e,t){let n=Xr(e,"a","sub"),s=Xr(t,"b","sub");[n,s]=Fr(n,s);const r={a:n,b:s};return Wr.runKernel(gs,r)}}),Ai=Zr({sum_:function(e,t=null,n=!1){let s=Xr(e,"x","sum");"bool"===s.dtype&&(s=Da(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Wr.runKernel(ts,r,a)}}),_i=Zr({logSoftmax_:function(e,t=-1){const n=Xr(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const s=ko(((e,n)=>{const s=Ti(e,t,!0),r=Ri(e,s),a=Ri(Da(r,"float32"),$i(Ai(xi(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=xi(s);return Ri(e,Ei(Ai(e,t,!0),r))}}}));return s(n)}});function Fi(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Di(e,t,n){const s=e.length+t.length,r=[];let a=0,o=0;for(let i=0;i<s;i++)-1===n.indexOf(i)?r.push(e[a++]):r.push(t[o++]);return r}function Oi(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Mi(e,t){return Di(e,t.map((e=>1)),t)}function Li(e,t,n){P(Fi(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Bi(e,t){if(Fi(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function Pi(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function zi(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const Wi=Zr({logSumExp_:function(e,t=null,n=!1){const s=Xr(e,"x","logSumExp"),r=Y(t,s.shape),a=Ti(s,r,!0),o=Ri(s,a),i=xi(o),l=Ai(i,r),u=$i(l),c=So(Uo(a,u.shape),u);if(n){const e=Mi(c.shape,r);return Uo(c,e)}return c}}),Vi=Zr({logicalAnd_:function(e,t){const n=Xr(e,"a","logicalAnd","bool"),s=Xr(t,"b","logicalAnd","bool");Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(Zt,r)}}),Ui=Zr({matMul_:function(e,t,n=!1,s=!1){let r=Xr(e,"a","matMul"),a=Xr(t,"b","matMul");[r,a]=Fr(r,a);const o={a:r,b:a},i={transposeA:n,transposeB:s};return Wr.runKernel(Ge,o,i)}}),Gi=Zr({maxPool_:function(e,t,n,s,r){const a=Xr(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=Uo(a,[1,a.shape[0],a.shape[1],a.shape[2]])),P(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),P(zo(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Vo("maxPool",s,r);const l={x:o},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Wr.runKernel(rn,l,u);return i?Uo(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Hi=Zr({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const o=Xr(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),P(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),P("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Vo("maxPool3d",s,r);const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=Wr.runKernel(on,u,c);return l?Uo(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),ji=Zr({maximum_:function(e,t){let n=Xr(e,"a","maximum"),s=Xr(t,"b","maximum");[n,s]=Fr(n,s),"bool"===n.dtype&&(n=Da(n,"int32"),s=Da(s,"int32")),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(sn,r)}}),Ki=Zr({mean_:function(e,t=null,n=!1){const s={x:Xr(e,"x","mean")},r={axis:t,keepDims:n};return Wr.runKernel(cn,s,r)}}),qi=Zr({min_:function(e,t=null,n=!1){const s={x:Xr(e,"x","min")},r={axis:t,keepDims:n};return Wr.runKernel(hn,s,r)}}),Xi=Zr({minimum_:function(e,t){let n=Xr(e,"a","minimum"),s=Xr(t,"b","minimum");[n,s]=Fr(n,s),"bool"===n.dtype&&(n=Da(n,"int32"),s=Da(s,"int32")),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(dn,r)}}),Yi=Zr({square_:function(e){const t=Xr(e,"x","square");return Wr.runKernel("Square",{x:t},{})}}),Zi=Zr({moments_:function(e,t=null,n=!1){const s=Y(t,(e=Xr(e,"x","moments")).shape),r=Ki(e,s,n);let a=r.shape;n||(a=Mi(r.shape,s));const o=Yi(Ri(Da(e,"float32"),Uo(r,a)));return{mean:r,variance:Ki(o,s,n)}}}),Ji=Zr({neg_:function(e){const t={x:Xr(e,"x","neg")};return Wr.runKernel(xn,t)}}),Qi=Zr({notEqual_:function(e,t){let n=Xr(e,"a","notEqual","string_or_numeric"),s=Xr(t,"b","notEqual","string_or_numeric");[n,s]=Fr(n,s),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(bn,r)}}),el=Zr({oneHot_:function(e,t,n=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Xr(e,"indices","oneHot","int32")},o={dtype:r,depth:t,onValue:n,offValue:s};return Wr.runKernel(In,a,o)}});function tl(e,t="float32"){if("complex64"===t){const t=tl(e,"float32"),n=tl(e,"float32");return Jr(t,n)}const n=de(U(e),t);return Wr.makeTensor(n,e,t)}function nl(e,t="float32"){if("complex64"===t){const t=nl(e,"float32"),n=tl(e,"float32");return Jr(t,n)}const n=he(U(e),t);return Wr.makeTensor(n,e,t)}const sl=Zr({onesLike_:function(e){const t={x:Xr(e,"x","onesLike")};return Wr.runKernel(wn,t)}}),rl=Zr({pad_:function(e,t,n=0){const s=Xr(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Wr.runKernel(Sn,a,r)}}),al=Zr({prelu_:function(e,t){const n={x:Xr(e,"x","prelu"),alpha:Xr(t,"alpha","prelu")};return Wr.runKernel(Cn,n)}});var ol=n(6377);class il{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=ol.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*o,t=this.mean+this.stdDev*r*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class ll{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=ol.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const ul=Zr({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new il(t,n,s,!1,r),o=Fa(e,s);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),cl=Zr({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=Fa(e,s),o=new ll(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});function hl(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Wr.runKernel(An,{},r)}const dl=Zr({relu_:function(e){const t={x:Xr(e,"x","relu")};return Wr.runKernel(Dn,t)}}),pl=Zr({reverse_:function(e,t){const n={x:Xr(e,"x","reverse")},s={dims:t};return Wr.runKernel(Wn,n,s)}}),fl=Zr({selu_:function(e){const t={x:Xr(e,"x","selu")};return Wr.runKernel(Kn,t)}}),ml=Zr({separableConv2d_:function(e,t,n,s,r,a=[1,1],o="NHWC"){const i=Xr(e,"x","separableConv2d"),l=Xr(t,"depthwiseFilter","separableConv2d"),u=Xr(n,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=Uo(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");P(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),P(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),P(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),P(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),P(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const d=l.shape[2],p=l.shape[3];P(u.shape[2]===d*p,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`));const f=di(c,l,s,r,o,a),m=ri(f,u,1,"valid",o);return h?Uo(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),gl=Zr({sigmoid_:function(e){const t={x:Xr(e,"x","sigmoid","float32")};return Wr.runKernel(Jn,t)}}),xl=Zr({slice_:function(e,t,n){const s=Xr(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Wr.runKernel(qn,r,a)}}),bl=Zr({slice1d_:function(e,t,n){const s=Xr(e,"x","slice1d");return P(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),xl(s,[t],[n])}}),yl=Zr({slice2d_:function(e,t,n){const s=Xr(e,"x","slice2d");return P(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),xl(s,t,n)}}),vl=Zr({slice3d_:function(e,t,n){const s=Xr(e,"x","slice3d");return P(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),xl(s,t,n)}}),kl=Zr({slice4d_:function(e,t,n){const s=Xr(e,"x","slice4d");return P(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),xl(s,t,n)}}),wl=Zr({softmax_:function(e,t=-1){const n=Xr(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Wr.runKernel(rs,s,r)}}),Il=Zr({softplus_:function(e){const t={x:Xr(e,"x","softplus")};return Wr.runKernel(Qn,t)}}),Nl=Zr({split_:function(e,t,n=0){const s={x:Xr(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Wr.runKernel(ss,s,r)}}),Sl=Zr({sqrt_:function(e){const t={x:Xr(e,"x","sqrt","float32")};return Wr.runKernel(es,t)}}),$l=Zr({squeeze_:function(e,t){const n=Xr(e,"x","squeeze","string_or_numeric");return Uo(n,Z(n.shape,t).newShape)}}),Cl=Zr({stack_:function(e,t=0){const n=Yr(e,"tensors","stack","string_or_numeric");P(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&P(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Wr.runKernel(Nn,s,r)}}),Tl=Zr({tanh_:function(e){const t={x:Xr(e,"x","tanh","float32")};return Wr.runKernel(bs,t)}});function El(e,t){W(e);const n=jr(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Qr(e,null,n,t)}const Rl=Zr({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new il(t,n,s,!0,r),o=Fa(e,s);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),Al=Zr({unstack_:function(e,t=0){const n=Xr(e,"x","unstack","string_or_numeric");P(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Wr.runKernel(Ns,s,r)}}),_l=Zr({where_:function(e,t,n){const s=Xr(t,"a","where"),r=Xr(n,"b","where"),a=Xr(e,"condition","where","bool"),o=Ha(Ha(a.shape,s.shape),r.shape),i={condition:Yo(a,o),t:Yo(s,o),e:Yo(r,o)};return Wr.runKernel(jn,i)}}),Fl=Zr({zerosLike_:function(e){const t={x:Xr(e,"x","zerosLike")};return Wr.runKernel($s,t)}}),Dl=Zr({imag_:function(e){const t={input:Xr(e,"input","imag")};return Wr.runKernel(Wt,t)}}),Ol=Zr({real_:function(e){const t={input:Xr(e,"input","real")};return Wr.runKernel(_n,t)}}),Ml=Zr({transpose_:function(e,t,n){const s=Xr(e,"x","transpose");if(null==t&&(t=s.shape.map(((e,t)=>t)).reverse()),P(s.rank===t.length,(()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`)),t.forEach((e=>{P(e>=0&&e<s.rank,(()=>"All entries in 'perm' must be between 0 and "+(s.rank-1)+` but got ${t}`))})),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?xo((()=>{let e=Ol(s),t=Dl(s);return e=Wr.runKernel(ws,{x:e},a),t=Wr.runKernel(ws,{x:t},a),n&&(t=Ji(t)),Jr(e,t)})):Wr.runKernel(ws,r,a)}}),Ll=Zr({dropout_:function(e,t,n,s){const r=Xr(e,"x","dropout");if(P("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),P(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Ir?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(G(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),o=1-t,i=fi(ki(So(cl(a,0,1,"float32",s),o)),o);return Ei(r,i)}}),Bl=Zr({fft_:function(e){P("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Wr.runKernel(Et,t)}}),Pl=Zr({rfft_:function(e,t){P("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=xl(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=Qo([e,tl(s)],e.shape.length-1),n=t}else r=e;const a=Fl(r),o=Uo(Jr(r,a),[s,n]),i=Bl(o),l=Math.floor(n/2)+1,u=Ol(i),c=Dl(i),h=Nl(u,[l,n-l],u.shape.length-1),d=Nl(c,[l,n-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,Uo(Jr(h[0],d[0]),p)}}),zl=Zr({ifft_:function(e){P("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Wr.runKernel(zt,t)}});Zr({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=Uo(e,[n,t]);s=zl(r)}else{const r=[n,2*(t-1)],a=Uo(Ol(e),[n,t]),o=Uo(Dl(e),[n,t]),i=pl(xl(a,[0,1],[n,t-2]),1),l=Ei(pl(xl(o,[0,1],[n,t-2]),1),wo(-1)),u=Qo([a,i],1),c=Qo([o,l],1),h=Uo(Jr(u,c),[r[0],r[1]]);s=zl(h)}if(s=Ol(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=Uo(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});const Wl=Zr({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",o){let i=e;3===e.rank&&(i=Uo(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2]])),P(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),P(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),P(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];P(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),P(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Vo("conv2dDerFilter",r,o);const h={x:i,dy:l},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:o,filterShape:n};return Wr.runKernel(tt,h,d)}}),Vl=Zr({relu6_:function(e){const t={x:Xr(e,"x","relu6")};return Wr.runKernel(zn,t)}}),Ul=Zr({step_:function(e,t=0){const n={x:Xr(e,"x","step")},s={alpha:t};return Wr.runKernel(Cs,n,s)}});function Gl(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Ei(e,Ul(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Hl(e,t){let n=t;const s=Ga(e.shape,t.shape);return s.length>0&&(n=Ai(n,s)),Uo(n,e.shape)}function jl(e,t,n,s){if("linear"===t)return e;if("relu"===t)return dl(e);if("elu"===t)return mi(e);if("relu6"===t)return Vl(e);if("prelu"===t)return al(e,n);if("leakyrelu"===t)return Si(e,s);if("sigmoid"===t)return gl(e);throw new Error(`Unknown fused activation ${t}.`)}const Kl=(e,t)=>!(e>0)||"linear"===t,ql=Zr({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Kl(Wr.state.gradientDepth,l)){P("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=ri(e,t,n,s,r,a,o);return null!=i&&(h=So(h,i)),jl(h,l,u,c)}const h=Xr(e,"x","conv2d","float32"),d=Xr(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=Uo(h,[1,h.shape[0],h.shape[1],h.shape[2]])),P(4===p.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`)),P(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),Vo("fused conv2d",s,o);const m="NHWC"===r?p.shape[3]:p.shape[1];P(d.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`)),P(zo(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=_o(p.shape,d.shape,n,a,s,o);let x,b;if(null!=i&&(x=Xr(i,"bias","fused conv2d"),[x]=Fr(x,h),"NHWC"===r?Ha(g.outShape,x.shape):(P(x.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`)),P(0===x.shape.length||x.shape[0]===g.outChannels||1===x.shape[0],(()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(P(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)P(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{Ha(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=Xr(u,"prelu weights","fused conv2d")}const y=(e,t)=>{P("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[o,i,u,c]=t,h=Gl(e,u,l);P(Po(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const d=[oi(i.shape,h,o,n,s),Wl(i,h,o.shape,n,s)];if(null!=c){const e=Hl(c,h);d.push(e)}return d},v={x:p,filter:d,bias:x,preluActivationWeights:b},k={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=ko(((e,t,n)=>{let s=Wr.runKernel(Rs,v,k);return n([t,e,s]),f&&(s=Uo(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}));return e(p,d)}{const e=ko(((e,t,n,s)=>{let r=Wr.runKernel(Rs,v,k);return s([t,e,r,n]),f&&(r=Uo(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}}));return e(p,d,x)}}}),Xl=Zr({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],o){let i=e;3===e.rank&&(i=Uo(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:s,pad:r,dimRoundingMode:o,dilations:a,filterShape:n};return Wr.runKernel(ft,u,c)}}),Yl=Zr({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:s,pad:r,dimRoundingMode:o,dilations:a,inputShape:e},h=Wr.runKernel(mt,u,c);return l?Uo(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});Zr({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Kl(Wr.state.gradientDepth,l)){let h=di(e,t,n,s,r,a,o);return null!=i&&(h=So(h,i)),jl(h,l,u,c)}const h=Xr(e,"x","depthwiseConv2d","float32"),d=Xr(t,"filter","depthwiseConv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=Uo(h,[1,h.shape[0],h.shape[1],h.shape[2]])),P(4===p.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),P(4===d.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),P(p.shape[3]===d.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null==a&&(a=[1,1]),P(zo(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Vo("fused depthwiseConv2d",s,o);const m=_o(p.shape,d.shape,n,a,s,o,!0);let g,x;null!=i&&(g=Xr(i,"bias","fused conv2d"),[g]=Fr(g,h),Ha(m.outShape,g.shape)),null!=u&&(x=Xr(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{P(Po(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,i,u,c]=t,h=Gl(e,u,l),d=Yl(i.shape,h,r,n,s,a,o),p=Xl(i,h,r.shape,n,s,a,o);return null!=c?[d,p,Hl(g,h)]:[d,p]},y={x:p,filter:d,bias:g,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=ko(((e,t,n)=>{let s=Wr.runKernel(As,y,v);return n([t,e,s]),f&&(s=Uo(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(p,d)}{const e=ko(((e,t,n,s)=>{let r=Wr.runKernel(As,y,v);return s([t,e,r,n]),f&&(r=Uo(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(p,d,g)}}});const Zl=Zr({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Kl(Wr.state.gradientDepth,a)){let l=Ui(e,t,n,s);return null!=r&&(l=So(l,r)),jl(l,a,o,i)}let l=Xr(e,"a","fused matMul"),u=Xr(t,"b","fused matMul");[l,u]=Fr(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=n?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=U(f),x=U(m);P(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=Ha(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),y=Uo(l,n?[g,c,d]:[g,d,c]),v=Uo(u,s?[x,p,h]:[x,h,p]);let k,w;null!=r&&(k=Xr(r,"bias","fused matMul"),[k]=Fr(k,l),Ha(b,k.shape)),null!=o&&(w=Xr(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,l,u]=t,c=Gl(Uo(e,l.shape),l,a);let h,d;return n||s?!n&&s?(h=Ui(c,i,!1,!1),d=Ui(c,o,!0,!1)):n&&!s?(h=Ui(i,c,!1,!0),d=Ui(o,c,!1,!1)):(h=Ui(i,c,!0,!0),d=Ui(c,o,!0,!0)):(h=Ui(c,i,!1,!0),d=Ui(o,c,!0,!1)),null!=r?[h,d,Hl(u,c)]:[h,d]},N={a:y,b:v,bias:k,preluActivationWeights:w},S={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:i};if(null==r){const e=ko(((e,t,n)=>{const s=Wr.runKernel(Es,N,S);return n([e,t,s]),{value:Uo(s,b),gradFunc:I}}));return e(y,v)}{const e=ko(((e,t,n,s)=>{const r=Wr.runKernel(Es,N,S);return s([e,t,r,n]),{value:Uo(r,b),gradFunc:I}}));return e(y,v,k)}}});function Jl(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(o)}return El(r,"float32")}Zr({hammingWindow_:function(e){return Jl(e,.54,.46)}});const Ql=Zr({hannWindow_:function(e){return Jl(e,.5,.5)}});function eu(e,t,n){if(W(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=jr(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Qr(e,t,s,n)}const tu=Zr({frame_:function(e,t,n,s=!1,r=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(xl(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,i=Qo([xl(e,a,t-s),Zo([s],r)]);o.push(i),a+=n}return 0===o.length?eu([],[0,t]):Uo(Qo(o),[o.length,t])}});Zr({stft_:function(e,t,n,s,r=Ql){var a;null==s&&(a=t,s=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const o=tu(e,t,n),i=Ei(o,r(t));return Pl(i,s)}});const nu=Zr({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const o=Xr(e,"image","cropAndResize"),i=Xr(t,"boxes","cropAndResize","float32"),l=Xr(n,"boxInd","cropAndResize","int32"),u=i.shape[0];P(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),P(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),P(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),P(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),P(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),P("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:o,boxes:i,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Wr.runKernel(ct,c,h)}}),su=Zr({flipLeftRight_:function(e){const t=Xr(e,"image","flipLeftRight","float32");P(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Wr.runKernel(At,n,{})}}),ru=Zr({grayscaleToRGB_:function(e){const t=Xr(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];P(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),P(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,yi(t,r)}}),au=Zr({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Xr(e,"image","rotateWithOffset","float32");P(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},o={radians:t,fillValue:n,center:s};return Wr.runKernel(Ts,a,o)}});function ou(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),P(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),P(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),P(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),P(1===t.rank,(()=>"scores must be a 1D tensor")),P(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),P(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const iu=Zr({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Xr(e,"boxes","nonMaxSuppression","float32"),o=Xr(t,"scores","nonMaxSuppression","float32"),i=ou(a,o,n,s,r),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold};return Wr.runKernel(yn,{boxes:a,scores:o},l)}});function lu(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,o=!1;for(;s<r;){a=s+(r-s>>>1);const i=n(t,e[a]);i>0?s=a+1:(r=a,o=!i)}return o?s:-s-1}(e,t,n||uu)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function uu(e,t){return e>t?1:e<t?-1:0}function cu(e,t,n,s,r){return pu(e,t,n,s,r,0)}function hu(e,t,n,s,r,a){return pu(e,t,n,s,r,0,!1,a,!0)}function du(e,t,n,s,r,a){return pu(e,t,n,s,r,a,!0)}function pu(e,t,n,s,r,a,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(gu);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<r)break;let i=!1;for(let n=h.length-1;n>=o;--n){const o=fu(e,a,h[n]);if(o>=s){i=!0;break}if(t.score=t.score*mu(s,c,o),t.score<=r)break}t.suppressBeginIndex=h.length,i||(t.score===n?(h.push(a),d.push(t.score)):t.score>r&&lu(u,t,gu))}const p=h.length,f=n-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return o&&(m.selectedScores=d),l&&(m.validOutputs=p),m}function fu(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),o=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-a)*(l-o),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(o,c),x=Math.min(i,h),b=Math.min(l,d),y=Math.max(x-m,0)*Math.max(b-g,0);return y/(p+f-y)}function mu(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function gu(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const xu=Zr({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const o=Xr(e,"boxes","nonMaxSuppression"),i=Xr(t,"scores","nonMaxSuppression"),l=ou(o,i,n,s,r,a),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Wr.runKernel(kn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),bu=Zr({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const o=Xr(e,"boxes","nonMaxSuppression"),i=Xr(t,"scores","nonMaxSuppression"),l=ou(o,i,n,s,r,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Wr.runKernel(vn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),yu=Zr({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Xr(e,"images","resizeBilinear");P(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),P(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),P(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,o=!1;3===r.rank&&(o=!0,a=Uo(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Wr.runKernel(Bn,i,l);return o?Uo(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),vu=Zr({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Xr(e,"images","resizeNearestNeighbor");P(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),P(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),P("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),P(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,o=!1;3===r.rank&&(o=!0,a=Uo(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Wr.runKernel(Mn,i,l);return o?Uo(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),ku=Zr({bincount_:function(e,t,n){const s=Xr(e,"x","bincount"),r=Xr(t,"weights","bincount");P("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),P(n>=0,(()=>`size must be non-negative, but got ${n}.`)),P(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},o={size:n};return Wr.runKernel(je,a,o)}}),wu=Zr({lessEqual_:function(e,t){let n=Xr(e,"a","lessEqual","string_or_numeric"),s=Xr(t,"b","lessEqual","string_or_numeric");[n,s]=Fr(n,s),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(Kt,r)}}),Iu=Zr({round_:function(e){const t={x:Xr(e,"x","round")};return Wr.runKernel(Vn,t)}}),Nu=Zr({threshold_:function(e,t="binary",n=!1,s=.5){const r=Xr(e,"image","threshold"),a=r.shape[0]*r.shape[1];let o,i,l,u,c=Ei(El([s]),255);if(P(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),P(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),P("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),P("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[o,i,l]=Nl(r,[1,1,1],-1);const e=Ei(o,.2989),t=Ei(i,.587),n=Ei(l,.114);u=So(So(e,t),n)}else u=e;"otsu"===t&&(c=function(e,t){let n,s,r,a,o,i,l=El([-1]),u=El([0]),c=El([0]);for(let h=0;h<e.size-1;h++){n=xl(e,0,h+1),s=xl(e,h+1),o=fi(Ai(n),t),i=fi(Ai(s),t);const d=Ai(Ei(n,hl(0,n.size)));r=fi(d,Ai(n));const p=Zo(s.shape,n.size),f=So(hl(0,s.size),p),m=Ei(s,f);a=fi(Ai(m),Ai(s));const g=Ri(r,a),x=Ri(r,a),b=Ei(o,i);c=Ei(Ei(b,g),x);const y=Ii(c,u);u=_l(y,c,u),l=_l(y,El([h]),l)}return l}(ku(Da(Iu(u),"int32"),ea([]),256),a));const h=n?wu(u,c):Ii(u,c);return Da(Ei(h,255),"int32")}}),Su=Zr({transform_:function(e,t,n="nearest",s="constant",r=0,a){const o=Xr(e,"image","transform","float32"),i=Xr(t,"transforms","transform","float32");P(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),P(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),P(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Wr.runKernel(ks,l,u)}}),$u=Zr({bandPart_:function(e,t,n){P(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),P(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Xr(e,"a","bandPart");P(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,o]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=Uo(hl(0,a,1,"int32"),[-1,1]),l=hl(0,o,1,"int32"),u=Ri(i,l),c=Vi(wu(u,wo(+t,"int32")),Ni(u,wo(-n,"int32"))),h=tl([a,o],s.dtype);return Uo(Cl(Al(Uo(s,[-1,a,o])).map((e=>_l(c,e,h)))),r)}}),Cu=Zr({pow_:function(e,t){let n=Xr(e,"base","pow"),s=Xr(t,"exp","pow");[n,s]=Fr(n,s);const r={a:n,b:s};return Wr.runKernel($n,r)}});function Tu(e,t,n=null){if(0===e.rank)return No(e);if(1!==e.rank&&null===n)return Tu(Uo(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Ai(No(e),n);if(t===1/0)return Ti(No(e),n);if(t===-1/0)return qi(No(e),n);if("euclidean"===t||2===t)return Sl(Ai(Cu(No(e),wo(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Ti(Ai(No(e),n[0]),n[1]-1);if(t===1/0)return Ti(Ai(No(e),n[1]),n[0]);if(t===-1/0)return qi(Ai(No(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Sl(Ai(Yi(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Eu=Zr({norm_:function(e,t="euclidean",n=null,s=!1){const r=Tu(e=Xr(e,"x","norm"),t,n);let a=r.shape;if(s){const t=Y(n,e.shape);a=Mi(r.shape,t)}return Uo(r,a)}}),Ru=Zr({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,P(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)P(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Nl(e,e.shape[0],0).map((e=>$l(e,[0])));P(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Wr.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=Ei(Ai(Ei(n[s],e)),n[s]);e=Ri(e,t)}return fi(e,Eu(e,"euclidean"))})));return t?Cl(n,0):n}});function Au(e,t=!1){return Wr.tidy((()=>{P(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=vi(n),a=Oa(e);const o=eu([[1]],[1,1]);let i=Oa(o);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=i,u=r;[i,a,r]=Wr.tidy((()=>{const t=xl(a,[e,e],[n-e,1]),l=Eu(t),u=xl(a,[e,e],[1,1]),c=_l(Ii(u,0),eu([[-1]]),eu([[1]])),h=Ri(u,Ei(c,l)),d=fi(t,h);i=1===d.shape[0]?Oa(o):Qo([o,xl(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=Ji(fi(Ui(c,h),l)),f=xl(a,[e,0],[n-e,s]),m=Ei(p,i),g=Ml(i);if(0===e)a=Ri(f,Ui(m,Ui(g,f)));else{const t=Ri(f,Ui(m,Ui(g,f)));a=Qo([xl(a,[0,0],[e,s]),t],0)}const x=Ml(m),b=xl(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Ri(b,Ui(Ui(b,i),x));else{const t=Ri(b,Ui(Ui(b,i),x));r=Qo([xl(r,[0,0],[n,e]),t],1)}return[i,a,r]})),bo([t,l,u])}return!t&&n>s&&(r=xl(r,[0,0],[n,s]),a=xl(a,[0,0],[s,s])),[r,a]}))}const _u=Zr({qr_:function(e,t=!1){if(P(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Au(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=Al(Uo(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach((e=>{const[n,s]=Au(e,t);r.push(n),a.push(s)})),[Uo(Cl(r,0),e.shape),Uo(Cl(a,0),e.shape)]}}});var Fu;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Fu||(Fu={}));const Du=Zr({computeWeightedLoss_:function(e,t,n=Fu.SUM_BY_NONZERO_WEIGHTS){const s=Xr(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Xr(t,"weights","computeWeightedLoss"));const a=null==r?s:Ei(s,r);if(n===Fu.NONE)return a;if(n===Fu.SUM)return Ai(a);if(n===Fu.MEAN){if(null==r)return Ki(a);{const e=s.size/r.size,t=fi(Ai(a),Ai(r));return e>1?fi(t,wo(e)):t}}if(n===Fu.SUM_BY_NONZERO_WEIGHTS){if(null==r)return fi(Ai(a),wo(s.size));{const e=Ei(r,nl(s.shape)),t=Da(Ai(Qi(e,wo(0))),"float32");return fi(Ai(a),t)}}throw Error(`Unknown reduction: ${n}`)}});Zr({absoluteDifference_:function(e,t,n,s=Fu.SUM_BY_NONZERO_WEIGHTS){const r=Xr(e,"labels","absoluteDifference"),a=Xr(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=Xr(n,"weights","absoluteDifference")),z(r.shape,a.shape,"Error in absoluteDifference: ");const i=No(Ri(r,a));return Du(i,o,s)}}),Zr({cosineDistance_:function(e,t,n,s,r=Fu.SUM_BY_NONZERO_WEIGHTS){const a=Xr(e,"labels","cosineDistance"),o=Xr(t,"predictions","cosineDistance");let i=null;null!=s&&(i=Xr(s,"weights","cosineDistance")),z(a.shape,o.shape,"Error in cosineDistance: ");const l=wo(1),u=Ri(l,Ai(Ei(a,o),n,!0));return Du(u,i,r)}}),Zr({hingeLoss_:function(e,t,n,s=Fu.SUM_BY_NONZERO_WEIGHTS){let r=Xr(e,"labels","hingeLoss");const a=Xr(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Xr(n,"weights","hingeLoss")),z(r.shape,a.shape,"Error in hingeLoss: ");const i=wo(1);r=Ri(Ei(wo(2),r),i);const l=dl(Ri(i,Ei(r,a)));return Du(l,o,s)}}),Zr({huberLoss_:function(e,t,n,s=1,r=Fu.SUM_BY_NONZERO_WEIGHTS){const a=Xr(e,"labels","huberLoss"),o=Xr(t,"predictions","huberLoss");let i=null;null!=n&&(i=Xr(n,"weights","huberLoss")),z(a.shape,o.shape,"Error in huberLoss: ");const l=wo(s),u=No(Ri(o,a)),c=Xi(u,l),h=Ri(u,c),d=So(Ei(wo(.5),Yi(c)),Ei(l,h));return Du(d,i,r)}}),Zr({logLoss_:function(e,t,n,s=1e-7,r=Fu.SUM_BY_NONZERO_WEIGHTS){const a=Xr(e,"labels","logLoss"),o=Xr(t,"predictions","logLoss");let i=null;null!=n&&(i=Xr(n,"weights","logLoss")),z(a.shape,o.shape,"Error in logLoss: ");const l=wo(1),u=wo(s),c=Ji(Ei(a,$i(So(o,u)))),h=Ei(Ri(l,a),$i(So(Ri(l,o),u))),d=Ri(c,h);return Du(d,i,r)}});const Ou=Zr({squaredDifference_:function(e,t){let n=Xr(e,"a","squaredDifference"),s=Xr(t,"b","squaredDifference");[n,s]=Fr(n,s),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(cs,r,{})}});Zr({meanSquaredError_:function(e,t,n,s=Fu.SUM_BY_NONZERO_WEIGHTS){const r=Xr(e,"labels","meanSquaredError"),a=Xr(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Xr(n,"weights","meanSquaredError")),z(r.shape,a.shape,"Error in meanSquaredError: ");const i=Ou(r,a);return Du(i,o,s)}}),Zr({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Fu.SUM_BY_NONZERO_WEIGHTS){let a=Xr(e,"multiClassLabels","sigmoidCrossEntropy");const o=Xr(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Xr(n,"weights","sigmoidCrossEntropy")),z(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=wo(s),t=wo(1),n=wo(.5);a=So(Ei(a,Ri(t,e)),Ei(n,e))}const l=function(e,t){const n=Xr(e,"labels","sigmoidCrossEntropyWithLogits"),s=Xr(t,"logits","sigmoidCrossEntropyWithLogits");z(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=dl(s),a=Ei(s,n),o=Ci(xi(Ji(No(s))));return So(Ri(r,a),o)}(a,o);return Du(l,i,r)}}),Zr({softmaxCrossEntropy_:function(e,t,n,s=0,r=Fu.SUM_BY_NONZERO_WEIGHTS){let a=Xr(e,"onehotLabels","softmaxCrossEntropy");const o=Xr(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Xr(n,"weights","softmaxCrossEntropy")),z(a.shape,o.shape,"Error in softmaxCrossEntropy: "),s>0){const e=wo(s),t=wo(1),n=wo(a.shape[1]);a=So(Ei(a,Ri(t,e)),fi(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=ko(((e,t,s)=>{const r=Wi(t,[n],!0),a=Ri(Da(t,"float32"),r);s([e,a]);const o=Ji(Ei(a,e));return{value:Ai(o,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Mi(e.shape,[n]);return[Ei(Uo(e,a),Ri(Da(s,"float32"),xi(r))),Ei(Uo(e,a),Ri(xi(r),Da(s,"float32")))]}}}));return s(e,t)}(a,o);return Du(l,i,r)}}),Zr({sparseFillEmptyRows_:function(e,t,n,s){const r=Xr(e,"indices","sparseFillEmptyRows","int32"),a=Xr(t,"values","sparseFillEmptyRows"),o=Xr(n,"denseShape","sparseFillEmptyRows","int32"),i=Xr(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:r,values:a,denseShape:o,defaultValue:i},u=Wr.runKernel(as,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),Zr({sparseReshape_:function(e,t,n){const s=Xr(e,"inputIndices","sparseReshape","int32"),r=Xr(t,"inputShape","sparseReshape","int32"),a=Xr(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:s,inputShape:r,newShape:a},i=Wr.runKernel(os,o);return{outputIndices:i[0],outputShape:i[1]}}}),Zr({sparseSegmentMean_:function(e,t,n){const s=Xr(e,"data","sparseSegmentMean"),r=Xr(t,"indices","sparseSegmentMean","int32"),a=Xr(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:s,indices:r,segmentIds:a};return Wr.runKernel(is,o)}}),Zr({sparseSegmentSum_:function(e,t,n){const s=Xr(e,"data","sparseSegmentSum"),r=Xr(t,"indices","sparseSegmentSum","int32"),a=Xr(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:s,indices:r,segmentIds:a};return Wr.runKernel(ls,o)}}),Zr({stringNGrams_:function(e,t,n,s,r,a,o,i){const l=Xr(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Xr(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:o,preserveShortSequences:i},h={data:l,dataSplits:u},d=Wr.runKernel(ps,h,c);return{nGrams:d[0],nGramsSplits:d[1]}}}),Zr({stringSplit_:function(e,t,n=!0){const s=Xr(e,"input","stringSplit","string"),r=Xr(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},o={input:s,delimiter:r},i=Wr.runKernel(fs,o,a);return{indices:i[0],values:i[1],shape:i[2]}}}),Zr({stringToHashBucketFast_:function(e,t){const n=Xr(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return Wr.runKernel(ms,r,s)}});const Mu={flipLeftRight:su,grayscaleToRGB:ru,resizeNearestNeighbor:vu,resizeBilinear:yu,rotateWithOffset:au,cropAndResize:nu,nonMaxSuppression:iu,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Xr(e,"boxes","nonMaxSuppressionAsync"),o=Xr(t,"scores","nonMaxSuppressionAsync"),i=ou(a,o,n,s,r);n=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=await Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:h}=cu(u,c,n,s,r);return a!==e&&a.dispose(),o!==t&&o.dispose(),El(h,"int32")},nonMaxSuppressionWithScore:xu,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const o=Xr(e,"boxes","nonMaxSuppressionAsync"),i=Xr(t,"scores","nonMaxSuppressionAsync"),l=ou(o,i,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=du(c,h,n,s,r,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:El(d,"int32"),selectedScores:El(p)}},nonMaxSuppressionPadded:bu,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const o=Xr(e,"boxes","nonMaxSuppressionAsync"),i=Xr(t,"scores","nonMaxSuppressionAsync"),l=ou(o,i,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=hu(d,p,u,c,h,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:El(f,"int32"),validOutputs:wo(m,"int32")}},threshold:Nu,transform:Su},Lu={bandPart:$u,gramSchmidt:Ru,qr:_u};class Bu extends Io{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Wr.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Wr.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:xo((()=>Fl(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:xo((()=>Fl(s).variable(!1)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;xo((()=>{const e=So(Ei(a,this.rho),Ei(Yi(r),1-this.rho)),t=Ei(fi(Sl(So(o,this.epsilon)),Sl(So(a,this.epsilon))),r),n=So(Ei(o,this.rho),Ei(Yi(t),1-this.rho));a.assign(e),o.assign(n);const i=So(Ei(t,-this.learningRate),s);s.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(bo(this.accumulatedGrads.map((e=>e.variable))),bo(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Bu.className="Adadelta",fo(Bu);class Pu extends Io{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Wr.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:xo((()=>Zo(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;xo((()=>{const e=So(a,Yi(r));a.assign(e);const t=So(Ei(fi(r,Sl(So(e,Wr.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&bo(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Pu.className="Adagrad",fo(Pu);class zu extends Io{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],xo((()=>{this.accBeta1=wo(t).variable(),this.accBeta2=wo(n).variable()})),null==s&&(this.epsilon=Wr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);xo((()=>{const n=Ri(1,this.accBeta1),s=Ri(1,this.accBeta2);t.forEach(((t,r)=>{const a=Wr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:xo((()=>Fl(a).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:xo((()=>Fl(a).variable(!1)))});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=So(Ei(i,this.beta1),Ei(o,1-this.beta1)),c=So(Ei(l,this.beta2),Ei(Yi(o),1-this.beta2)),h=fi(u,n),d=fi(c,s);i.assign(u),l.assign(c);const p=So(Ei(fi(h,So(Sl(d),this.epsilon)),-this.learningRate),a);a.assign(p)})),this.accBeta1.assign(Ei(this.accBeta1,this.beta1)),this.accBeta2.assign(Ei(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&bo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&bo(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),xo((()=>{this.accBeta1.assign(Cu(this.beta1,this.iterations_+1)),this.accBeta2.assign(Cu(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}zu.className="Adam",fo(zu);class Wu extends Io{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],xo((()=>{this.iteration=wo(0).variable(),this.accBeta1=wo(t).variable()})),null==s&&(this.epsilon=Wr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);xo((()=>{const n=Ri(1,this.accBeta1),s=fi(-this.learningRate,So(Ei(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Wr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Fl(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Fl(a).variable(!1)});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=So(Ei(i,this.beta1),Ei(o,1-this.beta1)),c=Ei(l,this.beta2),h=No(o),d=ji(c,h);i.assign(u),l.assign(d);const p=So(Ei(fi(s,n),fi(u,So(d,this.epsilon))),a);a.assign(p)})),this.iteration.assign(So(this.iteration,1)),this.accBeta1.assign(Ei(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&bo(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&bo(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Wu.className="Adamax",fo(Wu);class Vu extends Io{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Wr.registeredVariables[t];xo((()=>{const e=So(Ei(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=yo(wo(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Vu.className="SGD",fo(Vu);class Uu extends Vu{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=wo(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Wr.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:xo((()=>Fl(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&xo((()=>{let e;const t=So(Ei(this.m,r),a);e=this.useNesterov?So(Ei(this.c,So(a,Ei(t,this.m))),s):So(Ei(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&bo(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Uu.className="Momentum",fo(Uu);class Gu extends Io{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Wr.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Wr.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:xo((()=>Fl(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:xo((()=>Fl(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:xo((()=>Fl(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;xo((()=>{const e=So(Ei(o,this.decay),Ei(Yi(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=So(Ei(t,this.decay),Ei(a,1-this.decay)),l=fi(Ei(a,this.learningRate),Sl(Ri(e,So(Yi(r),this.epsilon)))),u=So(Ei(i,this.momentum),l);o.assign(e),t.assign(r),i.assign(u);const c=Ri(s,u);s.assign(c)}else{const e=So(Ei(o,this.decay),Ei(Yi(a),1-this.decay)),t=So(Ei(i,this.momentum),fi(Ei(a,this.learningRate),Sl(So(e,this.epsilon))));o.assign(e),i.assign(t);const n=Ri(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&bo(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&bo(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&bo(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}Gu.className="RMSProp",fo(Gu);class Hu{static sgd(e){return new Vu(e)}static momentum(e,t,n=!1){return new Uu(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Gu(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new zu(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Bu(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new Wu(e,t,n,s,r)}static adagrad(e,t=.1){return new Pu(e,t)}}const ju={sgd:Hu.sgd,momentum:Hu.momentum,adadelta:Hu.adadelta,adagrad:Hu.adagrad,rmsprop:Hu.rmsprop,adamax:Hu.adamax,adam:Hu.adam},Ku="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function qu(){return new Promise((e=>Ku((()=>e()))))}function Xu(e,t){const n=e[0].length;e.forEach(((e,t)=>{P(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),P(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)P(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Yu(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var Zu;function Ju(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let r=1;r<n.length;++r){const a=n[r],o=s[s.length-n.length+r],i=s[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${a} but shape[${r+e}] = ${i}`)}else s[o]=a}return s}function Qu(e){const t={FIRST_DIM_SIZE:Zu.FIRST_DIM_SIZE,VALUE_ROWIDS:Zu.VALUE_ROWIDS,ROW_LENGTHS:Zu.ROW_LENGTHS,ROW_SPLITS:Zu.ROW_SPLITS,ROW_LIMITS:Zu.ROW_LIMITS,ROW_STARTS:Zu.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function ec(e){return 0===e.length?0:e[0]===Zu.FIRST_DIM_SIZE?e.length-1:e.length}function tc(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(n,s-1);++r){const n=e[r],s=t[r+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${s}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Zu||(Zu={}));const nc=30;function sc(e){return e<=nc?e:ie(e,Math.floor(Math.sqrt(e)))}function rc(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function ac(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function oc(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function ic(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function lc(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function uc(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}function cc(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===U(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let o=1;for(let e=0;e<r.length-1;++e)o*=r[e];const i=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=i[e],l.push(i[e]);const c=[...le(e.shape).map((e=>e/u)),1].slice(0,a);return[l,o,u,c]}function hc(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function dc(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}hc(n,t,e)}function pc(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let o=1;for(let e=r;e<a;++e)o*=n[e];const i=r<1?1:r;return{sliceRank:r,numUpdates:U(t.shape)/i,sliceSize:o,strides:[...le(n.slice(0,r)),1],outputSize:U(n)}}const fc=1.7580993408473768,mc=1.0507009873554805,gc=.3275911,xc=.254829592,bc=-.284496736,yc=1.421413741,vc=-1.453152027,kc=1.061405429;function wc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function Ic(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function Nc(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Sc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function $c(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Cc(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Tc(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Ec(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const Rc="->",Ac=/->/g,_c=",",Fc="...";function Dc(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Ac,"").length)/Rc.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${Rc}").`);const[s,r]=e.split(Rc);P(-1===s.indexOf(Fc),(()=>`The ellipsis notation ("${Fc}") is not supported yet.`));const a=s.split(_c),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===i.indexOf(t)&&t!==_c&&i.push(t)}const l=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(i.indexOf(a[e][t]))}const u=i.length,c=[];for(let e=r.length;e<u;++e)c.push(e);return{allDims:i,summedDims:c,idDims:l}}function Oc(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function Mc(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:P(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function Lc(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=Pc(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function Bc(e){return e.every(((e,t)=>e===t))}function Pc(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function zc(e,t,n=0){let s=[];if("number"==typeof t)P(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const r=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);P(r<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const s=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-s}P(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function Wc(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Vc(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Uc(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function Gc(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Hc(e,t){return`size ${e} must be non-negative, not ${t}`}function jc(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Kc(e,t){return`Input to reshape is a SparseTensor with ${U(e)}\n  dense values, but the requested shape requires a multiple of ${U(t)}. inputShape=${e} outputShape= ${t}`}function qc(e,t){return`Input to reshape is a tensor with ${U(e)} dense values, but the requested shape has ${U(t)}. inputShape=${e} outputShape=${t}`}function Xc(){return"segment ids must be >= 0"}function Yc(){return"segment ids are not increasing"}function Zc(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Jc(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Qc(e,t){let n,s=!1;for(e<=nc?(n=e,s=!0):n=ie(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=ie(e,n+1);return n}function eh(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function th(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}function nh(e){try{return e.map((e=>ir(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function sh(e){return e.map((e=>or(e)))}function rh(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=Fa(e,"int32"),r=Fa([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),o=t*e.length;r.values.set(a,o)}return r.toTensor()}function ah(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&P("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const oh=rh;class ih extends F{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new _(this,mo())}nextDataId(){return ih.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,ke().get("IS_NODE")&&_s("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&se(n[0])){const r=n.map((e=>or(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?wc(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>ir(e)));return Fa(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Fa(e.shape,e.dtype,t)}makeOutput(e,t,n){return mo().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=ar();return e(),{kernelMs:ar()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){ah([e],"where");const t=this.readSync(e.dataId);return oh(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function lh(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:o}=s;if(ah(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,l=i.data.get(o.dataId).values,u=U(o.shape),c=n||o.dtype,h=Q(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return i.makeTensorInfo(o.shape,c,h)}}function uh(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:o}=s;if(ah(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=a,l=i.data.get(o.dataId).values,u=n||o.dtype,c=t(l,u,r);return i.makeTensorInfo(o.shape,u,c)}}ih.nextDataId=0,vo("cpu",(()=>new ih),1);const ch=lh(wt,(e=>e>=0?e:Math.exp(e)-1)),hh={kernelName:wt,backendName:"cpu",kernelFunc:ch};function dh(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const ph={kernelName:Pt,backendName:"cpu",kernelFunc:dh};function fh(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;ah([r],"leakyRelu");const o=U(r.shape),i=n.data.get(r.dataId).values,l=J("float32",o);for(let e=0;e<i.length;e++)l[e]=i[e]<0?a*i[e]:i[e];return n.makeTensorInfo(r.shape,"float32",l)}const mh={kernelName:Ht,backendName:"cpu",kernelFunc:fh};function gh(e){return(t,n,s,r,a)=>{const o=Ha(t,n),i=o.length,l=le(o),u=J(a,U(o)),c=t.length,h=n.length,d=le(t),p=le(n),f=Ua(t,o),m=Ua(n,o);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=ge(t,i,l),a=n.slice(-c);f.forEach((e=>a[e]=0));const o=me(a,c,d),g=n.slice(-h);m.forEach((e=>g[e]=0));const x=me(g,h,p);u[t]=e(s[o],r[x])}return[u,o]}}const xh=gh(((e,t)=>e<0?t*e:e));function bh(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;ah([s,r],"prelu");const a=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,[i,l]=xh(s.shape,r.shape,a,o,"float32");return n.makeTensorInfo(l,"float32",i)}const yh={kernelName:Cn,backendName:"cpu",kernelFunc:bh},vh=lh(Dn,(e=>Math.max(0,e))),kh={kernelName:Dn,backendName:"cpu",kernelFunc:vh},wh=lh(zn,(e=>Math.min(Math.max(0,e),6))),Ih={kernelName:zn,backendName:"cpu",kernelFunc:wh};function Nh(e){return(t,n,s)=>{const r=J(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}const Sh=Nh((e=>1/(1+Math.exp(-e)))),$h=lh(Jn,(e=>1/(1+Math.exp(-e)))),Ch={kernelName:Jn,backendName:"cpu",kernelFunc:$h};function Th(e,t,n,s,r){if("linear"===n)return dh({inputs:{x:t},backend:e});if("relu"===n)return vh({inputs:{x:t},backend:e});if("elu"===n)return ch({inputs:{x:t},backend:e});if("relu6"===n)return wh({inputs:{x:t},backend:e});if("prelu"===n)return bh({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return fh({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return $h({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Eh(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,i=n.makeTensorInfo(s.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",o)},i}const Rh={kernelName:Ze,backendName:"cpu",kernelFunc:Eh};function Ah(e,t,n="float32"){if("complex64"===n)return Eh({inputs:{real:Ah(e,t,"float32"),imag:Ah(e,t,"float32")},backend:e});const s=de(U(t),n);return e.makeTensorInfo(t,n,s)}function _h(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Fh={kernelName:_n,backendName:"cpu",kernelFunc:_h};function Dh(e,t,n,s){if("int32"===s)return[t,"int32",Int32Array.from(e)];if("bool"===s){const s=rr([0],n),[r,a]=gh(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[a,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function Oh(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return dh({inputs:{x:r},backend:n});const e=Ah(n,r.shape,r.dtype),t=Oh({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=Eh({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=_h({inputs:{input:r},backend:n}),t=Oh({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!ee(r.dtype,a)){const e=dh({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const o=n.data.get(r.dataId).values,[i,l,u]=Dh(o,r.shape,r.dtype,a);return n.makeTensorInfo(i,l,u)}const Mh={kernelName:qe,backendName:"cpu",kernelFunc:Oh};function Lh(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a,b:o}=n,i=r;ah([a,o],e);const l=i.data.get(a.dataId).values,u=i.data.get(o.dataId).values,c="string"===a.dtype?nh(l):l,h="string"===a.dtype?nh(u):u,d=s||a.dtype,[p,f]=t(a.shape,o.shape,c,h,d);return i.makeTensorInfo(f,d,p)}:({inputs:e,backend:r})=>{const{a,b:o}=e,i=r;if("complex64"===a.dtype||"complex64"===o.dtype){const e=Oh({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=i.data.get(s.dataId).values,u=i.data.get(r.dataId).values,c=Oh({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),h=i.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=i.data.get(d.dataId).values,m=i.data.get(p.dataId).values,[g,x,b]=n(a.shape,o.shape,l,u,f,m),y=i.makeTensorInfo(b,"float32",g),v=i.makeTensorInfo(b,"float32",x),k=Eh({inputs:{real:y,imag:v},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(y),i.disposeIntermediateTensorInfo(v),k}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,o.shape,e,n,r);return i.makeTensorInfo(u,r,l)}}}function Bh(e){return(t,n,s,r,a,o)=>{const i=Ha(t,n),l=U(i),u=i.length,c=le(i),h=J("float32",l),d=J("float32",l),p=Ua(t,i),f=Ua(n,i),m=wc(s,r),g=wc(a,o),x=t.length,b=le(t),y=n.length,v=le(n);if(p.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,d[t]=r.imag}else for(let t=0;t<h.length;t++){const n=ge(t,u,c),s=n.slice(-x);p.forEach((e=>s[e]=0));const r=me(s,x,b),a=n.slice(-y);f.forEach((e=>a[e]=0));const o=me(a,y,v),i=e(m[2*r],m[2*r+1],g[2*o],g[2*o+1]);h[t]=i.real,d[t]=i.imag}return[h,d,i]}}const Ph=gh(((e,t)=>e+t)),zh=Bh(((e,t,n,s)=>({real:e+n,imag:t+s}))),Wh=Lh(Ee,Ph,zh),Vh={kernelName:Ee,backendName:"cpu",kernelFunc:Wh};function Uh(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,o=U(r.shape),i=X(a,o),l=U(i);P(o===l,(()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const Gh={kernelName:On,backendName:"cpu",kernelFunc:Uh};function Hh(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:o,transposeB:i}=s;ah([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=o?r.shape[l-2]:r.shape[l-1],h=i?a.shape[u-1]:a.shape[u-2],d=o?r.shape[l-1]:r.shape[l-2],p=i?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=U(f),x=U(m),b=Ha(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([d,p]);P(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`));const y=i?[x,p,h]:[x,h,p],v=Uh({inputs:{x:r},backend:n,attrs:{shape:o?[g,c,d]:[g,d,c]}}),k=Uh({inputs:{x:a},backend:n,attrs:{shape:y}}),w=o?v.shape[1]:v.shape[2],I=o?v.shape[2]:v.shape[1],N=i?k.shape[1]:k.shape[2],S=Math.max(g,x),$=n.data.get(v.dataId).values,C=n.data.get(k.dataId).values,T=le(v.shape),E=le(k.shape),[R,A,_]=o?[T[0],1,T[1]]:[T[0],T[1],1],[F,D,O]=i?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*N,L=Fa([S,I,N],v.dtype),B=L.values,z=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<I;t+=z)for(let n=0;n<N;n+=z)for(let s=0;s<w;s+=z){const r=Math.min(t+z,I),a=Math.min(n+z,N),o=Math.min(s+z,w);for(let i=t;i<r;i++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<o;r++){const s=Math.min(e,g-1)*R,a=Math.min(e,x-1)*O;n+=$[s+i*A+r*_]*C[r*F+t*D+a]}B[e*M+(i*N+t)]+=n}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const jh={kernelName:Ge,backendName:"cpu",kernelFunc:Hh},Kh={kernelName:Es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const m=[];d=Hh({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),o&&(p=Wh({inputs:{a:d,b:o},backend:n}),m.push(d),d=p),c&&(f=Th(n,d,c,i,h),m.push(d),d=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return d}};function qh(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const Xh={kernelName:$e,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;ah(t,"abs");let s=new Float32Array(U(t.shape));return s=qh(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},Yh={kernelName:Ce,backendName:"cpu",kernelFunc:lh(Ce,(e=>Math.acos(e)))},Zh={kernelName:Te,backendName:"cpu",kernelFunc:lh(Te,(e=>Math.acosh(e)))},Jh={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;ah(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=Fa(s[0].shape,s[0].dtype),o=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function Qh(e,t,n,s,r){const a=t.length,o=U(t),i=le(t),l=le(r),u=J(n,U(r));for(let t=0;t<o;++t){const n=ge(t,a,i),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[me(r,a,l)]=e[t]}return u}function ed(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;ah(r,"transpose");const o=r.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=r.shape[a[e]];const l=Qh(s.data.get(r.dataId).values,r.shape,r.dtype,a,i);return{dataId:s.write(l,i,r.dtype),shape:i,dtype:r.dtype}}const td={kernelName:ws,backendName:"cpu",kernelFunc:ed},nd={kernelName:Ae,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;ah(r,"all");const i=Y(a,r.shape);let l=i;const u=Bi(l,r.shape.length);let c=r;null!=u&&(c=ed({inputs:{x:r},backend:n,attrs:{perm:u}}),l=zi(l.length,r.shape.length)),Li("all",l,c.shape.length);const[h,d]=Oi(c.shape,l),p=U(d),f=de(U(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=Uh({inputs:{x:g},backend:n,attrs:{shape:Mi(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},sd={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;ah(r,"any");const i=Y(a,r.shape);let l=i;const u=Bi(l,r.shape.length);let c=r;null!=u&&(c=ed({inputs:{x:r},backend:n,attrs:{perm:u}}),l=zi(l.length,r.shape.length)),Li("any",l,c.shape.length);const[h,d]=Oi(c.shape,l),p=U(d),f=de(U(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=Uh({inputs:{x:g},backend:n,attrs:{shape:Mi(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},rd={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;ah(r,"argMax");let o=Y(a,r.shape);const i=Bi(o,r.shape.length);let l=r;const u=[];null!=i&&(l=ed({inputs:{x:r},backend:n,attrs:{perm:i}}),u.push(l),o=zi(o.length,l.shape.length)),o=[o[0]],Li("argMax",o,l.shape.length);const[c,h]=Oi(l.shape,o),d=de(U(c),"int32"),p=U(h),f=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*p;let n=f[t],s=0;for(let e=0;e<p;++e){const r=f[t+e];r>n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},ad={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;ah(r,"argMin");let o=Y(a,r.shape);const i=Bi(o,r.shape.length);let l=r;const u=[];null!=i&&(l=ed({inputs:{x:r},backend:n,attrs:{perm:i}}),u.push(l),o=zi(o.length,l.shape.length)),o=[o[0]],Li("argMin",o,l.shape.length);const[c,h]=Oi(l.shape,o),d=de(U(c),"int32"),p=U(h),f=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*p;let n=f[t],s=0;for(let e=0;e<p;++e){const r=f[t+e];r<n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},od={kernelName:Oe,backendName:"cpu",kernelFunc:lh(Oe,(e=>Math.asin(e)))},id={kernelName:Me,backendName:"cpu",kernelFunc:lh(Me,(e=>Math.asinh(e)))},ld={kernelName:Le,backendName:"cpu",kernelFunc:lh(Le,(e=>Math.atan(e)))},ud={kernelName:Pe,backendName:"cpu",kernelFunc:Lh(Pe,gh(((e,t)=>Math.atan2(e,t))))},cd={kernelName:Be,backendName:"cpu",kernelFunc:lh(Be,(e=>Math.atanh(e)))};function hd(e,t,n,s,r,a){const o=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Fa(r.outShape,n),g=m.values,x=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],y=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*x,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let x=0;x<r.outHeight;++x){const v=x*o-d,k=Math.max(0,v),w=Math.min(r.inHeight,c+v),I=n+x*b;for(let n=0;n<r.outWidth;++n){const o=n*i-p,c=Math.max(0,o),d=Math.min(r.inWidth,h+o);let x=f,b=0,v=0;for(let n=k;n<w;n+=l){const r=m+n*s[1];for(let n=c;n<d;n+=u){const o=e[r+n*s[2]+t];"max"===a&&o>x?x=o:"avg"===a&&(b+=o,v++)}if(isNaN(x))break}g[I+n*y+t]="avg"===a?b/v:x}}}return m}function dd(e,t,n,s,r=!1,a=!1){const o=Fa(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,m=Fa(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*i-p;let x=g;for(;x<0;)x+=u;const b=Math.min(s.inHeight,h+g);for(let i=0;i<s.outWidth;++i){const h=i*l-f;let p=h;for(;p<0;)p+=c;const y=Math.min(s.inWidth,d+h);let v=Number.NEGATIVE_INFINITY,k=-1;for(let n=x;n<b;n+=u){const o=n-g;for(let i=p;i<y;i+=c){const l=i-h,u=m.get(e,n,i,t);u>v&&(v=u,k=r?a?((e*s.inHeight+n)*s.inWidth+i)*s.inChannels+t:(n*s.inWidth+i)*s.inChannels+t:o*d+l)}}o.set(k,e,n,i,t)}}return o}function pd(e,t,n,s,r,a){const o=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,x=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,y=Fa(r.outShape,n),v=y.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],w=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,y=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const S=k*o-m;let $=S;for(;$<0;)$+=u;const C=Math.min(r.inDepth,d+S),T=n+k*w;for(let n=0;n<r.outHeight;++n){const o=n*i-g;let d=o;for(;d<0;)d+=c;const m=Math.min(r.inHeight,p+o),k=T+n*I;for(let n=0;n<r.outWidth;++n){const o=n*l-x;let i=o;for(;i<0;)i+=h;const p=Math.min(r.inWidth,f+o),g=k+n*N;let w=b,I=0,S=0;for(let n=$;n<C;n+=u){const r=y+n*s[1];for(let n=d;n<m;n+=c){const o=r+n*s[2];for(let n=i;n<p;n+=h){const r=e[o+n*s[3]+t];if("max"===a&&r>w?w=r:"avg"===a&&(I+=r,S++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}v[g+t]="avg"===a?I/S:w}}}}return y}const fd={kernelName:ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ah(r,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;P(zo(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Ro(r.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&G(u.inShape,u.outShape))c=dh({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=le(r.shape),s=hd(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},md={kernelName:Ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;ah(r,"avgPool3d");const c=Ao(r.shape,a,o,1,i,l,u),h=pd(n.data.get(r.dataId).values,r.shape,r.dtype,le(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},gd={kernelName:Ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;ah([r,a],"avgPool3DGrad");const c=Ao(a.shape,o,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,y=c.dilationWidth,v=c.effectiveFilterDepth,k=c.effectiveFilterHeight,w=c.effectiveFilterWidth,I=v-1-c.padInfo.front,N=w-1-c.padInfo.left,S=k-1-c.padInfo.top,$=Fa(a.shape,"float32"),C=1/(f*m*g),T=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-I,o=s-S,i=r-N;let l=0;for(let n=0;n<v;n+=x){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const r=(o+n)/d;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<w;n+=y){const a=(i+n)/p;a<0||a>=c.outWidth||Math.floor(a)!==a||(l+=T.get(e,s,r,a,t))}}}$.set(l*C,e,n,s,r,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},xd={kernelName:We,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,o=a;ah([r,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Ro(o.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,y=b-1-c.padInfo.left,v=x-1-c.padInfo.top,k=Fa(o.shape,"float32"),w=1/(p*f),I=n.data.get(r.dataId).values,N=Fa(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-v,a=s-y;let o=0;for(let n=0;n<x;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/d;r<0||r>=c.outWidth||Math.floor(r)!==r||(o+=N.get(e,s,r,t))}}k.set(o*w,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},bd={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:o,mean:i,variance:l}=t;P(i.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),P(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),P(null==a||i.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),ah([r,i,l,a,o],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(i.dataId).values,d=n.data.get(l.dataId).values,p=a?n.data.get(a.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,x=p.length,b=d.length,y=h.length;let v=0,k=0,w=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[v++]+(c[e]-h[k++])*p[w++]/Math.sqrt(d[I++]+u),v>=g&&(v=0),k>=y&&(k=0),w>=x&&(w=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function yd(e,t,n,s,r){const a=oo(s,t,n),o=U(n),i=le(s);if(a){const n=io(t,i);return"string"===r?e.slice(n,n+o):e.subarray(n,n+o)}const l=Fa(s,r,"string"===r?nh(e):e),u=Fa(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?sh(u.values):u.values}function vd(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:o}=s;ah(r,"slice");const[i,l]=lo(r,a,o);qa(r,i,l);const u=yd(n.data.get(r.dataId).values,i,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const kd={kernelName:qn,backendName:"cpu",kernelFunc:vd},wd={kernelName:He,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:o}=s;ah([r],"batchToSpaceND");const i=a.reduce(((e,t)=>e*t)),l=ac(r.shape,a,i),u=oc(l.length,a.length),c=ic(r.shape,a,i),h=lc(o,a.length),d=uc(c,o,a.length),p=Uh({inputs:{x:r},backend:n,attrs:{shape:l}}),f=ed({inputs:{x:p},backend:n,attrs:{perm:u}}),m=Uh({inputs:{x:f},backend:n,attrs:{shape:c}}),g=vd({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function Id(e,t,n,s,r){const a=U(s),o=de(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(o[s]+=a>0?t[n]:1)}return o}function Nd(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],o=Fa([r,n],t.dtype);for(let i=0;i<r;i++)for(let r=0;r<a;r++){const a=e.get(i,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,r),i,a):o.set(o.get(i,a)+1,i,a))}return o}const Sd={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:o}=s,i=Id(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,i)}},$d={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,i=Ha(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Cd=Nh((e=>Math.ceil(e))),Td={kernelName:Xe,backendName:"cpu",kernelFunc:uh(Xe,Cd)},Ed=lh(Ye,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),Rd={kernelName:Ye,backendName:"cpu",kernelFunc:Ed},Ad={kernelName:Je,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(U(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,o=r.complexTensorInfos.imag,i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function _d(e,t,n,s){const r=Q(n,U(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=U(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?nh(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[i+t]=a[o++]}s+=e.shape[1]}))}return r}function Fd(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Dd={kernelName:Wt,backendName:"cpu",kernelFunc:Fd};function Od(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Y(r,t[0].shape)[0];Xu(t.map((e=>e.shape)),a);let o=Yu(t.map((e=>e.shape)),a);if(0===U(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>U(e.shape)>0));if(1===i.length)return dh({inputs:{x:i[0]},backend:n});if("complex64"===i[0].dtype){const e=i.map((e=>_h({inputs:{input:e},backend:n}))),t=i.map((e=>Fd({inputs:{input:e},backend:n}))),s=Od({inputs:e,backend:n,attrs:{axis:a}}),r=Od({inputs:t,backend:n,attrs:{axis:a}}),o=Eh({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),o}const l=i.map((e=>{const t=U(e.shape.slice(a));return Uh({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=Yu(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=_d(u,o,t[0].dtype,c),d=Yu(i.map((e=>e.shape)),a),p=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}const Md={kernelName:Qe,backendName:"cpu",kernelFunc:Od};function Ld(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;ah([r,a],"conv2d");const h=Wo(l),d=_o(r.shape,a.shape,o,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,x=d.padInfo.left,b=d.padInfo.top,y="channelsLast"===d.dataFormat,v=new yr(d.outShape,r.dtype),k=le(r.shape),w=le(a.shape),I=k[0],N=y?k[1]:k[2],S=y?k[2]:1,$=y?1:k[1],C=v.strides[0],T=y?v.strides[1]:v.strides[2],E=y?v.strides[2]:1,R=y?1:v.strides[1],A=n.data.get(r.dataId).values,_=n.data.get(a.dataId).values,F=v.values;for(let e=0;e<d.batchSize;++e){const t=e*I,n=e*C;for(let e=0;e<d.outHeight;++e){const s=n+e*T,r=e*d.strideHeight-b;for(let e=0;e<p;++e){const n=r+e*m;if(n<0||n>=d.inHeight)continue;const a=e*w[0],o=t+n*N;for(let e=0;e<d.outWidth;++e){const t=s+e*E,n=e*d.strideWidth-x;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=d.inWidth)continue;const r=o+s*S;let i=a+e*w[1];for(let e=0;e<d.inChannels;++e){const n=A[r+e*$];for(let e=0;e<d.outChannels;++e)F[t+e*R]+=n*_[i+e];i+=d.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,F)}const Bd={kernelName:et,backendName:"cpu",kernelFunc:Ld},Pd={kernelName:tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;ah([r,a],"conv2dBackpropFilter");const h=Wo(l),d=_o(r.shape,c,o,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,x="channelsLast"===d.dataFormat,b=new yr(d.filterShape,"float32"),y=d.padInfo.left,v=d.padInfo.top,k=n.data.get(r.dataId).values,w=n.data.get(a.dataId).values,I=new yr(r.shape,r.dtype,k),N=new yr(a.shape,a.dtype,w);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((v-e)/p)),n=Math.min(d.outHeight,(d.inHeight+v-e)/p);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((y-s)/f)),a=Math.min(d.outWidth,(d.inWidth+y-s)/f);for(let o=0;o<d.inChannels;++o)for(let i=0;i<d.outChannels;++i){let l=0;for(let u=0;u<d.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-v;for(let e=r;e<a;++e){const n=s+e*f-y;l+=x?I.get(u,t,n,o)*N.get(u,c,e,i):I.get(u,o,t,n)*N.get(u,i,c,e)}}b.set(l,e,s,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},zd={kernelName:nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;ah([r,a],"conv2dBackpropInput");const h=le(a.shape),d=le(r.shape);let p=Wo(u);const f=_o(o,a.shape,i,1,l,c,!1,p),m=new yr(f.inShape,"float32"),g=m.values,x=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[y,v,k]=h,{batchSize:w,filterHeight:I,filterWidth:N,inChannels:S,inHeight:$,inWidth:C,outChannels:T,outHeight:E,outWidth:R,strideHeight:A,strideWidth:_}=f;p=f.dataFormat;const F=I-1-f.padInfo.top,D=N-1-f.padInfo.left,O="channelsLast"===p,M=m.strides[0],L=O?m.strides[1]:m.strides[2],B=O?m.strides[2]:1,P=O?1:m.strides[1],z=d[0],W=O?d[1]:d[2],V=O?d[2]:1,U=O?1:d[1];for(let e=0;e<w;++e)for(let t=0;t<S;++t)for(let n=0;n<$;++n){const s=n-F,r=Math.max(0,Math.ceil(s/A)),a=Math.min(E,(I+s)/A);for(let o=0;o<C;++o){const i=o-D,l=Math.max(0,Math.ceil(i/_)),u=Math.min(R,(N+i)/_);let c=0;for(let n=r;n<a;++n){const r=n*A-s;for(let s=l;s<u;++s){const a=z*e+W*n+V*s,o=y*(I-1-r)+v*(N-1-(s*_-i))+k*t;for(let e=0;e<T;++e)c+=x[a+U*e]*b[o+e]}}g[M*e+L*n+B*o+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},Wd={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s;ah([r,a],"conv3d");const u=Fo(r.shape,a.shape,o,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=u,x=g.front,b=g.left,y=g.top,v=new yr(u.outShape,r.dtype),k=n.data.get(r.dataId).values,w=n.data.get(a.dataId).values,I=v.values,N=le(r.shape),S=le(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*v.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*v.strides[1],r=e*u.strideDepth-x;for(let e=0;e<c;++e){const n=r+e*p;if(n<0||n>=u.inDepth)continue;const a=e*S[0],o=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*v.strides[2],n=e*u.strideHeight-y;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*S[1],i=o+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<d;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*S[2],o=i+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[o+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*w[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},Vd={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,pad:i,filterShape:l}=s;ah([r,a],"conv3dBackpropFilterV2");const u=le(r.shape),c=le(a.shape),h=Fo(r.shape,l,o,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,x=h.filterWidth,b=new yr(h.filterShape,"float32"),y=b.values,[v,k,w,I]=b.strides,N=n.data.get(a.dataId).values,[S,$,C,T]=c,E=n.data.get(r.dataId).values,[R,A,_,F]=u,D=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((D-e)/d)),n=Math.min(h.outDepth,(h.inDepth+D-e)/d),s=e*v;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/p)),o=Math.min(h.outHeight,(h.inHeight+M-r)/p),i=r*k+s;for(let s=0;s<x;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*w+i;for(let i=0;i<h.inChannels;++i){const m=i*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*R,x=m*S;for(let m=t;m<n;++m){const t=(e+m*d-D)*A+h,n=m*$+x;for(let e=a;e<o;++e){const a=(r+e*p-M)*_+t,o=e*C+n;for(let e=l;e<u;++e){const t=e*T+o;g+=E[(s+e*f-O)*F+a+i]*N[t+c]}}}}y[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Ud={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:o,strides:i,inputShape:l}=s;ah([r],"conv3dBackpropInputV2");const u=le(r.shape),c=le(a.shape),h=Fo(l,a.shape,i,1,o),d=new yr(h.inShape,"float32"),p=d.values,[f,m,g,x]=d.strides,b=n.data.get(r.dataId).values,[y,v,k,w]=u,I=n.data.get(a.dataId).values,[N,S,$,C]=c,{batchSize:T,filterDepth:E,filterHeight:R,filterWidth:A,inChannels:_,inDepth:F,inHeight:D,inWidth:O,outChannels:M,outDepth:L,outHeight:B,outWidth:P,strideDepth:z,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=R-1-h.padInfo.top,H=A-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<_;++t)for(let n=0;n<F;++n){const s=n-U,r=Math.max(0,Math.ceil(s/z)),a=Math.min(L,(E+s)/z);for(let o=0;o<D;++o){const i=o-G,l=Math.max(0,Math.ceil(i/W)),u=Math.min(B,(R+i)/W);for(let c=0;c<O;++c){const h=c-H,d=Math.max(0,Math.ceil(h/V)),T=Math.min(P,(A+h)/V);let _=0;for(let n=r;n<a;++n){const r=n*z-s;for(let s=l;s<u;++s){const a=s*W-i;for(let o=d;o<T;++o){const i=y*e+v*n+k*s+w*o,l=N*(E-1-r)+S*(R-1-a)+$*(A-1-(o*V-h))+C*t;for(let e=0;e<M;++e)_+=b[i+e]*I[l+e]}}}p[f*e+m*n+g*o+x*c+t]=_}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},Gd=lh(ot,(e=>Math.cos(e))),Hd={kernelName:ot,backendName:"cpu",kernelFunc:Gd},jd=lh(it,(e=>Math.cosh(e))),Kd={kernelName:it,backendName:"cpu",kernelFunc:jd},qd={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=a.shape[0],[m,g]=i,x=Fa([f,m,g,p],"float32"),b=n.data.get(a.dataId).values,y=n.data.get(o.dataId).values,v=n.data.get(r.dataId).values,k=le(r.shape),w=le(x.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],o=y[e];if(o>=c)continue;const i=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(d-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*i:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<p;s++){const r=s+n*w[2]+t*w[1]+e*w[0];x.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),i=c-n;for(let l=0;l<g;l++){const c=g>1?s*(d-1)+l*f:.5*(s+a)*(d-1);if(c<0||c>d-1){for(let n=0;n<p;n++){const s=n+l*w[2]+t*w[1]+e*w[0];x.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<p;s++){let a=s+h*k[2]+n*k[1]+o*k[0];const u=v[a];a=s+m*k[2]+n*k[1]+o*k[0];const c=v[a];a=s+h*k[2]+r*k[1]+o*k[0];const d=v[a];a=s+m*k[2]+r*k[1]+o*k[0];const p=u+(c-u)*b,f=d+(v[a]-d)*b;a=s+l*w[2]+t*w[1]+e*w[0],x.values[a]=p+(f-p)*i}}}else for(let n=0;n<g;++n){const r=g>1?s*(d-1)+n*f:.5*(s+a)*(d-1);if(r<0||r>d-1){for(let s=0;s<p;s++){const r=s+n*w[2]+t*w[1]+e*w[0];x.values[r]=u}continue}const i=Math.round(r),l=Math.round(c);for(let s=0;s<p;s++){const r=s+i*k[2]+l*k[1]+o*k[0],a=s+n*w[2]+t*w[1]+e*w[0];x.values[a]=v[r]}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},Xd={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;ah(r,"cumprod");const l=Bi([a],r.shape.length);let u=r;null!=l&&(u=ed({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=zi(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Ar(u.dtype,"int32"),d=he(U(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<p.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=o?1:p[n];else{const s=m(e,t-1);d[n]=o?p[s]*d[s]:p[n]*d[s]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=ed({inputs:{x:g},backend:n,attrs:{perm:Pi(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},Yd={kernelName:ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;ah(r,"cumsum");const l=Bi([a],r.shape.length);let u=r;null!=l&&(u=ed({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=zi(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Ar(u.dtype,"int32"),d=de(U(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<p.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=o?0:p[n];else{const s=m(e,t-1);d[n]=o?p[s]+d[s]:p[n]+d[s]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=ed({inputs:{x:g},backend:n,attrs:{perm:Pi(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},Zd={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:o,binaryOutput:i}=s;if(1===r.shape.length){const e=Id(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,e)}if(2===r.shape.length){const e=Nd(n.bufferSync(r),n.bufferSync(a),o,i);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},Jd={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:o}=s;P("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,d=u*a,p=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(i*h*d*p);let g=0;for(let e=0;e<i;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<d;++t){const r=Math.floor(t/a),o=(s*a+t%a)*p;for(let t=0;t<p;++t){const s=t+o+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([i,h,d,p],r.dtype,m)}};function Qd(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;ah([r,a],"depthwiseConv2DNative");const c=le(r.shape),h=le(a.shape);let d=l;null==d&&(d=[1,1]),P(zo(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const p=_o(r.shape,a.shape,o,d,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:x,padInfo:b}=p,y=b.left,v=b.top,k=p.outChannels/p.inChannels,w=new yr(p.outShape,r.dtype),I=n.data.get(r.dataId).values,N=n.data.get(a.dataId).values,S=w.values;for(let e=0;e<p.batchSize;++e){const t=e*c[0],n=e*w.strides[0];for(let e=0;e<p.outHeight;++e){const s=n+e*w.strides[1],r=e*p.strideHeight-v;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=p.inHeight)continue;const a=e*h[0],o=t+n*c[1];for(let e=0;e<p.outWidth;++e){const t=s+e*w.strides[2],n=e*p.strideWidth-y;for(let e=0;e<m;++e){const s=n+e*x;if(s<0||s>=p.inWidth)continue;const r=a+e*h[1],i=o+s*p.inChannels;let l=t,u=r;for(let e=0;e<p.inChannels;++e){const t=I[i+e];for(let e=0;e<k;++e)S[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}const ep={kernelName:pt,backendName:"cpu",kernelFunc:Qd},tp={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;ah([r,a],"depthwiseConv2dNativeBackpropFilter");const h=_o(r.shape,c,o,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new yr(h.filterShape,"float32"),x=h.padInfo.left,b=h.padInfo.top,y=h.outChannels/h.inChannels,v=n.data.get(r.dataId).values,k=new yr(r.shape,r.dtype,v),w=n.data.get(a.dataId).values,I=new yr(a.shape,a.dtype,w);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/d)),n=Math.min(h.outHeight,(h.inHeight+b-e)/d);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((x-s)/p)),a=Math.min(h.outWidth,(h.inWidth+x-s)/p);for(let o=0;o<h.outChannels;++o){const i=Math.trunc(o/y),l=o%y;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-b;for(let e=r;e<a;++e){const n=s+e*p-x;u+=k.get(l,t,n,i)*I.get(l,c,e,o)}}g.set(u,e,s,i,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},np={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;ah([r,a],"depthwiseConv2DNativeBackpropInput");const h=le(r.shape),d=le(a.shape),p=_o(c,a.shape,o,i,l,u,!0),f=new yr(p.inShape,"float32"),m=f.values,[g,x,b]=f.strides,y=n.data.get(r.dataId).values,[v,k,w]=h,I=n.data.get(a.dataId).values,[N,S,$]=d,{batchSize:C,filterHeight:T,filterWidth:E,inChannels:R,inHeight:A,inWidth:_,outChannels:F,outHeight:D,outWidth:O,strideHeight:M,strideWidth:L}=p,B=T-1-p.padInfo.top,P=E-1-p.padInfo.left,z=F/R;for(let e=0;e<C;++e)for(let t=0;t<R;++t)for(let n=0;n<A;++n){const s=n-B,r=Math.max(0,Math.ceil(s/M)),a=Math.min(D,(T+s)/M);for(let o=0;o<_;++o){const i=o-P,l=Math.max(0,Math.ceil(i/L)),u=Math.min(O,(E+i)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=v*e+k*n+w*s,o=N*(T-1-r)+S*(E-1-(s*L-i))+$*t;for(let e=0;e<z;++e)c+=y[a+(t*z+e)]*I[o+e]}}m[g*e+x*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},sp={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=U(s.shape),a=n.data.get(s.dataId).values,o=Fa([r,r],s.dtype),i=o.values;for(let e=0;e<a.length;e++)i[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},rp={kernelName:xt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:o,dilations:i}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:x,outWidth:b,padInfo:y,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:$}=Eo(s.shape,r.shape,a,o,"NHWC",i),C=U($),T=$.length,E=Q(s.dtype,C);for(let e=0;e<p;++e)for(let t=0;t<x;++t){const n=t*v-y.top;for(let a=0;a<b;++a){const o=a*k-y.left;for(let i=0;i<g;++i){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<w;++t){const a=n+t*N;if(a>=0&&a<f)for(let n=0;n<I;++n){const p=o+n*S;if(p>=0&&p<m){const o=me([e,a,p,i],c,le(s.shape)),f=me([t,n,i],d,le(r.shape)),m=u[o]+h[f];m>l&&(l=m)}}}E[me([e,t,a,i],T,le($))]=l}}}return{dataId:l.write(rr(E,s.dtype),$,s.dtype),shape:$,dtype:s.dtype}}},ap={kernelName:yt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=ce(s.shape,u.data.get(s.dataId).values),h=ce(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:x,padInfo:b,strideHeight:y,strideWidth:v,filterHeight:k,filterWidth:w,dilationHeight:I,dilationWidth:N,outShape:S}=Eo(s.shape,r.shape,o,i,"NHWC",l);P(a.rank===S.length,(()=>`Error in ${yt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const $=ce(S,u.data.get(a.dataId).values),C=pe(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*y-b.top;for(let s=0;s<x;++s){const r=s*v-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<p)for(let n=0;n<w;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>o&&(o=r,i=t,l=n)}}}C[i][l][a]+=$[e][t][s][a]}}}return{dataId:u.write(rr(C,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},op={kernelName:bt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=ce(s.shape,u.data.get(s.dataId).values),h=ce(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:x,padInfo:b,strideHeight:y,strideWidth:v,filterHeight:k,filterWidth:w,dilationHeight:I,dilationWidth:N,outShape:S}=Eo(s.shape,r.shape,o,i,"NHWC",l);P(a.rank===S.length,(()=>`Error in ${bt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const $=ce(S,u.data.get(a.dataId).values),C=pe(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*y-b.top;for(let s=0;s<x;++s){const r=s*v-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,l=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<p)for(let n=0;n<w;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>o&&(o=r,i=s,l=u)}}}C[e][i][l][a]+=$[e][t][s][a]}}}return{dataId:u.write(rr(C,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},ip=gh(((e,t)=>e*t)),lp=Bh(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),up=Lh(gn,ip,lp),cp={kernelName:gn,backendName:"cpu",kernelFunc:up};function hp(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;let i;ah(r,"sum"),i="bool"===r.dtype?Oh({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):dh({inputs:{x:r},backend:n});const l=i.shape.length,u=Y(a,i.shape),c=Bi(u,l);let h=u,d=i;null!=c&&(d=ed({inputs:{x:i},backend:n,attrs:{perm:c}}),h=zi(h.length,l)),Li("sum",h,d.shape.length);const[p,f]=Oi(d.shape,h);let m=Ah(n,p,Ar(d.dtype,"int32"));const g=U(f),x=n.data.get(m.dataId).values,b=n.data.get(d.dataId).values;for(let e=0;e<x.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];x[e]=n}if(o){const e=m;m=Uh({inputs:{x:m},backend:n,attrs:{shape:Mi(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(d),m}const dp={kernelName:ts,backendName:"cpu",kernelFunc:hp},pp={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:o,summedDims:i,idDims:l}=Dc(r,a.length);Mc(o.length,l,a);const{path:u,steps:c}=Lc(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Oc(p,l[t]);let r;Bc(e)?r=a[t]:(r=ed({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const o=r.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);G(r.shape,o)||(r=Uh({inputs:{x:r},backend:n,attrs:{shape:o}}),f.push(r)),null===d?d=r:(d=up({inputs:{a:r,b:d},backend:n}),f.push(d))}e<h-1&&(u[e]>=0&&(d=hp({inputs:{x:d},backend:n,attrs:{axis:u[e]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},fp={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;ah([s,r],"eluGrad");const a=new Float32Array(U(r.shape)),o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];a[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},mp=gh(((e,t)=>e===t?1:0)),gp=Lh(St,mp,null,"bool"),xp={kernelName:St,backendName:"cpu",kernelFunc:gp},bp=gc,yp=xc,vp=bc,kp=yc,wp=vc,Ip=kc,Np={kernelName:Nt,backendName:"cpu",kernelFunc:lh(Nt,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+bp*n);return t*(1-((((Ip*s+wp)*s+kp)*s+vp)*s+yp)*s*Math.exp(-n*n))}))},Sp=Nh((e=>Math.exp(e))),$p=uh($t,Sp,"float32"),Cp={kernelName:$t,backendName:"cpu",kernelFunc:$p};function Tp(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,o=r.shape.length,i=r.shape.slice();let l=a;return a<0&&(P(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),i.splice(l,0,1),Uh({inputs:{x:r},backend:n,attrs:{shape:i}})}const Ep={kernelName:Ct,backendName:"cpu",kernelFunc:Tp},Rp=Nh((e=>Math.expm1(e))),Ap={kernelName:Tt,backendName:"cpu",kernelFunc:uh(Tt,Rp)},_p=gh(((e,t)=>e/t)),Fp=Lh(vt,_p),Dp={kernelName:vt,backendName:"cpu",kernelFunc:Fp},Op=gh(((e,t)=>e-t)),Mp=Bh(((e,t,n,s)=>({real:e-n,imag:t-s}))),Lp=Lh(gs,Op,Mp),Bp={kernelName:gs,backendName:"cpu",kernelFunc:Lp};function Pp(e,t,n){const s=e.shape,r=s[0],a=s[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[r,a],c=U(u),h=J("float32",c),d=J("float32",c);for(let e=0;e<r;e++){const s=vd({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=vd({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),o=Eh({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=zp(o,t,n),p=wc(u,c);for(let t=0;t<a;t++){const n=$c(p,t);h[e*a+t]=n.real,d[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o)}const p=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",d),m=Eh({inputs:{real:p,imag:f},backend:n});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}function zp(e,t,n){const s=U(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,o=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((i=s)&i-1)){const r=Wp(a,o,s,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",r.real),t=n.makeTensorInfo(i,"float32",r.imag),a=n.makeTensorInfo([],"float32",sr(s,"float32")),o=dh({inputs:{x:a},backend:n}),l=Dp.kernelFunc({inputs:{a:e,b:a},backend:n}),u=Dp.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,o=0;for(let s=0;s<t;s++){const i=Ec(r*s,t,n),l=$c(e,s);a+=l.real*i.real-l.imag*i.imag,o+=l.real*i.imag+l.imag*i.real}n&&(a/=t,o/=t),Cc(s,a,o,r)}return s}(wc(a,o),s,t);return Ic(e)}var i}function Wp(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=wc(e,t),o=n/2,i=Nc(a),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=Eh({inputs:{real:h,imag:d},backend:r}),f=Sc(a),m=f.real,g=f.imag,x=[m.length],b=r.makeTensorInfo(x,"float32",m),y=r.makeTensorInfo(x,"float32",g),v=Eh({inputs:{real:b,imag:y},backend:r}),k=Wp(l,u,o,s,r),w=k.real,I=k.imag,N=[w.length],S=r.makeTensorInfo(N,"float32",w),$=r.makeTensorInfo(N,"float32",I),C=Eh({inputs:{real:S,imag:$},backend:r}),T=Wp(m,g,o,s,r),E=T.real,R=T.imag,A=[E.length],_=r.makeTensorInfo(A,"float32",E),F=r.makeTensorInfo(A,"float32",R),D=Eh({inputs:{real:_,imag:F},backend:r}),O=Tc(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),B=r.makeTensorInfo(M,"float32",O.imag),P=Eh({inputs:{real:L,imag:B},backend:r}),z=up({inputs:{a:P,b:D},backend:r}),W=Wh({inputs:{a:C,b:z},backend:r}),V=Lp({inputs:{a:C,b:z},backend:r}),U=_h({inputs:{input:W},backend:r}),G=_h({inputs:{input:V},backend:r}),H=Fd({inputs:{input:W},backend:r}),j=Fd({inputs:{input:V},backend:r}),K=Od({inputs:[U,G],backend:r,attrs:{axis:0}}),q=Od({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(K.dataId).values,Y=r.data.get(q.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(q),{real:X,imag:Y}}const Vp={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=U(s.shape),a=s.shape[s.shape.length-1],o=Uh({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),i=Pp(o,!1,n),l=Uh({inputs:{x:i},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}};function Up(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,o=a||ae(r),i=Q(o,U(s));return function(e,t,n){e.fill(t)}(i,r),t.makeTensorInfo(s,o,i)}const Gp={kernelName:Rt,backendName:"cpu",kernelFunc:Up},Hp={kernelName:At,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=J(s.dtype,U(s.shape)),[o,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<o;e++){const t=e*l*i*u;for(let e=0;e<i;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let r=0;r<u;r++){const o=Math.round(l-e-1),i=t+n+s+r;let h=c[i];o>=0&&o<l&&(h=c[t+n+o*u+r]),a[i]=h}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},jp=Nh((e=>Math.floor(e))),Kp=uh(_t,jp),qp={kernelName:_t,backendName:"cpu",kernelFunc:Kp},Xp=gh(((e,t)=>Math.floor(e/t))),Yp=Lh(Ft,Xp,null,"int32"),Zp={kernelName:Ft,backendName:"cpu",kernelFunc:Yp},Jp={kernelName:Rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=Ld({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=Uh({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=Wh({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=Wh({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(p){const e=m;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const e=Uh({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=Th(n,m,p,e,f),n.disposeIntermediateTensorInfo(e)}else m=Th(n,m,p,i,f);n.disposeIntermediateTensorInfo(e)}return m}},Qp={kernelName:As,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=Qd({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const e=m;m=Wh({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=Th(n,m,p,i,f),n.disposeIntermediateTensorInfo(e)}return m}};function ef(e,t,n,s,r,a,o,i,l){const u=Fa([s,a],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<r;t++){const a=e[n*r+t];c+=a*o[t],s.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${s} does not index into ${i}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}const tf={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=U(s.shape),o=r.shape,i=o[o.length-1],[l,u,c,h]=cc(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const d=ef(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,i,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,d.values)}};function nf(e,t,n){const s=Fa(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],o=r[2],i=t.locToIndex([a,o]);r[2]=t.values[i];const l=e.locToIndex(r);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const sf={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:o,batchDims:i}=s;ah([r,a],"gatherV2");const l=Y(o,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let e=0;e<u.length;++e){const t=u[e];P(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=i;null==i&&(h=0);const d=U(a.shape),p=th(r,a,l,h),f=Uh({inputs:{x:r},backend:n,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),m=Uh({inputs:{x:a},backend:n,attrs:{shape:[p.batchSize,d/p.batchSize]}}),g=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],x=n.bufferSync(m),b=nf(n.bufferSync(f),x,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(p.outputShape,b.dtype,b.values)}},rf=gh(((e,t)=>e>t?1:0)),af=Lh(Lt,rf,null,"bool"),of={kernelName:Lt,backendName:"cpu",kernelFunc:af},lf=gh(((e,t)=>e>=t?1:0)),uf=Lh(Bt,lf,null,"bool"),cf={kernelName:Bt,backendName:"cpu",kernelFunc:uf},hf={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=U(s.shape),a=s.shape[s.shape.length-1],o=Uh({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),i=Pp(o,!0,n),l=Uh({inputs:{x:i},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}},df={kernelName:Vt,backendName:"cpu",kernelFunc:lh(Vt,(e=>Number.isFinite(e)?1:0),"bool")},pf={kernelName:Ut,backendName:"cpu",kernelFunc:lh(Ut,(e=>Math.abs(e)===1/0?1:0),"bool")},ff={kernelName:Gt,backendName:"cpu",kernelFunc:lh(Gt,(e=>Number.isNaN(e)?1:0),"bool")},mf=gh(((e,t)=>e<t?1:0)),gf=Lh(jt,mf,null,"bool"),xf={kernelName:jt,backendName:"cpu",kernelFunc:gf},bf=gh(((e,t)=>e<=t?1:0)),yf=Lh(Kt,bf,null,"bool"),vf={kernelName:Kt,backendName:"cpu",kernelFunc:yf};function kf(e,t,n){const s=(t-e)/(n-1),r=de(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const wf={kernelName:qt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,o=kf(s,r,a);return t.makeTensorInfo([o.length],"float32",o)}},If=Nh((e=>Math.log(e))),Nf=uh(Xt,If),Sf={kernelName:Xt,backendName:"cpu",kernelFunc:Nf},$f=lh(Yt,(e=>Math.log1p(e))),Cf={kernelName:Yt,backendName:"cpu",kernelFunc:$f},Tf=gh(((e,t)=>e&&t)),Ef=Lh(Zt,Tf,null,"bool"),Rf={kernelName:Zt,backendName:"cpu",kernelFunc:Ef},Af=lh(Jt,(e=>e?0:1),"bool"),_f={kernelName:Jt,backendName:"cpu",kernelFunc:Af},Ff={kernelName:Qt,backendName:"cpu",kernelFunc:Lh(Qt,gh(((e,t)=>e||t)),null,"bool")},Df={kernelName:en,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=s;ah(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,d=U(r.shape),p=new Float32Array(d);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<d;e++){const t=f(e),n=h[e]*Math.pow(o+i*t,-l);p[e]=n}return n.makeTensorInfo(r.shape,r.dtype,p)}},Of={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;ah(o,"LRNGrad");const h=U(o.shape),d=o.shape[3],p=n.data.get(o.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),x=h;for(let e=0;e<x;e++){const t=e%d,n=e-t+Math.max(0,t-i),s=e-t+Math.min(d,t+i+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=p[e],g[t]+=n}}return n.makeTensorInfo(o.shape,r.dtype,g)}};function Mf(e,t,n,s){const r=J(s,U(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>a)&&(a=t)}r[n]=a}return r}function Lf(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:o}=s,i=n;let l=r.shape;const u=l.length,c=Y(a,l);let h=c;const d=Bi(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[d[t]];p=Qh(p,l,r.dtype,d,e),h=zi(h.length,u),l=e}ah(r,"max"),Li("max",h,u);const[f,m]=Oi(l,h),g=Mf(p,U(m),f,r.dtype),x=i.write(g,f,r.dtype);let b=f;return o&&(b=Mi(f,c)),{dataId:x,shape:b,dtype:r.dtype}}const Bf={kernelName:nn,backendName:"cpu",kernelFunc:Lf},Pf=gh(((e,t)=>Math.max(e,t))),zf=Lh(sn,Pf),Wf={kernelName:sn,backendName:"cpu",kernelFunc:zf},Vf={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;ah(r,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;P(zo(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Ro(r.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&G(u.inShape,u.outShape))c=dh({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=le(r.shape),s=hd(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},Uf={kernelName:on,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;ah(r,"maxPool3d");const c=Ao(r.shape,a,o,1,i,l,u),h=pd(n.data.get(r.dataId).values,r.shape,r.dtype,le(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},Gf={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;ah([r,a],"maxPool3DGrad");const c=Ao(a.shape,o,i,1,l,u),h=function(e,t){const n=Fa(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){const b=x*s-d;let y=b;for(;y<0;)y+=o;const v=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-p;let d=u;for(;d<0;)d+=i;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const p=r*a-f;let w=p;for(;w<0;)w+=l;const I=Math.min(t.inWidth,h+p);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=y;t<v;t+=o){const n=t-b;for(let s=d;s<k;s+=i){const r=s-u;for(let a=w;a<I;a+=l){const o=a-p,i=e.get(m,t,s,a,g);i>=N&&(N=i,S=n*c*h+r*c+o)}}}n.set(S,m,x,s,r,g)}}}return n}(n.bufferSync(a),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,y=c.effectiveFilterHeight,v=c.effectiveFilterWidth,k=b-1-c.padInfo.front,w=v-1-c.padInfo.left,I=y-1-c.padInfo.top,N=Fa(a.shape,"float32"),S=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-k,o=s-I,i=r-w;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/d;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<y;r+=g){const a=(o+r)/p;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let o=0;o<v;o+=x){const u=(i+o)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const d=b*y*v-1-h.get(e,s,a,u,t)===n*y*v+r*v+o?1:0;0!==d&&(l+=S.get(e,s,a,u,t)*d)}}}N.set(l,e,n,s,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},Hf={kernelName:an,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:o}=t,i=a;ah([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Ro(i.shape,l,u,1,c,h),p=n.data.get(i.dataId).values,f=Fa(d.outShape,i.dtype,dd(p,i.shape,i.dtype,d).values),m=d.strideHeight,g=d.strideWidth,x=d.dilationHeight,b=d.dilationWidth,y=d.effectiveFilterHeight,v=d.effectiveFilterWidth,k=v-1-d.padInfo.left,w=y-1-d.padInfo.top,I=Fa(i.shape,"float32"),N=n.data.get(r.dataId).values,S=Fa(r.shape,"float32",N);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let s=0;s<d.inWidth;++s){const r=n-w,a=s-k;let o=0;for(let n=0;n<y;n+=x){const s=(r+n)/m;if(!(s<0||s>=d.outHeight||Math.floor(s)!==s))for(let r=0;r<v;r+=b){const i=(a+r)/g;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const l=y*v-1-f.get(e,s,i,t)===n*v+r?1:0;0!==l&&(o+=S.get(e,s,i,t)*l)}}I.set(o,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},jf={kernelName:un,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;ah(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Ro(s.shape,r,a,[1,1],o),[h,d]=function(e,t,n,s,r){const a=hd(e,0,n,le(t),r,"max"),o=dd(e,t,n,r,!0,s);return[a.values,o.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},Kf={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=Y(a,r.shape),l=U(Oi(r.shape,i)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=Oh({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const d=Fp({inputs:{a:h,b:c},backend:n});u.push(d);const p=hp({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:o}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},qf={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;ah(r,"min");const i=Y(a,r.shape);let l=i;const u=Bi(l,r.shape.length);let c=r;null!=u&&(c=ed({inputs:{x:r},backend:n,attrs:{perm:u}}),l=zi(l.length,r.shape.length)),Li("min",l,c.shape.length);const[h,d]=Oi(c.shape,l),p=U(d),f=de(U(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=Uh({inputs:{x:g},backend:n,attrs:{shape:Mi(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},Xf=gh(((e,t)=>Math.min(e,t))),Yf=Lh(dn,Xf),Zf={kernelName:dn,backendName:"cpu",kernelFunc:Yf},Jf={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:o}=s;ah(r,"mirrorPad");const i=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===o?0:1,h=n.data.get(r.dataId).values,d=r.shape.length,p=le(r.shape),f=U(i),m=i.length,g=le(i),x=J(r.dtype,f);for(let e=0;e<f;e++){let t=ge(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=me(t,d,p);x[e]=h[n]}return{dataId:n.write(x,i,r.dtype),shape:i,dtype:r.dtype}}},Qf={kernelName:fn,backendName:"cpu",kernelFunc:Lh(fn,gh(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})))};function em(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,o=r.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=Y([i],r.shape),u=Lf({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Mi(u.shape,l),h=Uh({inputs:{x:u},backend:n,attrs:{shape:c}}),d=Lp({inputs:{a:r,b:h},backend:n}),p=$p({inputs:{x:d},backend:n}),f=hp({inputs:{x:p},backend:n,attrs:{axis:l,keepDims:!1}}),m=Uh({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Fp({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const tm={kernelName:rs,backendName:"cpu",kernelFunc:em},nm={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:o,normalized:i}=s;ah(r,"multinomial");const l=i?r:em({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,d=[u,a],p=de(U(d),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=ol.alea(o.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();p[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){p[r+e]=s;break}}}return i||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",p)}};function sm(e,t,n){const s=sr(-1,n);return ip([],t,s,e,n)}const rm={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;ah(s,"neg");const r=n.data.get(s.dataId).values,[a,o]=sm(r,s.shape,s.dtype);return n.makeTensorInfo(o,s.dtype,a)}},am=cu,om={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s;ah(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=am(u,c,o,i,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},im=hu,lm={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;ah(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=im(c,h,o,i,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},um=du,cm={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;ah(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,d=o,p=i,f=l,m=u,{selectedIndices:g,selectedScores:x}=um(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}},hm=gh(((e,t)=>e!==t?1:0)),dm=Lh(bn,hm,null,"bool"),pm={kernelName:bn,backendName:"cpu",kernelFunc:dm},fm={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:o,onValue:i,offValue:l}=s;ah(r,"oneHot");const u=U(r.shape),c=new Float32Array(u*o);c.fill(l);const h=n.data.get(r.dataId).values;for(let e=0;e<u;++e)h[e]>=0&&h[e]<o&&(c[e*o+h[e]]=i);return n.makeTensorInfo([...r.shape,o],a,c)}};function mm(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=_h({inputs:{input:s},backend:n}),t=mm({inputs:{x:e},backend:n}),r=Fd({inputs:{input:s},backend:n}),a=mm({inputs:{x:r},backend:n}),o=Eh({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),o}return Up({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const gm={kernelName:$s,backendName:"cpu",kernelFunc:mm},xm={kernelName:wn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=_h({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Fd({inputs:{input:r},backend:s}),o=mm({inputs:{x:a},backend:s}),i=Eh({inputs:{real:n,imag:o},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o),i}return Up({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function bm(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return Tp({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{z(a,e.shape,"All tensors passed to stack must have matching shapes"),P(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=Od({inputs:t.map((e=>{const t=Tp({inputs:{input:e},backend:n,attrs:{dim:r}});return i.push(t),t})),backend:n,attrs:{axis:r}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const ym={kernelName:Nn,backendName:"cpu",kernelFunc:bm},vm={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:o}=s;ah(r,"pad");const i=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=U(r.shape),h=r.shape.length,d=le(r.shape),p=U(i),f=i.length,m=le(i),g=J(r.dtype,p);0!==o&&g.fill(o);for(let e=0;e<c;e++)g[me(ge(e,h,d).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,i,r.dtype),shape:i,dtype:r.dtype}}},km=gh(((e,t)=>Math.pow(e,t))),wm=Lh($n,km),Im={kernelName:$n,backendName:"cpu",kernelFunc:wm};function Nm(e,t,n,s){const[r,a]=Oi(e,s),o=Ar(t,"int32"),i=de(U(r),o),l=U(a);for(let e=0;e<i.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];i[e]=s}return{outVals:i,outShape:r,outDtype:o}}const Sm={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;ah(r,"prod");const i=r.shape.length,l=Y(a,r.shape),u=Bi(l,i);let c=l,h=r;const d=[];null!=u&&(h=ed({inputs:{x:r},backend:n,attrs:{perm:u}}),d.push(h),c=zi(c.length,i));const p=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=Nm(h.shape,h.dtype,p,c);let x=m;return o&&(x=Mi(m,l)),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(x,g,f)}};function $m(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function Cm(e,t,n,s,r,a,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const r=ge(s,t.length,le(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}}))}(a,o,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:h}=function(e,t,n,s){const r=[];let a=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],r=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)i[e].push(t*n)}for(let s=0;s<e.length;++s){let o=e[s],l=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],r=e+t.length-1;if(r>=0){const e=i[r],t=e[e.length-1]-s[o];for(let e=o;e<l;++e)i[r].push(s[e+1]+t)}o=s[o],l=s[l]}l!==o&&(r.push([o,l]),a+=l-o)}return{outSplits:i,valueSlices:r,numValues:a}}(a,o,e,l),d=function(e){const t=[];for(let n=0;n<e.length;++n){const s=Q("int32",e[n].length);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(u),p=function(e,t,n,s,r){const a=t.slice();a[0]=r;const o=Q(n,U(a)),i=e.length;return function(e,t,n,s,r,a){const o=$m(t,2)[1],i=$m(a,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)r[l*i+t]=e[n*o+t];++l}}(e,t,s,0===i?0:i/t[0],o,a),[o,a]}(n,s,r,c,h);return[d,p[0],p[1]]}const Tm={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=s,l=r.map((e=>n.data.get(e.dataId).values)),u=r.map((e=>e.shape)),c=n.data.get(a.dataId).values,h=n.data.get(o.dataId).values,[d,p,f]=Cm(l,u,c,a.shape,a.dtype,h,o.shape),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}};var Em=Zu;class Rm{constructor(e,t,n,s,r,a,o,i,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=r,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=Qu(u),this.raggedRank=ec(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Em.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Em.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Em.VALUE_ROWIDS:return Rm.getMaxWidthValueRowID(t);case Em.ROW_SPLITS:return Rm.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Em[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],r=0;for(let a=1;a<t;++a){const t=e[a];t!==s&&(s=t,r=Math.max(a-n,r),n=a)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return _m(e,n)}calculateOutputSize(e){const t=this.valuesShape;tc(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=Ju(this.raggedRank,n,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),r=[];let a=0;for(let e=0;e<s;++e,a+=t)r.push(a);for(let t=s;t<e;++t)r.push(-1);return P(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,s){const r=e.length,a=[];for(let o=0;o<r-1;++o){const r=e[o+1]-e[o];let i=Math.min(s,r),l=t[o];-1===l&&(i=0);for(let e=0;e<i;++e)a.push(l),l+=n;for(let e=0;e<r-i;++e)a.push(-1)}if(r>0&&a.length!==e[r-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,s){const r=e.length,a=[];if(0===r)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let l=t[i];a.push(l);for(let u=1;u<r;++u){const r=e[u];if(r===i)l>=0&&(++o,o<s?l+=n:l=-1);else{if(o=0,i=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);l=t[r]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,s){const r=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case Em.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,s);case Em.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,s);default:throw new Error(`Unsupported partition type: ${Em[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Em.FIRST_DIM_SIZE:return e[0];case Em.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Em.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Em[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const s=_m(t,!1),r=Q(this.valuesDType,U(s));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)a=this.calculateOutputIndex(e-1,a,n[e],t[e]);this.setOutput(this.raggedRank,a,r,s)}return[s,r]}setOutput(e,t,n,s){if(0===n.length)return;const r=this.values,a=n;let o=s.slice();o=o.slice(e+1);const i=U(o),l=t.length;let u=this.defaultValue;if(u.length!==i&&1!==u.length){const e=this.defaultValueShape;xo((()=>{const t=Uo(u,e),n=Yo(t,o);u=n.dataSync()}))}let c=0,h=0,d=0;for(let e=0;e<=l;++e){let s=e<l?t[e]:-1;if(s!==d){if(h<d){const e=r.subarray(c*i);Am(a.subarray(h*i),e,(d-h)*i)}if(e>=l){const e=n.length;s=Math.floor(e/i)}if(s>d)if(1===this.defaultValue.length)a.subarray(d*i,s*i).fill(this.defaultValue[0]),d=s;else for(;s>d;)Am(a.slice(d*i),u,i),++d;s<0?(c=e+1,h=d):(c=e,h=d,d=h+1)}else++d}}}function Am(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function _m(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function Fm(e,t,n,s,r,a,o,i,l,u){return new Rm(e,t,n,s,r,a,o,i,l,u).compute()}const Dm={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(o.dataId).values,d=i.map((e=>n.data.get(e.dataId).values)),p=i.map((e=>e.shape)),[f,m]=Fm(u,r.shape,c,a.shape,a.dtype,h,o.shape,d,p,l);return n.makeTensorInfo(f,a.dtype,m)}};function Om(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return de(0,s);const r=de(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const Mm={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:o}=n,i=Om(s,r,o,a);return t.makeTensorInfo([i.length],a,i)}},Lm={kernelName:Fn,backendName:"cpu",kernelFunc:lh(Fn,(e=>1/e))},Bm={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s;ah(r,"resizeBilinear");const l=le(r.shape),[u,c]=i,[h,d,p,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(U([h,u,c,f])),x=[a&&u>1?d-1:d,a&&c>1?p-1:p],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let y=0;const v=x[0]/b[0],k=x[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=o?v*(t+.5)-.5:v*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(d-1,Math.ceil(n)),i=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(p-1,Math.ceil(t)),c=i+n*l[2],h=u+n*l[2],d=i+a*l[2],x=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[d+e]-t)*s,o=a+(n+(m[x+e]-n)*s-a)*r;g[y++]=o}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}},Pm={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:o}=s;ah([a,r],"resizeBilinearGrad");const i=le(r.shape),[l,u,c,h]=r.shape,[,d,p]=a.shape,f=new Float32Array(l*u*c*h),m=[o&&d>1?u-1:u,o&&p>1?c-1:c],g=[o&&d>1?d-1:d,o&&p>1?p-1:p],x=m[0]/g[0],b=m[1]/g[1],y=n.data.get(a.dataId).values;let v=0;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<d;e++){const n=e*x,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*i[1],o=t+r*i[1],l=n-s,d=1-l;for(let e=0;e<p;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,p=a+n*i[2],m=a+s*i[2],g=o+n*i[2],x=o+s*i[2],k=d*u,w=d*r,I=l*u,N=l*r;for(let e=0;e<h;e++){const t=y[v++];f[p+e]+=t*k,f[m+e]+=t*w,f[g+e]+=t*I,f[x+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},zm={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s;ah(r,"resizeNearestNeighbor");const l=le(r.shape),[u,c]=i,[h,d,p,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),x=[a&&u>1?d-1:d,a&&c>1?p-1:p],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],y=x[0]/b[0],v=x[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=o?y*(e+.5):y*e;let s=Math.min(d-1,a?Math.round(n):Math.floor(n));o&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=o?v*(e+.5):v*e;let n=Math.min(p-1,a?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}},Wm={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:o}=s;ah([a,r],"resizeNearestNeighborGrad");const i=le(r.shape),l=le(a.shape),[u,c,h,d]=r.shape,[,p,f]=a.shape,m=new Float32Array(u*c*h*d),g=n.data.get(a.dataId).values,x=[o&&p>1?c-1:c,o&&f>1?h-1:h],b=[o&&p>1?p-1:p,o&&f>1?f-1:f],y=x[0]/b[0],v=x[1]/b[1],k=1/y,w=1/v,I=2*Math.ceil(k)+2,N=2*Math.ceil(w)+2;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],s=Math.floor(e*k),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*i[2],u=Math.floor(s*w),x=Math.floor(u-N/2);for(let n=0;n<d;n++){let i=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=p)continue;const d=t+u*l[1],m=u*y;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+x;if(t<0||t>=f)continue;const r=d+t*l[2],a=t*v;s===Math.min(h-1,o?Math.round(a):Math.floor(a))&&(i+=g[r+n])}}m[a+n]=i}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}},Vm={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;ah(r,"reverse");const o=r.shape.length,i=Y(a,r.shape);if(0===o)return dh({inputs:{x:r},backend:n});const l=new yr(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Um={kernelName:Ts,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:o}=t,i=n,l=J(s.dtype,U(s.shape)),[u,c,h,d]=s.shape,[p,f]=rc(o,c,h),m=Math.sin(r),g=Math.cos(r),x=i.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*d;for(let e=0;e<c;e++){const n=e*(h*d);for(let s=0;s<h;s++){const r=s*d;for(let o=0;o<d;o++){const i=[u,e,s,o],b=i[2],y=i[1];let v=(b-p)*g-(y-f)*m,k=(b-p)*m+(y-f)*g;v=Math.round(v+p),k=Math.round(k+f);let w=a;"number"!=typeof a&&(w=3===o?255:a[o]),v>=0&&v<h&&k>=0&&k<c&&(w=x[t+k*(h*d)+v*d+o]),l[t+n+r+o]=w}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Gm=lh(Vn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),Hm={kernelName:Vn,backendName:"cpu",kernelFunc:Gm},jm=Nh((e=>1/Math.sqrt(e))),Km=uh(Un,jm),qm={kernelName:Un,backendName:"cpu",kernelFunc:Km};function Xm(e,t,n,s,r,a,o,i,l,u){const c=[s/r,r],h=e.values,d=t.values;if(0===s)return Fa(n,t.dtype);const p=Fa(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<o;t++){const n=h[e*o+t];a.push(n),l+=n*i[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?p.values[l*r+n]+=d[e*r+n]:p.values[l*r+n]=0===t.rank?d[0]:d[e*r+n]}return p}const Ym={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=pc(0,r,o),d=Xm(n.bufferSync(r),n.bufferSync(a),o,h,u,l,i,c,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}};function Zm(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function Jm(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const Qm={kernelName:Hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:o}=s,i=function(e,t,n,s,r,a){const o=Q("int32",n*r);for(let i=0;i<n;++i){const n=e.slice(i*s,(i+1)*s),l=i*r;for(let e=0;e<r;++e)o[l+e]="left"===a?Zm(n,t[e+l]):Jm(n,t[e+l])}return o}(n.data.get(r.dataId).values,n.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],o);return n.makeTensorInfo(a.shape,"int32",i)}},eg={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;ah([s,r,a],"select");const o=s.shape.length,i=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=Ar(r.dtype,a.dtype),h=de(U(r.shape),c);let d=0;const p=0===o||o>1||1===r.shape.length?1:U(r.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<p;t++)1===i[e]?h[d++]=l[e]:h[d++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},tg=fc,ng=mc,sg=lh(Kn,(e=>e>=0?ng*e:tg*(Math.exp(e)-1))),rg={kernelName:Kn,backendName:"cpu",kernelFunc:sg},ag={kernelName:Zn,backendName:"cpu",kernelFunc:lh(Zn,(e=>e<0?-1:e>0?1:0))},og=lh(Xn,(e=>Math.sin(e))),ig={kernelName:Xn,backendName:"cpu",kernelFunc:og},lg=lh(Yn,(e=>Math.sinh(e))),ug={kernelName:Yn,backendName:"cpu",kernelFunc:lg},cg=Math.log(1.1920928955078125e-7)+2,hg=lh(Qn,(e=>{const t=e>-cg,n=e<cg,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),dg={kernelName:Qn,backendName:"cpu",kernelFunc:hg},pg={kernelName:ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:o}=s;ah([r],"spaceToBatchND");const i=U(a),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=vm.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=ac(u.shape,a,i,!1),h=oc(c.length,a.length,!1),d=ic(u.shape,a,i,!1),p=Uh({inputs:{x:u},backend:n,attrs:{shape:c}}),f=ed({inputs:{x:p},backend:n,attrs:{perm:h}}),m=Uh({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};function fg(e,t,n,s,r,a,o){const i=t[0],l=a[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(Wc(i));return[Q(n,0),[0,h],Q(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*h];if(n<0)throw new Error(Vc(t,n));if(n>=l)throw new Error(Uc(t,n,l));++f[n],d=d&&n>=p,p=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){const t=e,n=s;for(let e=0;e<i;++e)c[e]=e;return[t,[i,h],n,u,c]}{const t=f[l-1],a=Q(n,t*h),d=Q(r,t),p=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*h],r=p[n],o=(0===n?0:f[n-1])+r;p[n]++;for(let n=0;n<h;++n)a[o*h+n]=e[t*h+n];d[o]=s[t],c[t]=o}for(let e=0;e<l;++e)if(0===p[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;d[t]=o}return[a,[t,h],d,u,c]}}const mg={kernelName:as,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values[0],[h,d,p,f,m]=fg(i,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function gg(e,t,n,s,r){const a=U(s),o=t[0],i=r.length,l=[];let u=1,c=-1;for(let e=0;e<i;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(Gc(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(Hc(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/u);if(u*e!==a)throw new Error(Kc(s,l));l[c]=e}if(U(l)!==a)throw new Error(qc(s,l));const h=s.length,d=[];if(h>0){d[h-1]=1;for(let e=h-2;e>=0;--e)d[e]=d[e+1]*s[e+1]}const p=[];if(i>0){p[i-1]=1;for(let e=i-2;e>=0;--e)p[e]=p[e+1]*l[e+1]}const f=Q(n,o*i);for(let t=0;t<o;++t){let n=0;for(let s=0;s<h;++s)n+=e[t*h+s]*d[s];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/p[e]),n%=p[e]}return[f,[o,i],l]}const xg={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.data.get(r.dataId).values),i=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=gg(i,s.shape,s.dtype,o,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function bg(e,t,n,s,r,a=!1,o=0){const i=s.length,l=[t[0],e.length/t[0]],u=l[1],c=i>0?r[i-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const d=Q(n,h.reduce(((e,t)=>e*t),1));if(0===i)return c>0&&d.fill(o),[d,h];if(c<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,m=0,g=r[p];for(;;){let t=0;if(f<i){if(t=r[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(Zc(g,c));g>m&&d.fill(o,m*u,g*u);for(let t=p;t<f;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(Jc(t,s[t],l[0]));for(let t=0;t<u;t++)d[g*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[g*u+e]/=f-p;if(p=f,++f,m=g+1,g=t,f>i)break}return m<c&&d.fill(o,m*u,c*u),[d,h]}const yg={kernelName:is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=bg(o,s.shape,s.dtype,i,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},vg={kernelName:ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=bg(o,s.shape,s.dtype,i,l);return n.makeTensorInfo(c,s.dtype,u)}},kg={kernelName:us,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=pc(0,r,i),p=!1,f=n.bufferSync(r);let m;switch(a.dtype){case"bool":m=Xm(f,n.bufferSync(a),i,d,c,u,l,h,Boolean(n.data.get(o.dataId).values[0]),p);break;case"float32":case"int32":m=Xm(f,n.bufferSync(a),i,d,c,u,l,h,n.data.get(o.dataId).values[0],p);break;case"string":m=Xm(f,n.bufferSync(a),i,d,c,u,l,h,ir(n.data.get(o.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}},wg={kernelName:ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:o}=s,i=Y(o,r.shape)[0],l=zc(r,a,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[i]=e;const s=vd({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[i]+=e,s}))}},Ig=Nh((e=>Math.sqrt(e))),Ng=lh(es,(e=>Math.sqrt(e))),Sg={kernelName:es,backendName:"cpu",kernelFunc:Ng},$g={kernelName:hs,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;ah(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Cg=gh(((e,t)=>{const n=e-t;return n*n})),Tg=Lh(cs,Cg),Eg={kernelName:cs,backendName:"cpu",kernelFunc:Tg},Rg=lh(Cs,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),Ag={kernelName:Cs,backendName:"cpu",kernelFunc:Rg};function _g(e,t,n,s){const r=Fa(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+s[e];r.set(t.get(...o),...a)}return r}const Fg={kernelName:ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;ah(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:x,begin:b,end:y,strides:v}=uo(r.shape,a,o,i,l,u,c,h,d);let k;if(m)k=Uh({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||x){P(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=Ya(b,y,v),t=vd({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});k=Uh({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=_g(p,n.bufferSync(r),v,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class Dg{constructor(e,t,n,s,r,a){this.separator=or(e),this.nGramWidths=t,this.leftPad=or(n),this.rightPad=or(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let o=0;o<r;++o){const i=this.getPadWidth(a),l=Math.max(0,i-o),u=Math.max(0,i-(r-(o+1))),c=a-(l+u),h=t+(l>0?0:o-i);let d=0;d+=l*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=u*this.rightPad.length,d+=(l+u+c-1)*this.separator.length,n[s+o]=new Uint8Array(d);const p=n[s+o];let f=0;const m=e=>e.forEach((e=>p[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=Q("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),a[e]=a[e-1]+s}const o=new Array(a[r]);for(let n=0;n<r;++n){const s=t[n];let r=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,a);this.createNGrams(e,s,o,r,l,a),r+=l})),this.preserveShort&&r===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,l=1;this.createNGrams(e,s,o,r,l,i)}}return[o,a]}}function Og(e,t,n,s,r,a,o,i){return new Dg(n,s,r,a,o,i).compute(e,t)}const Mg={kernelName:ps,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,m]=Og(d,p,r,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function Lg(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function Bg(e,t,n){const s=e.length,r=[];let a=0,o=0;const i=new Array(s);for(let l=0;l<s;++l){const s=r.length;Lg(e[l],t,n,r);const u=r.length-s;i[l]=u,a+=u,o=Math.max(o,u)}const l=Q("int32",2*a),u=new Array(a),c=[s,o];let h=0;for(let e=0;e<s;++e)for(let t=0;t<i[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=r[h],++h;return[l,u,c]}const Pg={kernelName:fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values[0],[u,c,h]=Bg(i,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function zg(e,t){const n=Q("int32",e.length);for(let s=0;s<e.length;++s)n[s]=nr(e[s]).modulo(t).getLowBitsUnsigned();return n}const Wg={kernelName:ms,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const o=zg(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",o)}},Vg={kernelName:xs,backendName:"cpu",kernelFunc:lh(xs,(e=>Math.tan(e)))},Ug=lh(bs,(e=>Math.tanh(e)));function Gg(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=Fa(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const Hg=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function jg(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,o=Math.log(r),i=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*i*(r-i)/r)*Math.sign(a-r/2);jg(e,t,Math.max(n,Math.floor(t-a*i/r+l)),Math.min(s,Math.floor(t+(r-a)*i/r+l)))}const r=e[t];let a=n,o=s;for(B(e,n,t),Hg(e[s],r)>0&&B(e,n,s);a<o;){for(B(e,a,o),a++,o--;Hg(e[a],r)<0;)a+=1;for(;Hg(e[o],r)>0;)o-=1}0===Hg(e[n],r)?B(e,n,o):(o+=1,B(e,o,s)),o<=t&&(n=o+1),t<=o&&(s=o-1)}}function Kg(e,t,n,s,r){const a=t[t.length-1],[o,i]=[e.length/a,a],l=J(n,o*s),u=J("int32",o*s);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),s<o.length&&(jg(o,s),o=o.slice(0,s)),r&&o.sort(Hg);const c=t*s,h=l.subarray(c,c+s),d=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=o[e].value,d[e]=o[e].index}const c=t.slice();return c[c.length-1]=s,[Fa(c,n,l),Fa(c,"int32",u)]}const qg={kernelName:ks,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=n,[c,h,d,p]=r.shape,[f,m]=null!=u?u:[h,d],g=[c,f,m,p],x=le(r.shape),b=x[0],y=x[1],v=x[2],k=le(g),w=k[0],I=k[1],N=k[2],S=J(r.dtype,U(g));S.fill(l);const $=s.data.get(r.dataId).values,C=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let r=0;r<p;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,p=(t[3]*s+t[4]*n+t[5])/u,f=Xg(c,d,i),m=Xg(p,h,i);switch(o){case"nearest":a=Zg($,h,d,b,y,v,e,m,f,r,l);break;case"bilinear":a=Jg($,h,d,b,y,v,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}S[e*w+n*I+s*N+r]=a}return s.makeTensorInfo(g,r.dtype,S)}return{dataId:s.write(S,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function Xg(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return M(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return M(0,n,t-1)}(e,t);case"nearest":return function(e,t){return M(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function Yg(e,t,n,s,r,a,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<n?e[o*s+i*r+l*a+u]:c}function Zg(e,t,n,s,r,a,o,i,l,u,c){return Yg(e,t,n,s,r,a,o,Math.round(i),Math.round(l),u,c)}function Jg(e,t,n,s,r,a,o,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*Yg(e,t,n,s,r,a,o,h,d,u,c)+(l-d)*Yg(e,t,n,s,r,a,o,h,f,u,c))+(i-h)*((f-l)*Yg(e,t,n,s,r,a,o,p,d,u,c)+(l-d)*Yg(e,t,n,s,r,a,o,p,f,u,c))}function Qg(e,t,n,s){const r=Y(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const o={},i=new Int32Array(n[r]),l=new yr(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(o).length;const d=new yr(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)d.set(l.get(n,e,s),n,t,s)}));const p=n.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const ex={kernelName:Ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:o}=s;ah(r,"unsortedSegmentSum");const i=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=Tp({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<o;++e){const t=sr(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=gp({inputs:{a:s,b:c},backend:n}),o=Oh({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=up({inputs:{a:o,b:r},backend:n}),h=hp({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});i.push(h),l.push(s),l.push(a),l.push(o),l.push(u),l.push(h)}const h=bm({inputs:i,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},tx=[Kh,Xh,Yh,Zh,Vh,Jh,nd,sd,rd,ad,od,id,ld,ud,cd,fd,md,gd,xd,jh,bd,wd,Sd,$d,Mh,Td,Rd,Rh,Ad,Md,Bd,Pd,zd,Wd,Vd,Ud,Hd,Kd,qd,Xd,Yd,Zd,Jd,ep,tp,np,sp,rp,ap,op,pp,hh,fp,xp,Np,Cp,Ep,Ap,Vp,Gp,Hp,qp,Zp,Jp,Qp,tf,sf,of,cf,ph,hf,Dd,df,pf,ff,mh,xf,vf,wf,Sf,Cf,Rf,_f,Ff,Df,Of,Bf,Wf,Vf,Uf,Gf,Hf,jf,Kf,qf,Zf,Jf,Qf,nm,cp,rm,om,lm,cm,pm,fm,xm,ym,vm,Im,yh,Sm,Tm,Dm,Mm,Fh,Dp,Lm,kh,Ih,Gh,Bm,Pm,zm,Wm,Vm,Um,Hm,qm,Ym,Qm,eg,rg,Ch,ag,ig,ug,kd,tm,dg,pg,mg,xg,yg,vg,kg,wg,Sg,$g,Eg,Ag,Fg,Mg,Pg,Wg,Bp,dp,Vg,{kernelName:bs,backendName:"cpu",kernelFunc:Ug},{kernelName:ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;ah(r,"tile");const o=Gg(n.bufferSync(r),a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:vs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:o}=s;ah(r,"topk");const i=n.data.get(r.dataId).values,[l,u]=Kg(i,r.shape,r.dtype,a,o);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},qg,td,{kernelName:Is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;ah(a,"unique");const o=s.data.get(a.dataId).values,{outputValues:i,outputShape:l,indices:u}=Qg(o,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const o=r.shape.length,i=r.shape[a],l=new Array(o-1);let u=0;for(let e=0;e<o;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(o).fill(0),h=r.shape.slice();h[a]=1;const d=new Array(i);for(let e=0;e<d.length;e++){c[a]=e;const t=vd({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});d[e]=Uh({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return d}},ex,gm];for(const e of tx)Ps(e);const nx={},sx={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function rx(e,t){if(!(e in nx)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete nx[e]}),!1),ke().getBool("SOFTWARE_WEBGL_ENABLED")&&(sx.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",sx)||n.getContext("experimental-webgl",sx):n.getContext("webgl2",sx)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;nx[e]=n}const n=nx[e];return null==n||n.isContextLost()?(delete nx[e],rx(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),nx[e])}var ax,ox,ix;function lx(e,t){return[t,e]}function ux(e){const t=U(e);return j(Math.ceil(t/4))}function cx(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function hx(e,t){const n=e;let s,r,a,o,i,l,u,c,h,d;return 2===ke().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,u=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function dx(e,t){const n=t();return ke().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function px(e){return!!(ke().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function fx(e,t){return Ix(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(ax||(ax={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(ox||(ox={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(ix||(ix={}));const mx=/ERROR: [0-9]+:([0-9]+):/g;function gx(e,t){const n=mx.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,o=r.map(((e,t)=>K((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const l=o.slice(0,s-1),u=o.slice(s-1,s),c=o.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${K(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function xx(e,t){if(dx(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function bx(e,t,n,s,r,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(dx(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),dx(e,(()=>e.vertexAttribPointer(i,r,e.FLOAT,!1,a,o))),dx(e,(()=>e.enableVertexAttribArray(i))),!0)}function yx(e,t,n,s){dx(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),dx(e,(()=>e.activeTexture(e.TEXTURE0+n))),dx(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),dx(e,(()=>e.uniform1i(n,s)))}function vx(e,t,n){dx(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),dx(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function kx(e,t){dx(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),dx(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function wx(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Ix(e,t,n){const s=dx(e,(()=>t()));if(null==s)throw new Error(n);return s}function Nx(e,t=2){return U(e.slice(0,e.length-t))}function Sx(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function $x(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Nx(e),...Sx(e)]),t}function Cx(e){return e%2==0}function Tx(e,t){if(G(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(Cx(n)&&Cx(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&Cx(e[0])&&Cx(t[0])}let Ex,Rx;function Ax(e,t){return null!=e.getExtension(t)}function _x(e){try{if(null!=rx(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function Fx(e){const t=hx(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function Dx(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&P("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const Ox=ke();function Mx(){let e,t,n,s,r,a,o,i,l,u;return 2===ke().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",o="out vec4 outputColor;",i=ke().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function Lx(e,t,n="index"){const s=le(t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function Bx(e,t,n="index"){const s=le(t);return s.map(((t,r)=>`int ${e[r]} = ${n} / outShapeStrides[${r}]; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function Px(e){const t=le(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Ox.registerFlag("HAS_WEBGL",(()=>Ox.getNumber("WEBGL_VERSION")>0)),Ox.registerFlag("WEBGL_VERSION",(()=>_x(2)?2:_x(1)?1:0)),Ox.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),Ox.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===Ox.get("WEBGL_VERSION"))),Ox.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),Ox.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),Ox.registerFlag("WEBGL_PACK",(()=>Ox.getBool("HAS_WEBGL"))),Ox.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_PACK_CLIP",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_PACK_REDUCE",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_LAZILY_UNPACK",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_CONV_IM2COL",(()=>Ox.getBool("WEBGL_PACK"))),Ox.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==Ex){const t=rx(e);Ex=t.getParameter(t.MAX_TEXTURE_SIZE)}return Ex}(Ox.getNumber("WEBGL_VERSION")))),Ox.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==Rx){const t=rx(e);Rx=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Rx)}(Ox.getNumber("WEBGL_VERSION")))),Ox.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=Ox.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=rx(e);return t=Ax(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:Ax(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),Ox.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>Ox.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ur())),Ox.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=rx(e);if(1===e){if(!Ax(t,"OES_texture_float"))return!1}else if(!Ax(t,"EXT_color_buffer_float"))return!1;return Fx(t)}(Ox.getNumber("WEBGL_VERSION")))),Ox.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!Ox.getBool("WEBGL_FORCE_F16_TEXTURES")&&Ox.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),Ox.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=rx(e);if(1!==e){if(Ax(t,"EXT_color_buffer_float"))return Fx(t);const e="EXT_color_buffer_half_float";if(Ax(t,e)){const n=t.getExtension(e);return function(e,t){const n=hx(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!Ax(t,"OES_texture_float")&&!!Ax(t,"WEBGL_color_buffer_float")&&Fx(t)}(Ox.getNumber("WEBGL_VERSION")))),Ox.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=Ox.getNumber("WEBGL_VERSION"))&&null!=rx(e).fenceSync;var e})),Ox.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>Ox.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),Ox.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),Ox.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Ur()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),Ox.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),Ox.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),Ox.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),Ox.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),Ox.registerFlag("WEBGL_EXP_CONV",(()=>!1)),Ox.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>Ox.getBool("IS_TEST"))),Ox.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),Ox.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),Ox.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1));const zx="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:Wx}=r;function Vx(e,t,n){const s=[];if(e.forEach((e=>{const t=U(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=Jx(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=s.join("\n"),a=e.map((e=>function(e,t,n=!1,s){let r="";r+=n?Gx(e,s):Ux(e,s);const a=e.shapeInfo.logicalShape,o=t.logicalShape;return a.length<=o.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=Wx(e.shapeInfo.logicalShape,t.logicalShape),l=Zx(o),u=o-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let d="";d=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let p="return outputValue;";const f=1===U(e.shapeInfo.logicalShape),m=1===U(t.logicalShape);if(1!==a||f||m){if(f&&!m)p=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?p="return vec4(outputValue.x);":i.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===l&&null==e.shapeInfo.flatOffset&&G(o,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=Zx(l),c=Wx(e.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${p[e+h]} = 0;`)).join("\n");let f="";return f=l<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+h]}`)).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(e,t)),r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=Mx(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Hx}\n    ${jx}\n    ${Kx}\n  `}(i);return t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(G(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let o=a,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return G(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Bx(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=Lx(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Bx(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=Lx(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=Lx(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=Lx(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(h+=qx),[h,l,c,r,u,a,n.userCode].join("\n")}function Ux(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=Xx(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${Yx(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],o=r[1];if(1===o&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=Xx(n);return 1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&G(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=Z(n),l=o;if(l.length<n.length){const n=["row","col"];return`\n      ${Ux(Qx(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${eb(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${Yx(e)}\n      }\n    `;const u=a[0],c=a[1],h=Xx(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:l}=Z(n),u=i;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${Ux(Qx(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${eb(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${Yx(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],d=c[1],p=e.shapeInfo.flatOffset;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=Xx(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:l,keptDims:u}=Z(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${Ux(Qx(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${eb(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${Yx(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const x=Xx(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${x});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${x});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,o=t[2]*a,i=t[1]*o,{newShape:l,keptDims:u}=Z(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${Ux(Qx(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${eb(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${r})) +\n          depth3;\n        ${Yx(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${Xx(n)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=Z(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Ux(Qx(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${eb(t,a)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${Yx(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${Xx(n)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function Gx(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${Mx().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=Mx();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],l=Mx();if(null!=a&&G(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${Gx(Qx(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${eb(a,s)});\n        }\n      `}const i=Mx();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=Mx();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[o-1]/2);let d=h*Math.ceil(a[o-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<o-1;e++)p=`int b${e}, `+p,d*=a[o-e-1],f=`b${e} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const Hx="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jx="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Kx="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",qx="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Xx(e){return`offset${e}`}function Yx(e){const t=e.name,n=U(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function Zx(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Jx(e,t,n){const{newShape:s,keptDims:r}=Z(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):s,l=!e&&a>1&&!G(t,n)&&s.length<a||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function Qx(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function eb(e,t){return t.map((t=>e[t])).join(", ")}function tb(e,t,n){const s={},r={},a={},o=[];let i,l,u,c=null,h=null;h=e.getUniformLocation(n,"NAN",!1),1===ke().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const d=!1;for(let o=0;o<t.variableNames.length;o++){const i=t.variableNames[o];s[i]=e.getUniformLocation(n,i,d),s[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,d),t.enableShapeUniforms&&(r[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,d),a[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,d))}return t.enableShapeUniforms&&(i=e.getUniformLocation(n,"outShape",d),u=e.getUniformLocation(n,"outShapeStrides",d),l=e.getUniformLocation(n,"outTexShape",d)),t.customUniforms&&t.customUniforms.forEach(((t,s)=>{o[s]=e.getUniformLocation(n,t.name,d)})),{uniformLocations:s,customUniformLocations:o,infLoc:c,nanLoc:h,inShapesLocations:r,inTexShapesLocations:a,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}}function nb(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!G(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const o=e.texShape,i=r.isUniform?null:r.texData.texShape;if(!G(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function sb(e){return ke().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class rb{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=ax.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Mx();this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Bx(["r","c","d"],e):Lx(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class ab{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=ax.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=Mx();this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Bx(["r","c","d"],e):Lx(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class ob{constructor(e){this.variableNames=["A"],this.outTexUsage=ox.DOWNLOAD;const t=Mx();this.outputShape=e,this.userCode=`\n      ${zx}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class ib{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=ox.DOWNLOAD;const t=Mx();this.outputShape=e,this.userCode=`\n      ${zx}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class lb{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Mx();this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Px(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class ub{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=Mx();this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const a=2*t+r;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Px(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function cb(e,t,n,s,r,a){!function(e,t){const n=ke().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return Ix(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return dx(e,(()=>e.bindTexture(i,o))),dx(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),dx(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),dx(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),dx(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===ke().getNumber("WEBGL_VERSION")?dx(e,(()=>e.texImage2D(i,0,s,t,n,0,r,a,null))):dx(e,(()=>e.texStorage2D(i,1,s,t,n))),dx(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function hb(e){return e.internalFormatFloat}function db(e){return e.internalFormatHalfFloat}function pb(e){return e.downloadTextureFormat}function fb(e){return e.internalFormatPackedFloat}function mb(e){return e.internalFormatPackedHalfFloat}class gb{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=ke().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){nx[e]=t}(t,e)):this.gl=rx(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===ke().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=fx(this.gl,e),Ax(this.gl,t))this.textureHalfFloatExtension=fx(this.gl,t);else if(ke().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),Ax(this.gl,s))this.colorBufferHalfFloatExtension=fx(this.gl,s);else if(ke().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",Ax(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!Ax(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=Ix(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return dx(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),dx(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=Ix(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return dx(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),dx(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return Ix(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=hx(this.gl,this.textureHalfFloatExtension)}get debug(){return ke().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;dx(e,(()=>e.finish())),dx(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),dx(e,(()=>e.deleteFramebuffer(this.framebuffer))),dx(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),dx(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),dx(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=lx(t,n);return cb(e,r,a,hb(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=lx(t,n);return cb(e,r,a,db(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=lx(t,n);return cb(e,r,a,pb(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){dx(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===ke().getNumber("WEBGL_VERSION")?dx(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):dx(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===ke().getNumber("WEBGL_VERSION")?dx(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):dx(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),dx(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let o,i,l;dx(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(o=new Uint8Array(n*s*4),i=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(n*s*4),i=e.FLOAT,l=a.internalFormatPackedFloat),o.set(r),2===ke().getNumber("WEBGL_VERSION")?dx(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,i,o))):dx(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,i,o))),dx(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=cx(t,n);return cb(e,r,a,mb(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=cx(t,n);return cb(e,r,a,fb(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(kx(this.gl,this.framebuffer),this.outputTexture=null),dx(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=lx(t,n),o=new Uint8Array(t*n*4);return dx(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,o,i){const l=e,u=new Float32Array(function(e,t){const[n,s]=cx(e,t);return n*s*4}(a,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();dx(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return dx(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),dx(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),dx(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(ke().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return dx(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=Mx();return function(e,t){const n=Ix(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(dx(e,(()=>e.shaderSource(n,t))),dx(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const n=function(e){return Ix(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return dx(t,(()=>t.attachShader(n,this.vertexShader))),dx(t,(()=>t.attachShader(n,e))),function(e,t){if(dx(e,(()=>e.linkProgram(t))),!ke().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&xx(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return dx(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),bx(e,t,"clipSpacePos",n,3,20,0)&&bx(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&dx(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&xx(this.gl,this.program),dx(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Ix(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),dx(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),yx(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=cx(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&xx(this.gl,this.program),wx(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),dx(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),dx(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=fx(this.gl,2===ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await q((()=>this.disposed||this.isQueryAvailable(e,ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in ke().platform&&(n=ke().platform.setTimeoutCustom.bind(ke().platform)),q((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),vx(this.gl,e,this.framebuffer),this.debug&&wx(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(vx(this.gl,this.outputTexture,this.framebuffer),this.debug&&wx(this.gl)):kx(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;vx(s,e,this.framebuffer),this.debug&&wx(s),this.outputTexture=e,dx(s,(()=>s.viewport(0,0,t,n))),dx(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),dx(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:xb,bincountImpl:bb,bincountReduceImpl:yb,castImpl:vb,ceilImpl:kb,concatImpl:wb,equalImpl:Ib,expImpl:Nb,expm1Impl:Sb,floorImpl:$b,gatherNdImpl:Cb,gatherV2Impl:Tb,greaterImpl:Eb,greaterEqualImpl:Rb,lessImpl:Ab,lessEqualImpl:_b,linSpaceImpl:Fb,logImpl:Db,maxImpl:Ob,maximumImpl:Mb,minimumImpl:Lb,multiplyImpl:Bb,negImpl:Pb,notEqualImpl:zb,prodImpl:Wb,raggedGatherImpl:Vb,raggedTensorToTensorImpl:Ub,rangeImpl:Gb,rsqrtImpl:Hb,scatterImpl:jb,sigmoidImpl:Kb,simpleAbsImpl:qb,sliceImpl:Xb,sparseFillEmptyRowsImpl:Yb,sparseReshapeImpl:Zb,sparseSegmentReductionImpl:Jb,sqrtImpl:Qb,stridedSliceImpl:ey,stringNGramsImpl:ty,stringSplitImpl:ny,stringToHashBucketFastImpl:sy,subImpl:ry,tileImpl:ay,topKImpl:oy,transposeImpl:iy,uniqueImpl:ly}=a;function uy(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function cy(e,t){return 1===t?[e]:uy(e,t)}class hy{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=sb(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=cy("rc",this.rank),t=Zx(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class dy{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?function(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${s[e+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${s[r]}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}(["r","c","d"],"inputShape"):Lx(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Px(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class py{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=my(t,n),r=gy(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=fy(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let o;return s===ix.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===ix.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===ix.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===ix.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===ix.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=my(n,s),a=gy(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const o=fy(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),i=ke().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function fy(e,t,n,s,r){const a=function(e,t){switch(e){case ix.PACKED_2X2_FLOAT32:return fb(t);case ix.PACKED_2X2_FLOAT16:return mb(t);case ix.UNPACKED_FLOAT32:return hb(t);case ix.UNPACKED_FLOAT16:return db(t);case ix.PACKED_4X1_UNSIGNED_BYTE:return pb(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let o;if(r){const[t,n]=cx(e[0],e[1]);o=t*n}else{const[t,n]=lx(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function my(e,t){if(e===ox.UPLOAD)return ix.PACKED_2X2_FLOAT32;if(e===ox.RENDER||null==e)return function(e){return ke().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?ix.PACKED_2X2_FLOAT32:ix.UNPACKED_FLOAT32:e?ix.PACKED_2X2_FLOAT16:ix.UNPACKED_FLOAT16}(t);if(e===ox.DOWNLOAD||e===ox.PIXELS)return ix.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function gy(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class xy{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const by="if (isnan(x)) return x;",yy="return x;",vy="return abs(x);",ky="return (x >= 0.0) ? x : (exp(x) - 1.0);",wy=by+"\n  return (x < 0.0) ? 0.0 : x;\n",Iy=by+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Ny="return x;",Sy="return 1.0 / (1.0 + exp(-1.0 * x));",$y="return x;",Cy="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",Ty="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Ey="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Ry="return 1.0 / (1.0 + exp(-1.0 * x));";class Ay{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class _y{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length);const t=e.length,n=cy("rc",t),s=Zx(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const Fy=rh,Dy={},Oy=ke().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class My extends F{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!ke().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof gb)t=e;else{const n=rx(ke().getNumber("WEBGL_VERSION"),e);t=new gb(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=rx(ke().getNumber("WEBGL_VERSION"));t=new gb(e),this.binaryCache=((n=ke().getNumber("WEBGL_VERSION"))in Dy||(Dy[n]={}),Dy[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new py(this.gpgpu),this.numMBBeforeWarning=null==ke().global.screen?1024:ke().global.screen.height*ke().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new _(this,mo())}nextDataId(){return My.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((ke().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||ke().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:ox.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,r){if(ke().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:ox.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new Ay(o,Ny):new xy(o,Ny);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=ar()),c="complex64"===s?wc(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=ar()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=r){let t;t=i?new Ay(s,Ny):new xy(s,Ny);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(ke().getBool("DEBUG")&&!ke().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===ke().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&ke().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...ux(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);u=wc(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=U(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;dx(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&mo().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:o,isPacked:i,texture:l}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new Ay(r,Ny):new xy(r,Ny);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:o}],o),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=mo().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>ir(e)));return Fa(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Fa(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!px(n)){if(ke().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=U(t);if(ke().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...ux(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=ke().getBool("WEBGL_PACK")&&!0===s,o=a?$x(t):t,i=a?new ib(o):new ob(o),l=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=V(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=V(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);o.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:ar(),endMs:null}}endTimer(e){return ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=ar(),e)}async getQueryTime(e){if(ke().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=Oy){return ke().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&U(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){_s("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return Fy(e.shape,t)}packedUnaryOp(e,t,n){const s=new Ay(e.shape,t),r=this.compileAndRun(s,[e],n);return mo().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=qb(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(ke().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,vy,e.dtype);const t=new xy(e.shape,vy),n=this.compileAndRun(t,[e]);return mo().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&se(n[0])){const r=n.map((e=>or(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return mo().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new _y(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new hy(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Nx(e.shape),...Sx(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[Nx(t),...Sx(t)],a=new dy(r,n),o=[n],i=this.runWebGLProgram(a,[s],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;null!=t&&P(U(r)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."));const o=$x(r);let i;i=s?new ab(o):new rb(o);const l=[null!=t?t:ux(o)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===ax.DENSE){const t=null!=a?a:ux(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===U(o.shape))return i.values=J(o.dtype,0),o;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&U(t.shape)<=ke().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Tx(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:l}=Jx(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=le(i);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const d=t.shape.length,p=2===i.length&&G(t.shape,a),f=1===U(t.shape),m=Ua(t.shape,n.shape),g=!e.packedInputs&&d===n.shape.length&&G(a,n.texData.texShape),x=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${d}_${g}_${o?l:""}_${i.length}_${f}_${m}_${p}_${u}_${c}_${h}_${x}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${ke().getNumber("WEBGL_VERSION")}`,a}(e,u,c),d=this.getAndSaveBinary(h,(()=>function(e,t,n,s){const r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),a=r.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=Vx(r,o,t),l=function(e,t){const n=Ix(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(dx(e,(()=>e.shaderSource(n,t))),dx(e,(()=>e.compileShader(n))),ke().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw gx(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,i),u=e.createProgram(l);return ke().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o},tb(e,t,u))}(this.gpgpu,e,u,c))),p=null!=this.activeTimers;let f;p&&(f=this.startTimer()),ke().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,r){t.program.enableShapeUniforms||(nb(t.inShapeInfos,n),nb([t.outShapeInfo],[s]));const a=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),1===ke().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],o=t.uniformLocations[`offset${r}`],i=t.inShapesLocations[`${r}Shape`],l=t.inTexShapesLocations[`${r}TexShape`];if(i){const{uniformShape:s}=Jx(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(i,new Int32Array(s));break;case 2:e.gl.uniform2iv(i,new Int32Array(s));break;case 3:e.gl.uniform3iv(i,new Int32Array(s));break;case 4:e.gl.uniform4iv(i,new Int32Array(s))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=a)if(n.isUniform)if(U(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=o&&e.gl.uniform1i(o,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,a,s)}));const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=le(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach(((n,s)=>{const a=t.customUniformLocations[s],o=r[s];if("float"===n.type)e.gl.uniform1fv(a,o);else if("vec2"===n.type)e.gl.uniform2fv(a,o);else if("vec3"===n.type)e.gl.uniform3fv(a,o);else if("vec4"===n.type)e.gl.uniform4fv(a,o);else if("int"===n.type)e.gl.uniform1iv(a,o);else if("ivec2"===n.type)e.gl.uniform2iv(a,o);else if("ivec3"===n.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,o)}})),e.executeProgram()}(this.gpgpu,d,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=ke().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=ar();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!ke().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,s,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(ke().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=xo((()=>{if(!ke().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=ke().getBool("DEBUG");ke().set("DEBUG",!1);const t=this.abs(wo(1e-8)).dataSync()[0];if(ke().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=ar());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=ke().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=ke().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&ke().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?L(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Z(e);e=t.newShape}let r=U(e),a=null;e.length<=1&&r<=n?a=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const o=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const t=Nx(e);let n=2,s=2;e.length&&([n,s]=Sx(e)),r=t*(n/2)*(s/2),a=j(r).map((e=>2*e))}else a=j(r);return a}(n,i),t.texShape=c),null!=r){const e=$x(n);let a,o=c[1],h=c[0];const d=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!i&&d||([o,h]=cx(c[0],c[1])),a=i?new ub(e,d):new lb(e,d);const p=d?[h,o]:c,f=this.makeTensorInfo(p,s),m=this.texData.get(f.dataId);m.usage=d?ox.PIXELS:ox.UPLOAD,m.texShape=p,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,h,r);const g=[[h,o]],x=!0,b=this.runWebGLProgram(a,[f],s,g,x),y=this.texData.get(b.dataId);t.texShape=y.texShape,t.isPacked=y.isPacked,t.usage=y.usage,ke().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=y.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=ar()-u)}else{const e=this.acquireTexture(c,o,s,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*ne(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await qu(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw gx(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,inShapesLocations:a,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=tb(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.inShapesLocations=a,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}}My.nextDataId=0,Gr()&&vo("webgl",(()=>new My),2);const Ly="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class By{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Ha(t,n),this.enableShapeUniforms=sb(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Py="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class zy{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Ha(t,n);const r=this.outputShape.length;this.enableShapeUniforms=sb(r);let a="";if(s)if(0===r||1===U(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${Zx(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=cy("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function Wy(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Vy={kernelName:Pt,backendName:"webgl",kernelFunc:Wy};function Uy(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),o=n.texData.get(a.dataId),i=Wy({inputs:{x:s},backend:n}),l=Wy({inputs:{x:r},backend:n});return o.complexTensorInfos={real:i,imag:l},a}const Gy={kernelName:Ze,backendName:"webgl",kernelFunc:Uy},Hy="return (a < 0.) ? b * a : a;",jy="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Ky={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,o=n.makeTensorInfo([],"float32",sr(a,"float32")),i=ke().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zy(jy,r.shape,o.shape):new By(Hy,r.shape,o.shape),l=n.runWebGLProgram(i,[r,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},qy="return (a < 0.) ? b * a : a;",Xy="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Yy={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=ke().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zy(Xy,s.shape,r.shape):new By(qy,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}},Zy="if (isnan(x)) return x;";function Jy({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:o}=r,i=a,l=s||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,l);return i.makeTensorInfo(o.shape,l,t)}let u;return u=ke().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Ay(o.shape,t):new xy(o.shape,e),i.runWebGLProgram(u,[o],l)}}function Qy({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},o=new By(e,l.shape,u.shape);return c.runWebGLProgram(o,[r,a],Ar(n.dtype,s.dtype))})),a=Uy({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||Ar(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?nh(e):e,s="string"===l.dtype?nh(t):t,[a,o]=r(l.shape,u.shape,n,s,h),i=c.makeTensorInfo(o,h);return c.texData.get(i.dataId).values=a,i}let d;return d=ke().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new zy(t,l.shape,u.shape,n):new By(e,l.shape,u.shape),c.runWebGLProgram(d,[l,u],h)}}function ev(e,t=!1){if("linear"===e)return t?$y:yy;if("relu"===e)return t?Ty:wy;if("elu"===e)return t?Cy:ky;if("relu6"===e)return t?Ey:Iy;if("prelu"===e)return t?Xy:qy;if("leakyrelu"===e)return t?jy:Hy;if("sigmoid"===e)return t?Ry:Sy;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class tv{constructor(e,t,n,s=!1,r=!1,a=!1,o=null,i=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=sb(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",d=r?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const x=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",y="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(y=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${y};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const nv={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class sv{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Ha(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const rv="return a * b;";function av(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Ar(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new sv(nv.REAL,s.shape,r.shape),o=new sv(nv.IMAG,s.shape,r.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,i,"float32"),u=n.runWebGLProgram(o,i,"float32"),c=Uy({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[o,i]=Bb(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(i,a);return n.texData.get(l.dataId).values=o,l}let o;return o=ke().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zy(rv,s.shape,r.shape):new By(rv,s.shape,r.shape),n.runWebGLProgram(o,[s,r],a)}const ov={kernelName:gn,backendName:"webgl",kernelFunc:av};function iv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,o=n,i=U(r.shape),l=X(a,i),u=U(l);P(i===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(r.dataId);return!c.isPacked||Tx(r.shape,l)||null!==c.texture&&Tx(c.shape,l)?(o.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[Nx(e.shape),...Sx(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[Nx(t),...Sx(t)],o=new dy(a,s),i=[s],l=n.runWebGLProgram(o,[r],e.dtype,i,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,o)}const lv={kernelName:On,backendName:"webgl",kernelFunc:iv};class uv{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const o=4*Math.floor(n/4),i=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${H(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class cv{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(o="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(o="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";r%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function hv(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=sc(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let o=0;o<r.length;o++){const{inSize:i,windowSize:l,outSize:u}=r[o];let c,h;c="mean"===n?0===o?new uv({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},i):new uv({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u}):new cv({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class dv{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=Zx(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class pv{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=Zx(this.rank),r=uy("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${i}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${i}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function fv(e,t,n){const s=ke().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new pv(e.shape,t):new dv(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function mv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;return function(e,t,n,s){const r=t,a=e.shape.length,o=Y(r,e.shape);let i=o;const l=Bi(i,a),u=null!=l;let c=e;u&&(c=fv(e,l,s),i=zi(i.length,a)),Li("sum",i,a);const[h,d]=Oi(c.shape,i);let p=h;n&&(p=Mi(h,o));const f=U(d),m=iv({inputs:{x:c},attrs:{shape:[U(e.shape)/f,f]},backend:s}),g=hv(m,_r(e.dtype),"sum",s),x=iv({inputs:{x:g},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),x}(r,a,o,n)}const gv={kernelName:ts,backendName:"webgl",kernelFunc:mv};function xv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,o=n,i=r.shape.length,l=new Array(i);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(o.shouldExecuteOnCPU([r])){const e=o.texData.get(r.dataId).values,t=iy(e,r.shape,r.dtype,a,l);u=o.makeTensorInfo(l,r.dtype),o.texData.get(u.dataId).values=t}else u=fv(r,a,o);return u}const bv={kernelName:ws,backendName:"webgl",kernelFunc:xv},yv=1e3;function vv({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),x=U(m),b=U(g),y=Ha(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);P(h===d,(()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const v=n?[x,h,p]:[x,p,h],k=s?[b,f,d]:[b,d,f],w=iv({inputs:{x:e},backend:r,attrs:{shape:v}}),I=iv({inputs:{x:t},backend:r,attrs:{shape:k}}),N=[w,I],S=Math.max(x,b),$=n?w.shape[1]:w.shape[2],C=null!=a,T=null!=o,E="leakyrelu"===l,R=null!=l?ev(l,!0):null;let A;if((1===p||1===f)&&$>yv&&!1===(C||T||E||null!=R)){let e=w,t=I;n&&(e=xv({inputs:{x:w},backend:r,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=xv({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),N.push(t));const a=1===f;let o=e;1!==f&&(o=iv({inputs:{x:e},backend:r,attrs:{shape:[S,$,1]}}),N.push(o));const i=1===f?2:1;let l=t;a&&(l=iv({inputs:{x:t},backend:r,attrs:{shape:[S,1,$]}}),N.push(l));const u=av({inputs:{a:o,b:l},backend:r});A=mv({inputs:{x:u},backend:r,attrs:{axis:i,keepDims:!0}}),N.push(u)}else{const l=Ar(e.dtype,t.dtype),u=new tv(v,k,[S,p,f],n,s,C,R,T,E),c=[w,I];if(null!=a&&c.push(a),T&&c.push(o),E){const e=r.makeTensorInfo([],"float32",sr(i,"float32"));c.push(e),N.push(e)}A=r.runWebGLProgram(u,c,l)}const _=iv({inputs:{x:A},backend:r,attrs:{shape:y}});N.push(A);for(const e of N)r.disposeIntermediateTensorInfo(e);return _}const kv={kernelName:Es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return vv({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},wv="return abs(x);",Iv={kernelName:$e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=qb(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=ke().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Ay(s.shape,wv):new xy(s.shape,wv),n.runWebGLProgram(r,[s],s.dtype)}},Nv={kernelName:Ce,backendName:"webgl",kernelFunc:Jy({opSnippet:by+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"})},Sv={kernelName:Te,backendName:"webgl",kernelFunc:Jy({opSnippet:by+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"})},$v="return a + b;",Cv=Qy({opSnippet:$v,packedOpSnippet:$v,supportsComplex:!0,cpuKernelImpl:xb}),Tv={kernelName:Ee,backendName:"webgl",kernelFunc:Cv};class Ev{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class Rv{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const Av={kernelName:Re,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return Wy({inputs:{x:r[0]},backend:s});if(r.length>ke().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>Ar(e,t))),o=r.map((e=>e.shape)),i=ke().getBool("WEBGL_PACK")?new Rv(r[0].shape,o):new Ev(r[0].shape,o);return s.runWebGLProgram(i,r,a)}},_v={kernelName:Ae,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=Y(a,r.shape);let u=l;const c=Bi(u,i);let h=r;null!=c&&(h=xv({inputs:{x:r},backend:n,attrs:{perm:c}}),u=zi(u.length,i)),Li("all",u,i);const[d,p]=Oi(h.shape,u),f=iv({inputs:{x:h},backend:n,attrs:{shape:[-1,U(p)]}}),m=hv(f,f.dtype,"all",n);let g;return g=iv(o?{inputs:{x:m},backend:n,attrs:{shape:Mi(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},Fv={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=Y(a,r.shape);let u=l;const c=Bi(u,i);let h=r;null!=c&&(h=xv({inputs:{x:r},backend:n,attrs:{perm:c}}),u=zi(u.length,i)),Li("any",u,i);const[d,p]=Oi(h.shape,u),f=iv({inputs:{x:h},backend:n,attrs:{shape:[-1,U(p)]}}),m=hv(f,f.dtype,"any",n);let g;return g=iv(o?{inputs:{x:m},backend:n,attrs:{shape:Mi(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class Dv{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Ov{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,P(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,l=Zx(i),u=cy("coords",i);let c,h;if(1===a){h=i+1;const e=Zx(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[i-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[i-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[i-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[i-2]};`}else h=i,c=`\n        ${l} sourceLocR = coords;\n        ++${u[i-1]};\n        ${l} sourceLocG = coords;\n        ++${u[i-2]};\n        ${l} sourceLocA = coords;\n        --${u[i-1]};\n        ${l} sourceLocB = coords;\n        --${u[i-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map((e=>"int "+e)),m=cy("sourceLocR",h-1).concat("inIdx.r"),g=cy("sourceLocG",h-1).concat("inIdx.g"),x=cy("sourceLocB",h-1).concat("inIdx.b"),b=cy("sourceLocA",h-1).concat("inIdx.a"),y="max"===n?"greaterThan":"lessThan",v=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,w=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${w}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${u[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Mv(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const o=sc(a),i={windowSize:o,inSize:a,batchSize:r,outSize:Math.ceil(a/o)},l=new Dv(i,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=Mv(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function Lv(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=sc(r[r.length-1]),o=new Ov(r,a,n,null==s),i=null==s?[t]:[t,s],l=e.runWebGLProgram(o,i,"int32");if(l.shape.length===t.shape.length){const s=Lv(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function Bv(e,t,n,s){const r=[n];if(Li("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!ke().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let o=t;null!==a&&a.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,l]=Oi(o.shape,r),u=U(l),c=iv({inputs:{x:o},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=Mv(e,c,s);n.push(h);const d=iv({inputs:{x:h},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),d}return Lv(e,t,s)}const Pv={kernelName:Fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let o=Y(a,r.shape);const i=Bi(o,r.shape.length);let l=r;const u=[];null!=i&&(l=xv({inputs:{x:r},backend:n,attrs:{perm:i}}),u.push(l),o=zi(o.length,l.shape.length)),Li("argMax",[o[0]],l.shape.length);const c=Bv(n,l,o[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},zv={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let o=Y(a,r.shape);const i=Bi(o,r.shape.length);let l=r;const u=[];null!=i&&(l=xv({inputs:{x:r},backend:n,attrs:{perm:i}}),u.push(l),o=zi(o.length,l.shape.length)),Li("argMin",[o[0]],l.shape.length);const c=Bv(n,l,o[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},Wv={kernelName:Oe,backendName:"webgl",kernelFunc:Jy({opSnippet:by+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"})},Vv={kernelName:Me,backendName:"webgl",kernelFunc:Jy({opSnippet:by+"return log(x + sqrt(x * x + 1.0));"})},Uv={kernelName:Le,backendName:"webgl",kernelFunc:Jy({opSnippet:by+"\n  return atan(x);\n"})},Gv={kernelName:Pe,backendName:"webgl",kernelFunc:Qy({opSnippet:Ly+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Py+"\n  return result;\n"})},Hv={kernelName:Be,backendName:"webgl",kernelFunc:Jy({opSnippet:by+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"})};class jv{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let x="0.0";if(f||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const y=4*Math.floor(a/4),v=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class Kv{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let y="0.0";if(b||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const k=4*Math.floor(a/4),w=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${x});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const qv={kernelName:ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Dx(r,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;P(zo(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Ro(r.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&G(u.inShape,u.outShape))return Wy({inputs:{x:r},backend:n});const c=new jv(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},Xv={kernelName:Ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s,c=Ao(r.shape,a,o,[1,1,1],i,l,u),h=new Kv(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class Yv{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Zv{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Jv={kernelName:Ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=Ao(o.shape,i,l,[1,1,1],u,c),d=new Zv(h);return n.runWebGLProgram(d,[r],o.dtype)}},Qv={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,o=a;Dx([r,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Ro(o.shape,i,l,1,u),h=new Yv(c);return n.runWebGLProgram(h,[r],o.dtype)}},ek={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:o,transposeB:i}=s;return vv({a:r,b:a,transposeA:o,transposeB:i,backend:n})}};class tk{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Ha(e,t),Ha(e,n);let o="0.0";null!=s&&(Ha(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=r&&(Ha(e,r),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class nk{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Ha(e,t),Ha(e,n);let o="vec4(0.0)";null!=s&&(Ha(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=r&&(Ha(e,r),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const sk={kernelName:Dt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:o,scale:i}=e;P(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),P(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),P(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=o&&(c=o.shape,u.push(o));let h=null;null!=i&&(h=i.shape,u.push(i));const d=ke().getBool("WEBGL_PACK_NORMALIZATION")?new nk(s.shape,r.shape,a.shape,c,h,l):new tk(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class rk{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=Zx(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return ak.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${ak[t]} = start[${t}] + coords.${ak[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const ak=["x","y","z","w","u","v"];class ok{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=Zx(this.rank),n=cy("coords",this.rank),s=cy("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function ik(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:o}=s,[i,l]=lo(r,a,o);if(qa(r,i,l),0===U(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=Xb(e.values,i,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=oo(r.shape,i,l);if(u||!c){const e=ke().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ok(l):new rk(l),t=[i];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),o=s.texData.get(a.dataId);Object.assign(o,r),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=io(t,le(e.shape));r.slice&&(i+=r.slice.flatOffset),o.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,l+1),a}(r,i,l,n)}const lk={kernelName:qn,backendName:"webgl",kernelFunc:ik},uk={kernelName:He,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:o}=s;P(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=ac(r.shape,a,i),u=oc(l.length,a.length),c=ic(r.shape,a,i),h=lc(o,a.length),d=uc(c,o,a.length),p=[],f=iv({inputs:{x:r},backend:n,attrs:{shape:l}}),m=xv({inputs:{x:f},backend:n,attrs:{perm:u}}),g=iv({inputs:{x:m},backend:n,attrs:{shape:c}}),x=ik({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return p.push(f),p.push(m),p.push(g),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},ck={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:o}=s,i=n.readSync(r.dataId),l=n.readSync(a.dataId),u=bb(i,l,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,u)}},hk={kernelName:Ke,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),o=n.readSync(r.dataId),i=Ha(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},dk=Qy({opSnippet:"return float(a != b);",cpuKernelImpl:zb,dtype:"bool"}),pk={kernelName:bn,backendName:"webgl",kernelFunc:dk};function fk(e){const{inputs:t,backend:n}=e,{input:s}=t;return Wy({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const mk={kernelName:_n,backendName:"webgl",kernelFunc:fk},gk={kernelName:qe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:o}=r;if("complex64"===o){if("complex64"===a.dtype)return Wy({inputs:{x:a},backend:s});const t=tl(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=Uy({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=fk({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!ee(a.dtype,o)){const e=Wy({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(s.shouldExecuteOnCPU([a])){const e=s.texData.get(a.dataId).values,[t,n,r]=vb(e,a.shape,a.dtype,o);return s.makeTensorInfo(t,n,r)}if("int32"===o)return function(e,t){const n=new xy(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",J("bool",1)),t=dk({inputs:{a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},xk="return ceil(x);",bk={kernelName:Xe,backendName:"webgl",kernelFunc:Jy({opSnippet:xk,packedOpSnippet:xk,cpuKernelImpl:kb})};class yk{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class vk{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const kk={kernelName:Ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:o}=s;let i;i=ke().getBool("WEBGL_PACK_CLIP")?new vk(r.shape):new yk(r.shape);const l=[[a],[o]];return n.runWebGLProgram(i,[r],r.dtype,l)}};class wk{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Ik(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const Nk={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new wk(s.shape),o=[Ik(s,r.complexTensorInfos.real),Ik(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,o,o[0].dtype)}};class Sk{constructor(e){this.outputShape=[],this.outputShape=Yu(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class $k{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Yu(e,t);const n=this.outputShape,s=n.length,r=Zx(s),a=cy("coords",s),o=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const l=o[t],u=o.slice(-2),c=o.join();let h=`if (${l} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];h+=`\n        if (${l} < ${i[e]}  && ${l} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${Ck(o,l,t)}),\n            vec2(${Ck(u,l,t)}));\n        }`}const d=i.length,p=i[i.length-1];h+=`\n        return getChannel(\n          getT${d}(${Ck(o,l,p)}),\n          vec2(${Ck(u,l,p)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function Ck(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function Tk(e){const{inputs:t,backend:n}=e,{input:s}=t;return Wy({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const Ek={kernelName:Wt,backendName:"webgl",kernelFunc:Tk};function Rk(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>fk({inputs:{input:e},backend:n}))),r=e.map((e=>Tk({inputs:{input:e},backend:n}))),a=Rk(s,t,n),o=Rk(r,t,n),i=Uy({inputs:{real:a,imag:o},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=U(e.shape.slice(t));return iv({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=Yu(r.map((e=>e.shape)),1),i=1===r[0].shape[0],l=wb(a,o,s,i),u=Yu(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=ke().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>a){const s=[];for(let r=0;r<e.length;r+=a){const o=e.slice(r,r+a);s.push(Rk(o,t,n))}const r=Rk(s,t,n);for(const e of s)n.disposeIntermediateTensorInfo(e);return r}if(ke().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new $k(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:o,outShape:i}=function(e,t,n){const s=Yu(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>iv({inputs:{x:e},attrs:{shape:[-1,U(e.shape.slice(t))]},backend:n}))),outShape:s}}(e,t,n),l=new Sk(o.map((e=>e.shape))),u=n.runWebGLProgram(l,o,s);o.forEach((e=>n.disposeIntermediateTensorInfo(e)));const c=iv({inputs:{x:u},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(u),c}function Ak(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Y(r,t[0].shape)[0];Xu(t.map((e=>e.shape)),a);const o=Yu(t.map((e=>e.shape)),a);if(0===U(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>U(e.shape)>0));return 1===i.length?Wy({inputs:{x:i[0]},backend:n}):Rk(i,a,n)}const _k={kernelName:Qe,backendName:"webgl",kernelFunc:Ak};class Fk{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,x=m?2:3,b=m?3:1;let y="",v="";n&&(y=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${v}\n        setOutput(result);\n      }\n    `}}class Dk{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ok{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=sb(this.outputShape.length);const a=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)h+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;h+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)h+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(h+=`\n           xC = xCCorner + ${n*i};\n           `,1===o){if(n<u&&(a%2==1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,h+=1===i&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){const e=a%2==0?L(i):i;i%2==0&&a%2==1||i%2!=0&&a%2!=1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,h+=i>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):h+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(a%2==1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(h+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(h+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(h+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let d="",p="";n&&(d=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,p="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${d}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${p}\n         setOutput(result);\n       }\n     `}}class Mk{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=sb(this.outputShape.length);const{dataFormat:n}=t,s=Mx(),r="channelsLast"===n,a=r?1:2,o=r?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function Lk(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function Bk({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],d=n.outChannels,p="channelsLast"===n.dataFormat;let f;const m=[];if(null!=a){const e=Lk(a.shape,p);null!=e&&(a=iv({inputs:{x:a},backend:s,attrs:{shape:e}}),m.push(a))}if(null!=r){const e=Lk(r.shape,p);null!=e&&(r=iv({inputs:{x:r},backend:s,attrs:{shape:e}}),m.push(r))}if((1!==h&&1!==d||!(c>yv))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&G(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},d=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,P(Tx(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const p=iv({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(p);const g=vv({a:h,b:p,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),x=s.texData.get(g.dataId);P(x.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=d,x.shape=n.outShape,f=Wy({inputs:{x:g},backend:s}),f.shape=n.outShape,m.push(g)}else{const l=n.outHeight*n.outWidth,u=iv({inputs:{x:e},backend:s,attrs:{shape:p?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=iv({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=vv({a:p?u:c,b:p?c:u,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:a,leakyreluAlpha:o});f=iv({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function Pk({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=n,f="channelsLast"===p,m=l*u*c,g=d*h,x=[n.batchSize,m,g],b=[];if(null!=a){const e=Lk(a.shape,f);null!=e&&(a=iv({inputs:{x:a},backend:s,attrs:{shape:e}}),b.push(a))}if(null!=r){const e=Lk(r.shape,f);null!=e&&(r=iv({inputs:{x:r},backend:s,attrs:{shape:e}}),b.push(r))}const y=iv({inputs:{x:t},backend:s,attrs:{shape:[1,m,U(t.shape)/m]}});b.push(y);const v=new Mk(x,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],w=s.runWebGLProgram(v,[e],"float32",k),I=iv({inputs:{x:w},backend:s,attrs:{shape:x}});b.push(w),b.push(I);const N=null!=r,S=null!=a,$="leakyrelu"===i,C=i?ev(i,!0):null,T=new tv(f?I.shape:y.shape,f?y.shape:I.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,N,C,S,$),E=f?[I,y]:[y,I];if(r&&E.push(r),S&&E.push(a),$){const e=s.makeTensorInfo([],"float32",sr(o,"float32"));E.push(e),b.push(e)}const R=s.runWebGLProgram(T,E,"float32"),A=iv({inputs:{x:R},backend:s,attrs:{shape:n.outShape}});b.push(R);for(const e of b)s.disposeIntermediateTensorInfo(e);return A}const zk={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Wo(l),d=_o(r.shape,a.shape,o,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&ke().getBool("WEBGL_EXP_CONV")){const e=new Ok(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];p=n.runWebGLProgram(e,[r,a],"float32",t)}else if(ke().getBool("WEBGL_CONV_IM2COL"))p=Pk({x:r,filter:a,convInfo:d,backend:n});else{const e=new Fk(d);p=n.runWebGLProgram(e,[r,a],"float32")}else p=Bk({x:r,filter:a,convInfo:d,backend:n});const f=iv({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class Wk{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vk{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Uk{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Gk{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Hk={kernelName:tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Wo(l),d=_o(r.shape,c,o,1,i,u,!1,h),p=new Wk(d);return n.runWebGLProgram(p,[r,a],"float32")}},jk={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Wo(u),d=_o(o,a.shape,i,1,l,c,!1,h),p=new Vk(d);return n.runWebGLProgram(p,[r,a],"float32")}},Kk={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s,u=Fo(r.shape,a.shape,o,l,i),c=new Dk(u);return n.runWebGLProgram(c,[r,a],"float32")}},qk={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,pad:i,filterShape:l}=s,u=Fo(r.shape,l,o,1,i),c=new Uk(u);return n.runWebGLProgram(c,[r,a],"float32")}},Xk={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:o,strides:i,inputShape:l}=s,u=Fo(l,a.shape,i,1,o),c=new Gk(u);return n.runWebGLProgram(c,[r,a],"float32")}},Yk=Jy({opSnippet:Zy+"\n  return cos(x);\n"}),Zk={kernelName:ot,backendName:"webgl",kernelFunc:Yk},Jk=Jy({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),Qk={kernelName:it,backendName:"webgl",kernelFunc:Jk};class ew{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[o-1+".0",i-1+".0"],[m,g,x]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[b,y,v]=h>1?[""+(i-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${y};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const tw={kernelName:ct,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new ew(r.shape,a.shape,i,l,u);return n.runWebGLProgram(c,[r,a,o],"float32")}};var nw;!function(e){e.Prod="*",e.Sum="+"}(nw||(nw={}));class sw{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===nw.Prod?"1.0":"0.0",o=n?a:`getX(${rw(r,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(i-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${i}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${Zx(r)} coords = getOutputCoords();\n        int end = ${aw(r,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${aw(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${rw(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function rw(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function aw(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function ow(e,t,n,s,r,a){const o=t.shape.length,i=Bi([s],o);let l=t;null!=i&&(l=xv({inputs:{x:t},backend:n,attrs:{perm:i}}));const u=zi(1,o)[0];if(u!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=Wy({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const s=new sw(e,l.shape,!1,a),r=[[t]],o=h;h=n.runWebGLProgram(s,[h],h.dtype,r),n.disposeIntermediateTensorInfo(o)}if(r){const t=new sw(e,l.shape,r,a),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=i){const e=xv({inputs:{x:h},backend:n,attrs:{perm:Pi(i)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const iw={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;return ow(nw.Prod,r,n,a,o,i)}},lw={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;return ow(nw.Sum,r,n,a,o,i)}},uw={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:o,binaryOutput:i}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=bb(e,t,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=yb(e,t,o,i);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class cw{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const hw={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:o}=s,i=r.shape[0],l=("NHWC"===o?r.shape[1]:r.shape[2])*a,u=("NHWC"===o?r.shape[2]:r.shape[3])*a,c=("NHWC"===o?r.shape[3]:r.shape[1])/(a*a),h=new cw("NHWC"===o?[i,l,u,c]:[i,c,l,u],a,o);return n.runWebGLProgram(h,[r],r.dtype)}};class dw{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=sb(this.outputShape.length);const a=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class pw{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=sb(this.outputShape.length);const a=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)d+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;d+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)d+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(d+=`\n          xC = xCCorner + ${t*l};\n          `,1===i){if(t<c&&(o%2==1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,d+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?L(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,d+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):d+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(d+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(d+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(d+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let p="",f="";n&&(p=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${p}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const fw={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),P(zo(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const h=_o(r.shape,a.shape,o,c,i,u,!0);let d;d=ke().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new pw(h):new dw(h);const p=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(d,[r,a],"float32",p)}};class mw{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gw{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xw={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=_o(r.shape,c,o,i,l,u,!0),d=new mw(h);return n.runWebGLProgram(d,[r,a],"float32")}},bw={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=_o(c,a.shape,o,i,l,u,!0),d=new gw(h);return n.runWebGLProgram(d,[r,a],"float32")}};class yw{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const vw={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=U(s.shape),o=iv({inputs:{x:s},backend:n,attrs:{shape:[a]}}),i=new yw(a),l=n.runWebGLProgram(i,[o],o.dtype),u=iv({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};class kw{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const ww={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s,u=Eo(r.shape,a.shape,o,i,"NHWC",l);let c;const h=new kw(u);c=n.runWebGLProgram(h,[r,a],"float32");const d=iv({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}},Iw={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:o,summedDims:i,idDims:l}=Dc(r,a.length);Mc(o.length,l,a);const{path:u,steps:c}=Lc(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Oc(p,l[t]);let r;Bc(e)?r=a[t]:(r=xv({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const o=r.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);G(r.shape,o)||(r=iv({inputs:{x:r},backend:n,attrs:{shape:o}}),f.push(r)),null===d?d=r:(d=av({inputs:{a:r,b:d},backend:n}),f.push(d))}e<h-1&&(u[e]>=0&&(d=mv({inputs:{x:d},backend:n,attrs:{axis:u[e]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},Nw=Jy({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Sw={kernelName:wt,backendName:"webgl",kernelFunc:Nw},$w={kernelName:It,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=ke().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zy("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new By("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},Cw=Qy({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:Ib}),Tw={kernelName:St,backendName:"webgl",kernelFunc:Cw},Ew={kernelName:Nt,backendName:"webgl",kernelFunc:Jy({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${gc};\n  float a1 = ${xc};\n  float a2 = ${bc};\n  float a3 = ${yc};\n  float a4 = ${vc};\n  float a5 = ${kc};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`})},Rw=Jy({opSnippet:Zy+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Nb,dtype:"float32"}),Aw={kernelName:$t,backendName:"webgl",kernelFunc:Rw};function _w(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let l=r;return r<0&&(P(-(o+1)<=r,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+r+1),i.splice(l,0,1),iv({inputs:{x:a},backend:s,attrs:{shape:i}})}const Fw={kernelName:Ct,backendName:"webgl",kernelFunc:_w},Dw="return exp(x) - 1.0;",Ow={kernelName:Tt,backendName:"webgl",kernelFunc:Jy({opSnippet:Dw,packedOpSnippet:Dw,cpuKernelImpl:Sb})};class Mw{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Lw(e,t,n){const s=n.texData.get(e.dataId),r=U(e.shape),a=e.shape[e.shape.length-1],o=iv({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),i=o.shape,l=new Mw("real",i,t),u=new Mw("imag",i,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:i},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:i}],h=n.runWebGLProgram(l,c,"float32"),d=n.runWebGLProgram(u,c,"float32"),p=Uy({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const f=iv({inputs:{x:p},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(p),f}const Bw={kernelName:Et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return Lw(s,!1,n)}};class Pw{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function zw(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||ae(r),"string"===a){const e=Q(a,U(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new Pw(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const Ww={kernelName:Rt,backendName:"webgl",kernelFunc:zw};class Vw{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Uw={kernelName:At,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new Vw(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},Gw="return floor(x);",Hw=Jy({opSnippet:Gw,packedOpSnippet:Gw,cpuKernelImpl:$b}),jw={kernelName:_t,backendName:"webgl",kernelFunc:Hw},Kw=Qy({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),qw={kernelName:Ft,backendName:"webgl",kernelFunc:Kw};class Xw{constructor(e){this.variableNames=["A"];const t=Mx(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Yw{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=Mx(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const Zw={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,o="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=o?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];if(i||o){const e=ke().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=Jw&&e===Qw||(Qw=e,Jw=document.createElement("canvas").getContext("2d",{willReadFrequently:Qw})),Jw.canvas.width=l,Jw.canvas.height=u,Jw.drawImage(r,0,0,l,u),r=Jw.canvas}const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=ox.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const p=ke().getBool("WEBGL_PACK")?new Yw(h):new Xw(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let Jw,Qw=ke().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const eI={kernelName:Rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=Wo(c),g=_o(r.shape,a.shape,l,h,u,d,!1,m);let x;const b=[],y=null!=o,v=null!=i,k="leakyrelu"===p,w=()=>{const e=[r,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=iv({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(y&&e.push(t(o,c)),v&&e.push(t(i,c)),k){const t=n.makeTensorInfo([],"float32",sr(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&ke().getBool("WEBGL_EXP_CONV")){const e=p?ev(p,!0):null,t=new Ok(g,y,e,v,k),s=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],r=w();x=n.runWebGLProgram(t,r,"float32",s)}else if(ke().getBool("WEBGL_CONV_IM2COL"))x=Pk({x:r,filter:a,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const e=p?ev(p,!1):null,t=new Fk(g,y,e,v,k),s=w();x=n.runWebGLProgram(t,s,"float32")}else x=Bk({x:r,filter:a,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const I=iv({inputs:{x},backend:n,attrs:{shape:g.outShape}});return b.push(x),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}},tI={kernelName:As,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let m=c;null==m&&(m=[1,1]),P(zo(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=_o(r.shape,a.shape,l,m,u,h,!0),x=ke().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=d?ev(d,x):null,y=[r,a],v=null!=o,k=null!=i,w="leakyrelu"===d;if(v&&y.push(o),k&&y.push(i),w){const e=n.makeTensorInfo([],"float32",sr(p,"float32"));y.push(e),f.push(e)}let I;I=x?new pw(g,v,b,k,w):new dw(g,v,b,k,w);const N=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(I,y,"float32",N);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class nI{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const r=Zx(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const sI={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,o=a[a.length-1],i=U(s.shape),[l,u,c,h]=cc(s,r),d=iv({inputs:{x:r},backend:n,attrs:{shape:[u,o]}}),p=iv({inputs:{x:s},backend:n,attrs:{shape:[U(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=Cb(e,t,s.dtype,u,o,c,h,s.shape,i);return n.makeTensorInfo(l,s.dtype,a.values)}const f=new nI(o,h,[u,c],s.shape),m=n.runWebGLProgram(f,[p,d],p.dtype),g=iv({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),g}};class rI{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=Zx(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function aI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:o,batchDims:i}=s,l=Y(o,r.shape)[0];if(ke().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];P(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=th(r,a,l,i),c=U(a.shape),h=[],d=iv({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=iv({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(p),t=n.bufferSync(d),s=Tb(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new rI(d.shape,f),g=n.runWebGLProgram(m,[d,p],d.dtype);h.push(g);const x=iv({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}const oI={kernelName:Ot,backendName:"webgl",kernelFunc:aI},iI=Qy({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Eb,dtype:"bool"}),lI={kernelName:Lt,backendName:"webgl",kernelFunc:iI},uI=Qy({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:Rb}),cI={kernelName:Bt,backendName:"webgl",kernelFunc:uI},hI={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return Lw(s,!0,n)}},dI={kernelName:Vt,backendName:"webgl",kernelFunc:Jy({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"})},pI={kernelName:Ut,backendName:"webgl",kernelFunc:Jy({opSnippet:"return float(isinf(x));",dtype:"bool"})},fI={kernelName:Gt,backendName:"webgl",kernelFunc:Jy({opSnippet:"return float(isnan(x));",dtype:"bool"})},mI=Qy({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Ab,dtype:"bool"}),gI={kernelName:jt,backendName:"webgl",kernelFunc:mI},xI=Qy({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:_b,dtype:"bool"}),bI={kernelName:Kt,backendName:"webgl",kernelFunc:xI},yI={kernelName:qt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,o=Fb(s,r,a);return t.makeTensorInfo([o.length],"float32",o)}},vI=Jy({opSnippet:Zy+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:Db}),kI={kernelName:Xt,backendName:"webgl",kernelFunc:vI},wI=Jy({opSnippet:Zy+"\n  return log(1.0 + x);\n"}),II={kernelName:Yt,backendName:"webgl",kernelFunc:wI},NI=Qy({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),SI={kernelName:Zt,backendName:"webgl",kernelFunc:NI},$I=Jy({opSnippet:"return float(!(x >= 1.0));"}),CI={kernelName:Jt,backendName:"webgl",kernelFunc:$I},TI={kernelName:Qt,backendName:"webgl",kernelFunc:Qy({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"})};class EI{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;i=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class RI{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;i=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const AI={kernelName:en,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=s,u=ke().getBool("WEBGL_PACK_NORMALIZATION")?new RI(r.shape,a,o,i,l):new EI(r.shape,a,o,i,l);return n.runWebGLProgram(u,[r],r.dtype)}};class _I{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const FI={kernelName:tn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new _I(r.shape,i,l,u,c);return n.runWebGLProgram(h,[r,a,o],r.dtype)}};function DI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:o}=s,i=r.shape.length,l=Y(a,r.shape);let u=l;const c=Bi(u,i),h=null!=c,d=n.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const e=n.texData.get(p.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=iy(e,r.shape,r.dtype,c,t);p=n.makeTensorInfo(t,r.dtype),n.texData.get(p.dataId).values=s}else p=fv(r,c,n);u=zi(u.length,i)}Li("max",u,i);const[f,m]=Oi(p.shape,u);let g,x=f;if(o&&(x=Mi(f,l)),d){const e=n.texData.get(p.dataId).values,t=Ob(e,U(m),x,r.dtype);g=n.makeTensorInfo(x,r.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=U(t),a=iv({inputs:{x:e},attrs:{shape:[U(e.shape)/r,r]},backend:s}),o=hv(a,e.dtype,"max",s),i=iv({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o),i}(p,m,x,n);return h&&n.disposeIntermediateTensorInfo(p),g}const OI={kernelName:nn,backendName:"webgl",kernelFunc:DI},MI=Qy({opSnippet:Ly+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Py+"\n  return result;\n",cpuKernelImpl:Mb}),LI={kernelName:sn,backendName:"webgl",kernelFunc:MI},BI={kernelName:rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Dx(r,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;P(zo(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=Ro(r.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&G(u.inShape,u.outShape))return Wy({inputs:{x:r},backend:n});const c=new jv(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},PI={kernelName:on,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=s,c=Ao(r.shape,a,o,[1,1,1],i,u,l),h=new Kv(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class zI{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=r-1-e.padInfo.top,i=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class WI{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.front,h=l-1-e.padInfo.top,d=u-1-e.padInfo.left,p=i*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const VI={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=Ao(o.shape,i,l,[1,1,1],u,c),d=new Kv(h,"max",!0),p=n.runWebGLProgram(d,[o],o.dtype),f=new WI(h),m=n.runWebGLProgram(f,[r,p],o.dtype);return n.disposeIntermediateTensorInfo(p),m}},UI={kernelName:an,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:o}=t,i=a;Dx([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Ro(i.shape,l,u,1,c,h),p=new jv(d,"max",!0),f=n.runWebGLProgram(p,[i],i.dtype),m=new zI(d),g=n.runWebGLProgram(m,[r,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},GI={kernelName:un,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;P(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];P(zo(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=Ro(s.shape,r,a,u,o),[h,d]=function(e,t,n,s){let r=new jv(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new jv(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,i,c,l);return[h,d]}},HI={kernelName:cn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,o=n,i=s.shape.length,l=Y(a,s.shape);let u=l;const c=Bi(u,i),h=null!=c,d=o.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=iy(e,s.shape,s.dtype,c,t);f=o.makeTensorInfo(t,s.dtype),o.texData.get(f.dataId).values=n}else f=fv(s,c,o);p.push(f),u=zi(u.length,i)}Li("sum",u,i);const[m,g]=Oi(f.shape,u);let x=m;r&&(x=Mi(m,l));const b=function(e,t,n,s){const r=U(t),a=iv({inputs:{x:e},attrs:{shape:[U(e.shape)/r,r]},backend:s}),o=hv(a,"float32","mean",s),i=iv({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o),i}(f,g,x,o);for(const e of p)o.disposeIntermediateTensorInfo(e);return b}},jI={kernelName:hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=Y(a,r.shape);let u=l;const c=Bi(u,i);let h=r;null!=c&&(h=xv({inputs:{x:r},backend:n,attrs:{perm:c}}),u=zi(u.length,r.shape.length)),Li("min",u,i);const[d,p]=Oi(h.shape,u),f=iv({inputs:{x:h},backend:n,attrs:{shape:[-1,U(p)]}}),m=hv(f,f.dtype,"min",n);let g;return g=iv(o?{inputs:{x:m},backend:n,attrs:{shape:Mi(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},KI=Qy({opSnippet:Ly+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Py+"\n  return result;\n",cpuKernelImpl:Lb}),qI={kernelName:dn,backendName:"webgl",kernelFunc:KI};class XI{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=Zx(s),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class YI{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=Zx(s),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=cy("rc",s),l=cy("source",s),u=`${i[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[s-2]} += 1;\n        if(${i[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${i[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const ZI={kernelName:pn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,o=ke().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new YI(s.shape,r,a):new XI(s.shape,r,a);return t.runWebGLProgram(o,[s],s.dtype)}},JI={kernelName:fn,backendName:"webgl",kernelFunc:Qy({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+Py+"\n  return result;\n"})};class QI{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const eN=Qy({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),tN={kernelName:vt,backendName:"webgl",kernelFunc:eN},nN="return a - b;",sN=Qy({opSnippet:nN,packedOpSnippet:nN,supportsComplex:!0,cpuKernelImpl:ry}),rN={kernelName:gs,backendName:"webgl",kernelFunc:sN};function aN(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,o=Y([a],r.shape),i=DI({inputs:{x:r},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=Mi(i.shape,o),u=iv({inputs:{x:i},backend:n,attrs:{shape:l}}),c=sN({inputs:{a:r,b:u},backend:n}),h=Rw({inputs:{x:c},backend:n}),d=mv({inputs:{x:h},backend:n,attrs:{axis:o,keepDims:!1}}),p=iv({inputs:{x:d},backend:n,attrs:{shape:l}}),f=eN({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const oN={kernelName:rs,backendName:"webgl",kernelFunc:aN},iN={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:o,normalized:i}=s,l=i?r:aN({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new QI(u,c,a),d=[[o]],p=n.runWebGLProgram(h,[l],"int32",d);return i||n.disposeIntermediateTensorInfo(l),p}},lN=by+"\n  return -x;\n",uN={kernelName:xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=Pb(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=ke().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Ay(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new xy(s.shape,lN),n.runWebGLProgram(r,[s],s.dtype)}},cN=cu,hN={kernelName:yn,backendName:"webgl",kernelFunc:function(e){_s("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=cN(u,c,o,i,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},dN=hu,pN={kernelName:vn,backendName:"webgl",kernelFunc:function(e){_s("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=dN(c,h,o,i,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},fN=du,mN={kernelName:kn,backendName:"webgl",kernelFunc:function(e){_s("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),d=o,p=i,f=l,m=u,{selectedIndices:g,selectedScores:x}=fN(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class gN{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const xN={kernelName:In,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:o,onValue:i,offValue:l}=s,u=U(r.shape),c=new gN(u,o,i,l),h=iv({inputs:{x:r},backend:n,attrs:{shape:[u]}}),d=n.runWebGLProgram(c,[h],a);n.disposeIntermediateTensorInfo(h);const p=iv({inputs:{x:d},backend:n,attrs:{shape:[...r.shape,o]}});return n.disposeIntermediateTensorInfo(d),p}};function bN(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=fk({inputs:{input:s},backend:n}),t=bN({inputs:{x:e},backend:n}),r=Tk({inputs:{input:s},backend:n}),a=bN({inputs:{x:r},backend:n}),o=Uy({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),o}return zw({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const yN={kernelName:$s,backendName:"webgl",kernelFunc:bN},vN={kernelName:wn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=fk({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Tk({inputs:{input:r},backend:s}),o=bN({inputs:{x:a},backend:s}),i=Uy({inputs:{real:n,imag:o},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o),i}return zw({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},kN={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return _w({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{z(a,e.shape,"All tensors passed to stack must have matching shapes"),P(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=Ak({inputs:t.map((e=>{const t=_w({inputs:{input:e},backend:n,attrs:{dim:r}});return i.push(t),t})),backend:n,attrs:{axis:r}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class wN{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=Zx(s),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class IN{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=Zx(s),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=cy("rc",s),l=cy("source",s),u=`${i[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${i[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${i[s-2]} += 1;\n       if(${i[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${i[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===s?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const NN=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:o}=s;if(0===U(r.shape)){const e=a.map(((e,t)=>e[0]+r.shape[t]+e[1]));return zw({backend:n,attrs:{shape:e,value:o,dtype:r.dtype}})}const i=ke().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new IN(r.shape,a,o):new wN(r.shape,a,o),l=[[o]];return n.runWebGLProgram(i,[r],r.dtype,l)},SN={kernelName:Sn,backendName:"webgl",kernelFunc:NN},$N=Qy({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+Py+"\n  return result;\n"}),CN={kernelName:$n,backendName:"webgl",kernelFunc:$N},TN={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=[],u=Y(a,r.shape);let c=u;const h=Bi(c,i);let d,p=r;if(null!=h&&(p=xv({inputs:{x:r},backend:n,attrs:{perm:h}}),c=zi(c.length,i),l.push(p)),Li("prod",c,i),n.shouldExecuteOnCPU([p])){const e=n.texData.get(p.dataId).values,{outVals:t,outShape:s,outDtype:r}=Wb(p.shape,p.dtype,e,c);d=n.makeTensorInfo(s,r,t)}else{const[e,t]=Oi(p.shape,c),s=U(t),a=iv({inputs:{x:p},backend:n,attrs:{shape:[-1,s]}}),o=hv(a,_r(r.dtype),"prod",n);d=iv({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(a),l.push(o)}if(o){l.push(d);const e=Mi(d.shape,u);d=iv({inputs:{x:d},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},EN={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=s,l=r.map((e=>n.readSync(e.dataId))),u=r.map((e=>e.shape)),c=n.readSync(a.dataId),h=n.readSync(o.dataId),[d,p,f]=Vb(l,u,c,a.shape,a.dtype,h,o.shape,i),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}},RN={kernelName:Rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),h=n.readSync(o.dataId),d=i.map((e=>n.readSync(e.dataId))),p=i.map((e=>e.shape)),[f,m]=Ub(u,r.shape,c,a.shape,a.dtype,h,o.shape,d,p,l);return n.makeTensorInfo(f,a.dtype,m)}},AN=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:o}=n,i=Gb(s,r,a,o);return t.makeTensorInfo([i.length],o,i)},_N={kernelName:An,backendName:"webgl",kernelFunc:AN},FN={kernelName:Fn,backendName:"webgl",kernelFunc:Jy({opSnippet:"return 1.0 / x;"})},DN=Jy({opSnippet:by+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),ON={kernelName:Dn,backendName:"webgl",kernelFunc:DN},MN=Jy({opSnippet:by+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),LN={kernelName:zn,backendName:"webgl",kernelFunc:MN};class BN{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class PN{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const zN={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s,[l,u]=i,c=ke().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new PN(r.shape,l,u,a,o):new BN(r.shape,l,u,a,o);return n.runWebGLProgram(c,[r],"float32")}};class WN{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,o]=e,i=[n&&a>1?s-1:s,n&&o>1?r-1:r],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const VN={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:o}=s,i=new WN(a.shape,r.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class UN{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class GN{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const HN={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s,[l,u]=i,c=ke().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new GN(r.shape,l,u,a,o):new UN(r.shape,l,u,a,o);return n.runWebGLProgram(c,[r],r.dtype)}};class jN{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,o]=e,i=[n&&a>1?s-1:s,n&&o>1?r-1:r],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const KN={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:o}=s,i=new jN(a.shape,r.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class qN{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=Zx(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class XN{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=cy("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,o=Zx(n);function i(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const YN={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,o=r.shape.length,i=Y(a,r.shape);if(0===o)return Wy({inputs:{x:r},backend:n});const l=ke().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new XN(r.shape,i):new qN(r.shape,i);return n.runWebGLProgram(l,[r],r.dtype)}};class ZN{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const JN={kernelName:Ts,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:o}=t,i=n,l=new ZN(s.shape,a),[u,c]=rc(o,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},QN=Jy({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),eS={kernelName:Vn,backendName:"webgl",kernelFunc:QN},tS=Jy({opSnippet:"return inversesqrt(x);",cpuKernelImpl:Hb}),nS={kernelName:Un,backendName:"webgl",kernelFunc:tS};class sS{constructor(e,t,n,s,r,a,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const i=Zx(r.length),l=Zx(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const d=`getUpdates(${h})`,p=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const rS={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=pc(0,r,o),d=[h/u,u];if(0===h)return n.makeTensorInfo(o,r.dtype);const p=iv({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),f=iv({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new sS(l,i,p.shape.length,f.shape.length,c,d),x=n.runWebGLProgram(g,[f,p,m],f.dtype),b=iv({inputs:{x},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(m),b}};class aS{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===ke().getNumber("WEBGL_VERSION")?"while (left < right) {":r,o="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const oS={kernelName:Hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:o}=s,i=new aS(r.shape[0],r.shape[1],a.shape[1],o),l=[[r.shape[1]]];return n.runWebGLProgram(i,[r,a],"int32",l)}};class iS{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let s=0;s<t.length;s++)o.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=o.join()}const a=Zx(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const lS={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,o=new iS(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(o,[s,r,a],Ar(r.dtype,a.dtype))}},uS=Jy({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${fc};\n  float scale = ${mc};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),cS={kernelName:Kn,backendName:"webgl",kernelFunc:uS},hS=Jy({opSnippet:Zy+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Kb}),dS={kernelName:Jn,backendName:"webgl",kernelFunc:hS},pS={kernelName:Zn,backendName:"webgl",kernelFunc:Jy({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"})},fS=Jy({opSnippet:Zy+"\n  return sin(x);\n"}),mS={kernelName:Xn,backendName:"webgl",kernelFunc:fS},gS=Jy({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),xS={kernelName:Yn,backendName:"webgl",kernelFunc:gS},bS=Jy({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),yS={kernelName:Qn,backendName:"webgl",kernelFunc:bS},vS={kernelName:ns,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:o}=s;P(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=NN({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=ac(c.shape,a,i,!1),d=oc(h.length,a.length,!1),p=ic(c.shape,a,i,!1),f=iv({inputs:{x:c},backend:n,attrs:{shape:h}}),m=xv({inputs:{x:f},backend:n,attrs:{perm:d}}),g=iv({inputs:{x:m},backend:n,attrs:{shape:p}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},kS={kernelName:as,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(o.dataId)[0],[h,d,p,f,m]=Yb(i,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},wS={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.readSync(r.dataId)),i=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=Zb(i,s.shape,s.dtype,o,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},IS={kernelName:is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=n.readSync(s.dataId),i=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=Jb(o,s.shape,s.dtype,i,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},NS={kernelName:ls,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=n.readSync(s.dataId),i=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=Jb(o,s.shape,s.dtype,i,l);return n.makeTensorInfo(c,s.dtype,u)}},SS={kernelName:us,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=pc(0,r,i);if("string"===a.dtype){const e=n.bufferSync(r),t=n.bufferSync(a),s=ir(n.readSync(o.dataId)[0]),p=jb(e,t,i,d,c,u,l,h,s,!1);return n.makeTensorInfo(i,p.dtype,p.values)}const p=new sS(u,l,r.shape.length,a.shape.length,h,[d,1],!1),f=n.runWebGLProgram(p,[a,r,o],a.dtype),m=iv({inputs:{x:f},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),m}},$S={kernelName:ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:o}=s,i=Y(o,r.shape)[0],l=zc(r,a,i),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[i]=e;const s=ik({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,s}))}},CS="return sqrt(x);",TS=Jy({opSnippet:CS,packedOpSnippet:CS,cpuKernelImpl:Qb}),ES={kernelName:es,backendName:"webgl",kernelFunc:TS},RS={kernelName:hs,backendName:"webgl",kernelFunc:Jy({opSnippet:"return x * x;"})},AS="return (a - b) * (a - b);",_S=Qy({opSnippet:AS,packedOpSnippet:AS}),FS={kernelName:cs,backendName:"webgl",kernelFunc:_S},DS={kernelName:Cs,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=by+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new xy(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class OS{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=Zx(n.length),a=Zx(n.length);let o="";if(1===s)o="coords * strides + begin";else{let e=0;o=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const MS={kernelName:ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:x,begin:b,end:y,strides:v}=uo(r.shape,a,o,i,l,u,c,h,d);let k;if(m)k=iv({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||x){P(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=Ya(b,y,v),t=ik({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});k=iv({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=Fa(r.shape,r.dtype,e),s=ey(p,t,v,b);k=n.makeTensorInfo(f,r.dtype,s.values)}else{const e=new OS(b,v,p);k=n.runWebGLProgram(e,[r],r.dtype)}const w=iv({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),w}},LS={kernelName:ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,m]=ty(d,p,r,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},BS={kernelName:fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(a.dataId),l=n.readSync(o.dataId)[0],[u,c,h]=ny(i,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},PS={kernelName:ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(a.dataId),i=sy(o,r);return n.makeTensorInfo(a.shape,"int32",i)}},zS={kernelName:xs,backendName:"webgl",kernelFunc:Jy({opSnippet:"return tan(x);"})},WS=Jy({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),VS={kernelName:bs,backendName:"webgl",kernelFunc:WS};class US{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=Zx(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function GS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>ir(e))):e,s=Fa(r.shape,r.dtype,t),o=ay(s,a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new US(r.shape,a);return n.runWebGLProgram(o,[r],r.dtype)}const HS={kernelName:ys,backendName:"webgl",kernelFunc:GS};class jS{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class KS{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function qS(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function XS(e){let t=1;for(;t<e;)t*=2;return t}const YS={kernelName:vs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:o}=s,i=ke().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=ke().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<i||a>l){const e=n.readSync(r.dataId),[t,s]=oy(e,u,r.dtype,a,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,zw({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?n.unpackTensor(r):r,f=U(u)/c,m=iv({inputs:{x:p},attrs:{shape:[f,c]},backend:n});d&&qS(n,p);const g=XS(a),x=XS(c);let b=null;const y=()=>null===b?[m,m]:[m,b],v=(e,t,s)=>{const r=y(),a=new jS(s),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(a,r,"int32",o),qS(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)v(t,n,[f,x])}for(let e=x;e>g;e/=2){const t=y(),s=new KS([f,e/2]),r=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(s,t,"int32",r),qS(n,a);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)v(i,e,b.shape)}let k=b;b=ik({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),qS(n,k);let w=aI({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});qS(n,m);const I=u.slice(0,-1);I.push(a),k=b,b=iv({inputs:{x:b},attrs:{shape:I},backend:n}),qS(n,k);const N=w;return w=iv({inputs:{x:w},attrs:{shape:I},backend:n}),qS(n,N),[w,b]}};class ZS{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const o="nearest"===n?1:2;let i;switch(s){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const JS={kernelName:ks,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,m]=null!=u?u:[h,d],g=new ZS(h,d,o,i,l,[c,f,m,p]);return n.runWebGLProgram(g,[r,a],"float32")}},QS={kernelName:Is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;Dx(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=s.readSync(a.dataId),{outputValues:i,outputShape:l,indices:u}=ly(o,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},e$={kernelName:Ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const o=r,i=o.shape.length,l=r.shape[a],u=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==a&&(u[c++]=o.shape[e]);const h=[],d=new Array(i).fill(0),p=o.shape.slice();p[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){d[a]=e;const t=ik({inputs:{x:o},backend:n,attrs:{begin:d,size:p}}),s=iv({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class t${constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,o=a*Math.ceil(r/n);this.outputShape=[s,o];const i=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const n$=[kv,Iv,Nv,Sv,Tv,Av,_v,Fv,Pv,zv,Wv,Vv,Uv,Gv,Hv,qv,Xv,Jv,Qv,ek,sk,uk,ck,hk,gk,bk,kk,Gy,Nk,_k,zk,Hk,jk,Kk,qk,Xk,Zk,Qk,tw,iw,lw,uw,hw,fw,xw,bw,vw,ww,Iw,Sw,$w,Tw,Ew,Aw,Fw,Ow,Bw,Ww,Uw,jw,qw,Zw,eI,tI,sI,oI,lI,cI,Vy,hI,Ek,dI,pI,fI,Ky,gI,bI,yI,kI,II,SI,CI,TI,AI,FI,OI,LI,BI,PI,VI,UI,GI,HI,jI,qI,ZI,JI,iN,ov,uN,hN,pN,mN,pk,xN,vN,kN,SN,CN,Yy,TN,EN,RN,_N,mk,tN,FN,ON,LN,lv,zN,VN,HN,KN,YN,JN,eS,nS,rS,oS,lS,cS,dS,pS,mS,xS,lk,oN,yS,vS,kS,wS,IS,NS,SS,$S,ES,RS,FS,DS,MS,LS,BS,PS,rN,gv,zS,VS,HS,YS,JS,bv,QS,e$,{kernelName:Ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:o}=s,i=r.shape.length,l=[];let u=0;const c=Bi([u],i);let h=r;null!=c&&(h=xv({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=zi(1,i)[0]);const d=eh(h.shape,u,o),p=U([h.shape[u]]),f=iv({inputs:{x:h},backend:n,attrs:{shape:[-1,p]}});l.push(f);const m=_r(r.dtype),g=(e,t,s,r,a)=>{const o=e.shape[0],i=e.shape[1],u=Qc(i,a),c=new t$({windowSize:u,inSize:i,batchSize:o,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const d=AN({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),p=GS({inputs:{x:d},backend:n,attrs:{reps:[i/u]}});return l.push(d),l.push(p),g(h,t,p,r,a)},x=iv({inputs:{x:g(f,"unsortedSegmentSum",a,m,o)},backend:n,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const e=Pi(c);b=xv({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},yN];for(const e of n$)Ps(e);class s${constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class r${refCount(e){return a$("refCount")}incRef(e){return a$("incRef")}timerAvailable(){return!0}time(e){return a$("time")}read(e){return a$("read")}readSync(e){return a$("readSync")}readToGPU(e,t){return a$("readToGPU")}numDataIds(){return a$("numDataIds")}disposeData(e,t){return a$("disposeData")}write(e,t,n){return a$("write")}move(e,t,n,s,r){return a$("move")}createTensorFromGPUData(e,t,n){return a$("createTensorFromGPUData")}memory(){return a$("memory")}floatPrecision(){return a$("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return a$("dispose")}}function a$(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function o$(e,t,n){return Math.max(e,Math.min(t,n))}function i$(e){return e%2==0?e:e+1}function l$(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function u$(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function c$(e,t,n=""){u$(p$(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function h$(e){u$(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function d$(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function p$(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function f$(e){return e%1==0}function m$(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function g$(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function x$(e,t=(e=>0),n,s){return new Promise(((r,a)=>{let o=0;const i=()=>{if(e())return void r();o++;const l=t(o);null!=n&&o>=n?a():null!=s?s(i,l):setTimeout(i,l)};i()}))}function b$(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function y$(e,t){const n=t.length;return u$((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),u$(e.every((e=>f$(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function v$(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:y$(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function k$(e,t){return w$(e,t)}function w$(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function I$(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function N$(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function S$(e){return"string"==typeof e||e instanceof String}function $$(e){return Array.isArray(e)?$$(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":"number"==typeof e?"float32":S$(e)?"string":"boolean"==typeof e?"bool":"float32"}function C$(e){return!!(e&&e.constructor&&e.call&&e.apply)}function T$(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function E$(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function R$(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=R$(e+t*i,o,n,s)}return r}function A$(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return R$(0,e,t,n)}function _$(e,t){const n=F$(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function F$(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function D$(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return A$(e,new Float32Array(n));if("int32"===t)return A$(e,new Int32Array(n));if("bool"===t)return A$(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function O$(e){e.forEach((t=>{u$(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function M$(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function L$(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function B$(e){return e&&e.then&&"function"==typeof e.then}const P$="tfjsflags";class z${constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=W$,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(V$().getBool("IS_TEST")||V$().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];V$().getBool("IS_TEST")||V$().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(B$(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);P$ in e&&e[P$].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}function W$(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function V$(){return G$}let U$,G$=null;function H$(){if(null==U$){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}U$=e}return U$}function j$(e,t){const n=function(){const e=H$();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const K$="Abs",q$="Acos",X$="Acosh",Y$="Add",Z$="AddN",J$="All",Q$="Any",eC="ArgMax",tC="ArgMin",nC="Asin",sC="Asinh",rC="Atan",aC="Atanh",oC="Atan2",iC="AvgPool",lC="AvgPoolGrad",uC="AvgPool3D",cC="AvgPool3DGrad",hC="BatchMatMul",dC="BatchToSpaceND",pC="Bincount",fC="BitwiseAnd",mC="BroadcastArgs",gC="Cast",xC="Ceil",bC="ClipByValue",yC="Complex",vC="ComplexAbs",kC="Concat",wC="Conv2D",IC="Conv2DBackpropFilter",NC="Conv2DBackpropInput",SC="Conv3D",$C="Conv3DBackpropFilterV2",CC="Conv3DBackpropInputV2",TC="Cos",EC="Cosh",RC="Cumprod",AC="Cumsum",_C="CropAndResize",FC="DenseBincount",DC="DepthToSpace",OC="DepthwiseConv2dNative",MC="DepthwiseConv2dNativeBackpropFilter",LC="DepthwiseConv2dNativeBackpropInput",BC="Diag",PC="Dilation2D",zC="Dilation2DBackpropInput",WC="Dilation2DBackpropFilter",VC="RealDiv",UC="Einsum",GC="Elu",HC="EluGrad",jC="Erf",KC="Equal",qC="Exp",XC="ExpandDims",YC="Expm1",ZC="FFT",JC="Fill",QC="FlipLeftRight",eT="Floor",tT="FloorDiv",nT="FusedBatchNorm",sT="GatherV2",rT="GatherNd",aT="Greater",oT="GreaterEqual",iT="Identity",lT="IFFT",uT="Imag",cT="IsFinite",hT="IsInf",dT="IsNan",pT="LeakyRelu",fT="Less",mT="LessEqual",gT="LinSpace",xT="Log",bT="Log1p",yT="LogicalAnd",vT="LogicalNot",kT="LogicalOr",wT="LRN",IT="LRNGrad",NT="Max",ST="Maximum",$T="MaxPool",CT="MaxPoolGrad",TT="MaxPool3D",ET="MaxPool3DGrad",RT="MaxPoolWithArgmax",AT="Mean",_T="Min",FT="Minimum",DT="MirrorPad",OT="Mod",MT="Multinomial",LT="Multiply",BT="Neg",PT="NotEqual",zT="NonMaxSuppressionV3",WT="NonMaxSuppressionV4",VT="NonMaxSuppressionV5",UT="OnesLike",GT="OneHot",HT="Pack",jT="PadV2",KT="Pow",qT="Prelu",XT="Prod",YT="RaggedGather",ZT="RaggedRange",JT="RaggedTensorToTensor",QT="Range",eE="Real",tE="Reciprocal",nE="Relu",sE="Reshape",rE="ResizeNearestNeighbor",aE="ResizeNearestNeighborGrad",oE="ResizeBilinear",iE="ResizeBilinearGrad",lE="Relu6",uE="Reverse",cE="Round",hE="Rsqrt",dE="ScatterNd",pE="TensorScatterUpdate",fE="SearchSorted",mE="Select",gE="Selu",xE="Slice",bE="Sin",yE="Sinh",vE="Sign",kE="Sigmoid",wE="Softplus",IE="Sqrt",NE="Sum",SE="SpaceToBatchND",$E="SplitV",CE="Softmax",TE="SparseFillEmptyRows",EE="SparseReshape",RE="SparseSegmentMean",AE="SparseSegmentSum",_E="SparseToDense",FE="SquaredDifference",DE="Square",OE="StaticRegexReplace",ME="StridedSlice",LE="StringNGrams",BE="StringSplit",PE="StringToHashBucketFast",zE="Sub",WE="Tan",VE="Tanh",UE="Tile",GE="TopK",HE="Transform",jE="Transpose",KE="Unique",qE="Unpack",XE="UnsortedSegmentSum",YE="ZerosLike",ZE="Step",JE="FromPixels",QE="RotateWithOffset",eR="_FusedMatMul",tR="FusedConv2D",nR="FusedDepthwiseConv2D";function sR(...e){V$().getBool("IS_TEST")||V$().getBool("PROD")||console.warn(...e)}function rR(...e){V$().getBool("IS_TEST")||V$().getBool("PROD")||console.log(...e)}const aR=j$("kernelRegistry",(()=>new Map)),oR=j$("gradRegistry",(()=>new Map));function iR(e,t){const n=dR(e,t);return aR.get(n)}function lR(e){return oR.get(e)}function uR(e){const t=aR.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,o]=r,[i]=a.split("_");i===e&&n.push(o)}return n}function cR(e){const{kernelName:t,backendName:n}=e,s=dR(t,n);aR.has(s)&&sR(`The kernel '${t}' for backend '${n}' is already registered`),aR.set(s,e)}function hR(e){const{kernelName:t}=e;oR.has(t)&&V$().getBool("DEBUG")&&sR(`Overriding the gradient for '${t}'`),oR.set(t,e)}function dR(e,t){return`${t}_${e}`}function pR(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}const fR=Us()||Vs;function mR(e){return fR.fromString(e,!0,16)}const gR=mR("c3a5c85c97cb3127"),xR=mR("b492b66fbe98f273"),bR=mR("9ae16a3b2f90404f");function yR(e){return e.xor(e.shru(47))}function vR(e,t,n){const s=e.slice(t,t+n);return fR.fromBytes(Array.from(s),!0,!0)}function kR(e,t){return vR(e,t,8)}function wR(e,t){return vR(e,t,4)}function IR(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function NR(e,t,n=mR("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function SR(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=IR(a.add(r).add(s),21);const o=r;return r=(r=r.add(t)).add(n),a=a.add(IR(r,44)),[r.add(s),a.add(o)]}(kR(e,t),kR(e,t+8),kR(e,t+16),kR(e,t+24),n,s)}function $R(e,t=e.length){const n=fR.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=bR.add(2*t),s=kR(e,0).add(bR),r=kR(e,t-8);return NR(IR(r,37).mul(n).add(s),IR(s,25).add(r).mul(n),n)}if(t>=4){const n=bR.add(2*t);return NR(wR(e,0).shl(3).add(t),wR(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return yR(bR.mul(n).xor(gR.mul(s))).mul(bR)}return bR}(e,t):function(e,t=e.length){const n=bR.add(2*t),s=kR(e,0).mul(xR),r=kR(e,8),a=kR(e,t-8).mul(n),o=kR(e,t-16).mul(bR);return NR(IR(s.add(r),43).add(IR(a,30)).add(o),s.add(IR(r.add(bR),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=bR.add(2*t),s=kR(e,0).mul(bR),r=kR(e,8),a=kR(e,t-8).mul(n),o=kR(e,t-16).mul(bR),i=IR(s.add(r),43).add(IR(a,30)).add(o),l=NR(i,s.add(IR(r.add(bR),18)).add(a),n),u=kR(e,16).mul(n),c=kR(e,24),h=i.add(kR(e,t-32)).mul(n),d=l.add(kR(e,t-24)).mul(n);return NR(IR(u.add(c),43).add(IR(h,30)).add(d),u.add(IR(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(xR).add(113),a=yR(r.mul(bR).add(113)).mul(bR),o=[fR.UZERO,fR.UZERO],i=[fR.UZERO,fR.UZERO];s=s.mul(bR).add(kR(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=IR(s.add(r).add(o[0]).add(kR(e,l+8)),37).mul(xR),r=IR(r.add(o[1]).add(kR(e,l+48)),42).mul(xR),s=s.xor(i[1]),r=r.add(o[0]).add(kR(e,l+40)),a=IR(a.add(i[0]),33).mul(xR),o=SR(e,l,o[1].mul(xR),s.add(i[0])),i=SR(e,l+32,a.add(i[1]),r.add(kR(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=xR.add(a.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),s=IR(s.add(r).add(o[0]).add(kR(e,l+8)),37).mul(h),r=IR(r.add(o[1]).add(kR(e,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(o[0].mul(9).add(kR(e,l+40))),a=IR(a.add(i[0]),33).mul(h),o=SR(e,l,o[1].mul(h),s.add(i[0])),i=SR(e,l+32,a.add(i[1]),r.add(kR(e,l+16))),[a,s]=[s,a],NR(NR(o[0],i[0],h).add(yR(r).mul(gR)).add(a),NR(o[1],i[1],h).add(s),h)}function CR(e,t){return"string"===t?RR(e):TR([e],t)}function TR(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=FR(e)),V$().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function ER(){return V$().platform.now()}function RR(e,t="utf-8"){return t=t||"utf-8",V$().platform.encode(e,t)}function AR(e,t="utf-8"){return t=t||"utf-8",V$().platform.decode(e,t)}function _R(e){return null!=V$().platform.isTypedArray?V$().platform.isTypedArray(e):pR(e)}function FR(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||B$(e)||null==e||_R(e)&&n)t.push(e);else if(Array.isArray(e)||_R(e))for(let s=0;s<e.length;++s)FR(e[s],t,n);else{let s=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(s=Math.max(s,Number(t)));for(let r=0;r<=s;r++)FR(e[r],t,n)}return t}class DR{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new MR)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const o=ER();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:ER()-o})}if(V$().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{OR(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function OR(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class MR{logKernelProfile(e,t,n,s,r,a){const o="number"==typeof s?g$(`${s}ms`,9):s.error,i=g$(e,25),l=t.rank,u=t.size,c=g$(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${i}\t%c${o}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const LR=20,BR=3,PR=7;function zR(e,t,n,s){const r=E$(t),a=function(e,t,n,s){const r=d$(t),a=s[s.length-1],o=new Array(a).fill(0),i=t.length,l="complex64"===n?GR(e):e;if(i>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],WR(l[t+e],0,n).length)}return o}(e,t,n,r),o=t.length,i=UR(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${o}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map((e=>"    "+e)).join("\n")),l.join("\n")}function WR(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(PR))} + ${parseFloat(e[1].toFixed(PR))}j`:S$(e)?`'${e}'`:"bool"===n?VR(e):parseFloat(e.toFixed(PR)).toString(),g$(s,t)}function VR(e){return 0===e?"false":"true"}function UR(e,t,n,s,r,a=!0){const o="complex64"===n?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===n?[WR(GR(e)[0],0,n)]:"bool"===n?[VR(e[0])]:[e[0].toString()];if(1===l){if(i>LR){const t=BR*o;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-BR)*o,i*o));return"complex64"===n&&(s=GR(s),a=GR(a)),["["+s.map(((e,t)=>WR(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>WR(e,r[i-BR+t],n))).join(", ")+"]"]}return["["+("complex64"===n?GR(e):Array.from(e)).map(((e,t)=>WR(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*o,d=[];if(i>LR){for(let t=0;t<BR;t++){const s=t*h,a=s+h;d.push(...UR(e.slice(s,a),u,n,c,r,!1))}d.push("...");for(let t=i-BR;t<i;t++){const s=t*h,a=s+h;d.push(...UR(e.slice(s,a),u,n,c,r,t===i-1))}}else for(let t=0;t<i;t++){const s=t*h,a=s+h;d.push(...UR(e.slice(s,a),u,n,c,r,t===i-1))}const p=2===l?",":"";d[0]="["+(i>0?d[0]+p:"");for(let e=1;e<d.length-1;e++)d[e]=" "+d[e]+p;let f=",\n";for(let e=2;e<l;e++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":f),d}function GR(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class HR{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=d$(e),null!=n){const e=n.length;u$(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||w$(t,this.size),this.strides=E$(e)}set(e,...t){0===t.length&&(t=[0]),u$(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return jR().makeTensor(this.values,this.shape,this.dtype)}}let jR=null,KR=null,qR=null;class XR{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=d$(e),this.strides=E$(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return KR.buffer(this.shape,this.dtype,e)}bufferSync(){return KR.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return A$(this.shape,e,"complex64"===this.dtype)}arraySync(){return A$(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=jR().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>AR(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),jR().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=jR().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>AR(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await jR().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),jR().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return KR.print(this,e)}clone(){return this.throwIfDisposed(),KR.clone(this)}toString(e=!1){return zR(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),KR.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),jR().makeVariable(this,e,t,n)}}function YR(){return j$("Tensor",(()=>XR))}Object.defineProperty(XR,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),YR();class ZR extends XR{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!p$(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);jR().disposeTensor(this),this.dataId=e.dataId,jR().incRef(this,null)}dispose(){jR().disposeVariable(this),this.isDisposedInternal=!0}}var JR,QR,eA,tA,nA;Object.defineProperty(ZR,Symbol.hasInstance,{value:e=>e instanceof XR&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(JR||(JR={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(QR||(QR={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(eA||(eA={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(tA||(tA={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(nA||(nA={}));const sA={float32:tA,int32:QR,bool:eA,complex64:nA};function rA(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return sA[e][t]}function aA(e){return rA(e,"int32")}function oA(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function iA(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function lA(e,t){if(e.dtype===t.dtype)return[e,t];const n=rA(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function uA(e){const t=[];return cA(e,t,new Set),t}function cA(e,t,n){if(null==e)return;if(e instanceof XR)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),cA(s,t,n))}}function hA(e){return null!=e.kernelName}class dA{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class pA{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new dA}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(sR(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new DR(this.backendInstance),!0}setupRegisteredKernels(){uR(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){uR(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r$||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,sR(`Initialization of backend ${e} failed`),sR(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return sR(`Initialization of backend ${e} failed`),sR(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return pA.nextTensorId++}nextVariableId(){return pA.nextVariableId++}clone(e){const t=mA.runKernel(iT,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return mA.runKernel(gC,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==iR(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=s-t-r-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=hA(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(hA(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=iR(t,this.backendName);u$(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const u=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=hA(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(l,u,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=o()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=lR(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(u$(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>r[t]));return a.concat(o)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&S$(e[0])&&(r=e.map((e=>RR(e))));const a=s.write(r,t,n),o=new XR(t,n,a,this.nextTensorId());if(this.trackTensor(o,s),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new XR(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new ZR(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*N$(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof ZR||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*N$(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},i=lR(e);null!=i&&(s=i.gradFunc),null!=s&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=F$(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=uA(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(u$(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));u$(r instanceof XR,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),i=!0,r[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=_$(d$(e),"float32");return mA.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const r=n((()=>i[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const o=a.inputs[t];if(!p$(r.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=r;else{const t=e[o.id];e[o.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),gA);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return u$(C$(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;u$(t.every((e=>e instanceof XR)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),u$(n.value instanceof XR,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),u$(C$(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];u$(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),u$(a.every((e=>e instanceof XR)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=ER(),n=await this.backend.time(e);return n.wallMs=ER()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new dA;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function fA(){const e=H$();if(null==e._tfengine){const t=new z$(e);e._tfengine=new pA(t)}var t;return t=e._tfengine.ENV,G$=t,jR=()=>e._tfengine,e._tfengine}pA.nextTensorId=0,pA.nextVariableId=0;const mA=fA();function gA(e,t){const n={a:e,b:t};return mA.runKernel(Y$,n)}function xA(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function bA(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const yA=V$();function vA(e,t){let n=e;if(_R(e))return"string"===t?[]:[e.length];if(oA(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(iA(e))return[e.buffer.size/(null==t?4:N$(t))];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||_R(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&V$().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&kA(e,s,[]),s}function kA(e,t,n){if(n=n||[],!Array.isArray(e)&&!_R(e))return void u$(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));u$(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),u$(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)kA(e[t],s,n.concat(t))}function wA(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function IA(e,t,n,s="numeric"){if(e instanceof XR)return wA(s,e.dtype,t,n),e;let r=$$(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),wA(s,r,t,n),null==e||!_R(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=vA(e,r);_R(e)||Array.isArray(e)||(e=[e]);const o="string"!==r?TR(e,r):FR(e,[],!0);return mA.makeTensor(o,a,r)}function NA(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>IA(e,`${t}[${r}]`,n,s)))}yA.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),yA.registerFlag("IS_BROWSER",(()=>bA())),yA.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),yA.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),yA.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),yA.registerFlag("PROD",(()=>!1)),yA.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>yA.getBool("DEBUG"))),yA.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),yA.registerFlag("IS_TEST",(()=>!1)),yA.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>yA.getBool("DEBUG"))),yA.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),yA.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),yA.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const SA="__op";function $A(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=SA;const r=(...e)=>{mA.startScope(n);try{const t=s(...e);return B$(t)&&console.error("Cannot return a Promise inside of tidy."),mA.endScope(t),t}catch(e){throw mA.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const CA=$A({complex_:function(e,t){const n=IA(e,"real","complex"),s=IA(t,"imag","complex");c$(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return mA.runKernel(yC,r)}});function TA(e,t,n,s){if(null==s)s=$$(e);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(iA(e)||oA(e)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return mA.backend.createTensorFromGPUData(e,t||n,s)}if(!_R(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){O$(t);const e=d$(t),s=d$(n);u$(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==d$(t.slice(e));u$(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return _R(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?TR(e,s):FR(e,[],!0),mA.makeTensor(e,t,s)}function EA(e,t,n){return TA(e,t,vA(e,n),n)}const RA={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class AA{static join(e){return new AA(e).slice()}constructor(e){if(this.shards=[],this.previousShardIndex=0,null==e)return;if(e instanceof Array||(e=[e]),0===(e=e.map((e=>_R(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const s=e[n];n!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const r=t+s.byteLength;this.shards.push({buffer:s,start:t,end:r}),t=r}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const s=new ArrayBuffer(t-e),r=new Uint8Array(s);let a=0;for(let s=n;s<this.shards.length;s++){const n=this.shards[s],o=e+a-n.start,i=a,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer,o,l-o);if(r.set(u,i),a+=u.length,t<n.end)break}return s}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,s=e.length;for(;n<=s;){const r=Math.floor((s-n)/2)+n,a=t(e[r]);if(0===a)return r;a<0?s=r:n=r+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}const _A=4;async function FA(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const o=r[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const l={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+_A*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=_A,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(i.data());null!=t&&(l.group=t),n.push(l)}return{data:OA(await Promise.all(s)),specs:n}}function DA(e,t){const n=new AA(e),s={};let r,a=0;for(const e of t){const t=e.name,o=e.dtype,i=e.shape,l=d$(i);let u;if("quantization"in e){const s=e.quantization;if("uint8"===s.dtype||"uint16"===s.dtype){if(!("min"in s)||!("scale"in s))throw new Error(`Weight ${e.name} with quantization ${s.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==s.dtype)throw new Error(`Weight ${e.name} has unknown quantization dtype ${s.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${e.name} is quantized with ${s.dtype} which only supports weights of type float32 not ${o}.`)}const i=RA[s.dtype],c=n.slice(a,a+l*i),h="uint8"===s.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===s.dtype||"uint16"===s.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*s.scale+s.min}}else{if("float16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type float32.`);void 0===r&&(r=HA()),u=r(h)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==s.dtype&&"uint16"!==s.dtype)throw new Error(`Unsupported quantization type ${s.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*s.scale+s.min)}}a+=l*i}else if("string"===o){const t=d$(e.shape);u=[];for(let e=0;e<t;e++){const e=new Uint32Array(n.slice(a,a+_A))[0];a+=_A;const t=new Uint8Array(n.slice(a,a+e));u.push(t),a+=e}}else{const e=RA[o],r=n.slice(a,a+l*e);if("float32"===o)u=new Float32Array(r);else if("int32"===o)u=new Int32Array(r);else if("bool"===o)u=new Uint8Array(r);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{u=new Float32Array(r);const e=new Float32Array(u.length/2),n=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],n[t]=u[2*t+1];const a=EA(e,i,"float32"),o=EA(n,i,"float32");s[t]=CA(a,o),a.dispose(),o.dispose()}}a+=l*e}"complex64"!==o&&(s[t]=EA(u,i,o))}return s}function OA(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const MA="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function LA(e){return MA?Buffer.byteLength(e,"utf8"):new Blob([e]).size}function BA(e){return AA.join(e)}function PA(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function zA(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function WA(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(s.initializerSignature=e.initializerSignature),s}async function VA(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),WA(e,n,s)}function UA(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:LA(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:LA(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:new AA(e.weightData).byteLength}}function GA(e){const t=[];for(const n of e)t.push(...n.weights);return t}function HA(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const o=s[r],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[r]=i}return new Float32Array(r)}}class jA{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==jA.instance&&(jA.instance=new jA),jA.instance}static registerSaveRouter(e){jA.getInstance().saveRouters.push(e)}static registerLoadRouter(e){jA.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return jA.getHandlers(e,"save")}static getLoadHandlers(e,t){return jA.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?jA.getInstance().loadRouters:jA.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const KA=e=>jA.registerSaveRouter(e),qA=e=>jA.registerLoadRouter(e),XA=e=>jA.getSaveHandlers(e),YA=(e,t)=>jA.getLoadHandlers(e,t),ZA="tensorflowjs",JA="models_store",QA="model_info_store";function e_(){if(!V$().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function t_(e){const t=e.result;t.createObjectStore(JA,{keyPath:"modelPath"}),t.createObjectStore(QA,{keyPath:"modelPath"})}class n_{constructor(e){if(this.indexedDB=e_(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(ZA,1);s.onupgradeneeded=()=>t_(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(JA,"readonly"),s=t.objectStore(JA).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{t.weightData=AA.join(t.weightData);const s=UA(t),a=r.transaction(QA,"readwrite");let o,i,l=a.objectStore(QA);try{o=l.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(e){return n(e)}o.onsuccess=()=>{i=r.transaction(JA,"readwrite");const o=i.objectStore(JA);let u;try{u=o.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(e){return n(e)}u.onsuccess=()=>e({modelArtifactsInfo:s}),u.onerror=e=>{l=a.objectStore(QA);const t=l.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(u.error)),t.onerror=e=>(r.close(),n(u.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==i?r.close():i.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}n_.URL_SCHEME="indexeddb://";const s_=e=>{return V$().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(n_.URL_SCHEME)?(t=e.slice(n_.URL_SCHEME.length),new n_(t)):null;var t};jA.registerSaveRouter(s_),jA.registerLoadRouter(s_);class r_{constructor(){this.indexedDB=e_()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(ZA,1);n.onupgradeneeded=()=>t_(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(QA,"readonly"),a=r.objectStore(QA).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){return e=function(e){return e.startsWith(n_.URL_SCHEME)?e.slice(n_.URL_SCHEME.length):e}(e),new Promise(((t,n)=>{const s=this.indexedDB.open(ZA,1);s.onupgradeneeded=()=>t_(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(QA,"readwrite"),o=a.objectStore(QA),i=o.get(e);let l;i.onsuccess=()=>{if(null==i.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=o.delete(e),a=()=>{l=r.transaction(JA,"readwrite");const s=l.objectStore(JA).delete(e);s.onsuccess=()=>t(i.result.modelArtifactsInfo),s.onerror=e=>n(i.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(i.error))}},i.onerror=e=>(r.close(),n(i.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const a_="/",o_="tensorflowjs_models",i_="info",l_="model_topology",u_="weight_specs",c_="weight_data",h_="model_metadata";function d_(e){return{info:[o_,e,i_].join(a_),topology:[o_,e,l_].join(a_),weightSpecs:[o_,e,u_].join(a_),weightData:[o_,e,c_].join(a_),modelMetadata:[o_,e,h_].join(a_)}}function p_(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function f_(e){const t=e.split(a_);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(a_)}class m_{constructor(e){if(!V$().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=d_(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=UA(e),r=AA.join(e.weightData);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(MA)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(r));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:s}}catch(e){throw p_(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(MA){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}m_.URL_SCHEME="localstorage://";const g_=e=>{return V$().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(m_.URL_SCHEME)?(t=e.slice(m_.URL_SCHEME.length),new m_(t)):null;var t};jA.registerSaveRouter(g_),jA.registerLoadRouter(g_);class x_{constructor(){u$(V$().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),u$("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=o_+a_,n=a_+i_;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[f_(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){e=function(e){return e.startsWith(m_.URL_SCHEME)?e.slice(m_.URL_SCHEME.length):e}(e);const t=d_(e);if(null==this.LS.getItem(t.info))throw new Error(`Cannot find model at path '${e}'`);const n=JSON.parse(this.LS.getItem(t.info));return p_(t),n}}const b_="://";class y_{constructor(){this.managers={}}static getInstance(){return null==y_.instance&&(y_.instance=new y_),y_.instance}static registerManager(e,t){u$(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(b_)&&(e=e.slice(0,e.indexOf(b_))),u$(e.length>0,(()=>"scheme must not be an empty string."));const n=y_.getInstance();u$(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=y_.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(y_.getInstance().managers)}}function v_(e){if(-1===e.indexOf(b_))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${y_.getSchemes().join(",")}`);return{scheme:e.split(b_)[0],path:e.split(b_)[1]}}async function k_(e,t,n=!1){u$(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=jA.getLoadHandlers(e);u$(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),u$(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=jA.getSaveHandlers(t);u$(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),u$(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const o=a[0],i=v_(e).scheme,l=v_(e).path,u=i===v_(e).scheme,c=await r.load();n&&u&&await y_.getManager(i).removeModel(l);const h=await o.save(c);return n&&!u&&await y_.getManager(i).removeModel(l),h.modelArtifactsInfo}async function w_(){const e=y_.getSchemes(),t={};for(const n of e){const e=await y_.getManager(n).listModels();for(const s in e)t[n+b_+s]=e[s]}return t}async function I_(e){const t=v_(e);return y_.getManager(t.scheme).removeModel(t.path)}async function N_(e,t){return k_(e,t,!1)}async function S_(e,t){return k_(e,t,!0)}class $_{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&V$().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))}),!0))):setTimeout(e,t)}isTypedArray(e){return pR(e)}}if(V$().get("IS_BROWSER")){V$().setPlatform("browser",new $_);try{y_.registerManager(m_.URL_SCHEME,new x_)}catch(e){}try{y_.registerManager(n_.URL_SCHEME,new r_)}catch(e){}}let C_;function T_(e,t="float32",n){return t=t||"float32",O$(e),new HR(e,t,n)}V$().get("IS_NODE")&&!V$().get("IS_BROWSER")&&V$().setPlatform("node",new class{constructor(){this.util=n(7004),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=V$().global.fetch?V$().global.fetch(e,t):(null==C_&&(C_=n(5755)),C_(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const E_=$A({cast_:function(e,t){const n=IA(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return mA.runKernel(gC,s,r)}}),R_=$A({clone_:function(e){const t={x:IA(e,"x","clone","string_or_numeric")};return mA.runKernel(iT,t)}});function A_(e,t=!1){console.log(e.toString(t))}function __(){return mA}function F_(e,t){return mA.tidy(e,t)}function D_(e){uA(e).forEach((e=>e.dispose()))}function O_(e){return mA.keep(e)}function M_(e,t,n=1){return mA.registerBackend(e,t,n)}fA(),KR={buffer:T_,cast:E_,clone:R_,print:A_},qR=function(e){V$().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const L_=$A({add_:function(e,t){let n=IA(e,"a","add"),s=IA(t,"b","add");[n,s]=lA(n,s);const r={a:n,b:s};return mA.runKernel(Y$,r)}}),B_=$A({floorDiv_:function(e,t){let n=IA(e,"a","floorDiv"),s=IA(t,"b","floorDiv");[n,s]=lA(n,s);const r={a:n,b:s};return mA.runKernel(tT,r)}}),P_=$A({div_:function(e,t){let n=IA(e,"a","div"),s=IA(t,"b","div");if([n,s]=lA(n,s),"int32"===n.dtype&&"int32"===s.dtype)return B_(n,s);const r={a:n,b:s};return mA.runKernel(VC,r,{})}}),z_=$A({mul_:function(e,t){let n=IA(e,"a","mul"),s=IA(t,"b","mul");[n,s]=lA(n,s);const r={a:n,b:s};return mA.runKernel(LT,r)}}),W_=$A({sqrt_:function(e){const t={x:IA(e,"x","sqrt","float32")};return mA.runKernel(IE,t)}}),V_=$A({square_:function(e){const t=IA(e,"x","square");return mA.runKernel("Square",{x:t},{})}}),U_=$A({zerosLike_:function(e){const t={x:IA(e,"x","zerosLike")};return mA.runKernel(YE,t)}});function G_(e){return mA.customGrad(e)}function H_(e,t){if((_R(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&_R(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return TA(e,[],[],t)}const j_=new Map,K_=new Map;class q_{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class X_{constructor(){this.classNameMap={}}static getMap(){return null==X_.instance&&(X_.instance=new X_),X_.instance}static register(e){X_.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Y_(e,t,n){u$(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),u$("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),u$(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),void 0===t&&(t="Custom"),void 0===n&&(n=e.className);const s=t+">"+n;return X_.register(e),j_.set(s,e),K_.set(e,s),e}class Z_ extends q_{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return D_(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){u$(C$(e),(()=>"The f passed in variableGrads(f) must be a function")),u$(null==t||Array.isArray(t)&&t.every((e=>e instanceof ZR)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in mA.registeredVariables)t.push(mA.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;u$((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:o}=mA.gradients(e,t,null,!0);u$(o.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),u$(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const i={};return t.forEach(((e,t)=>{null!=o[t]&&(i[e.name]=o[t])})),null!=s&&s.forEach((e=>i[e.name]=null)),{value:a,grads:i}}(e,t)}dispose(){null!=this.iterations_&&D_(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:H_(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}function J_(e,t,n){O$(e);const s={shape:e,value:t,dtype:n=n||$$(t)};return mA.runKernel(JC,{},s)}Object.defineProperty(Z_,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const Q_=$A({pow_:function(e,t){let n=IA(e,"base","pow"),s=IA(t,"exp","pow");[n,s]=lA(n,s);const r={a:n,b:s};return mA.runKernel(KT,r)}}),eF=$A({sub_:function(e,t){let n=IA(e,"a","sub"),s=IA(t,"b","sub");[n,s]=lA(n,s);const r={a:n,b:s};return mA.runKernel(zE,r)}}),tF=$A({abs_:function(e){const t=IA(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return mA.runKernel(vC,e)}{const e={x:t};return mA.runKernel(K$,e)}}});function nF(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,o=e[a]||1;(t[t.length-1-r]||1)>1&&1===o&&s.unshift(a)}return s}function sF(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,o=t[a];(null==r||1===r&&o>1)&&n.unshift(a)}return n}function rF(e,t){const n=Math.max(e.length,t.length),s=new Array(n);for(let r=0;r<n;r++){let a=e[e.length-r-1];null==a&&(a=1);let o=t[t.length-r-1];if(null==o&&(o=1),1===a)s[n-r-1]=o;else if(1===o)s[n-r-1]=a;else{if(a!==o)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);s[n-r-1]=a}}return s}const aF=$A({maximum_:function(e,t){let n=IA(e,"a","maximum"),s=IA(t,"b","maximum");[n,s]=lA(n,s),"bool"===n.dtype&&(n=E_(n,"int32"),s=E_(s,"int32")),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(ST,r)}});class oF extends Z_{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=mA.registeredVariables[t];F_((()=>{const e=L_(z_(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=O_(H_(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}const iF=[class extends Z_{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=mA.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=mA.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:F_((()=>U_(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:F_((()=>U_(s).variable(!1)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;F_((()=>{const e=L_(z_(a,this.rho),z_(V_(r),1-this.rho)),t=z_(P_(W_(L_(o,this.epsilon)),W_(L_(a,this.epsilon))),r),n=L_(z_(o,this.rho),z_(V_(t),1-this.rho));a.assign(e),o.assign(n);const i=L_(z_(t,-this.learningRate),s);s.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(D_(this.accumulatedGrads.map((e=>e.variable))),D_(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}},class extends Z_{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=mA.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:F_((()=>J_(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;F_((()=>{const e=L_(a,V_(r));a.assign(e);const t=L_(z_(P_(r,W_(L_(e,mA.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&D_(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}},class extends Z_{static get className(){return"Adam"}constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],F_((()=>{this.accBeta1=H_(t).variable(),this.accBeta2=H_(n).variable()})),null==s&&(this.epsilon=mA.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);F_((()=>{const n=eF(1,this.accBeta1),s=eF(1,this.accBeta2);t.forEach(((t,r)=>{const a=mA.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:F_((()=>U_(a).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:F_((()=>U_(a).variable(!1)))});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=L_(z_(i,this.beta1),z_(o,1-this.beta1)),c=L_(z_(l,this.beta2),z_(V_(o),1-this.beta2)),h=P_(u,n),d=P_(c,s);i.assign(u),l.assign(c);const p=L_(z_(P_(h,L_(W_(d),this.epsilon)),-this.learningRate),a);a.assign(p)})),this.accBeta1.assign(z_(this.accBeta1,this.beta1)),this.accBeta2.assign(z_(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&D_(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&D_(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),F_((()=>{this.accBeta1.assign(Q_(this.beta1,this.iterations_+1)),this.accBeta2.assign(Q_(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}},class extends Z_{static get className(){return"Adamax"}constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],F_((()=>{this.iteration=H_(0).variable(),this.accBeta1=H_(t).variable()})),null==s&&(this.epsilon=mA.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);F_((()=>{const n=eF(1,this.accBeta1),s=P_(-this.learningRate,L_(z_(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=mA.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:U_(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:U_(a).variable(!1)});const o=Array.isArray(e)?e[r].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=L_(z_(i,this.beta1),z_(o,1-this.beta1)),c=z_(l,this.beta2),h=tF(o),d=aF(c,h);i.assign(u),l.assign(d);const p=L_(z_(P_(s,n),P_(u,L_(d,this.epsilon))),a);a.assign(p)})),this.iteration.assign(L_(this.iteration,1)),this.accBeta1.assign(z_(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&D_(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&D_(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}},class extends oF{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=H_(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=mA.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:F_((()=>U_(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&F_((()=>{let e;const t=L_(z_(this.m,r),a);e=this.useNesterov?L_(z_(this.c,L_(a,z_(t,this.m))),s):L_(z_(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&D_(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}},class extends Z_{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=mA.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=mA.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:F_((()=>U_(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:F_((()=>U_(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:F_((()=>U_(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;F_((()=>{const e=L_(z_(o,this.decay),z_(V_(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=L_(z_(t,this.decay),z_(a,1-this.decay)),l=P_(z_(a,this.learningRate),W_(eF(e,L_(V_(r),this.epsilon)))),u=L_(z_(i,this.momentum),l);o.assign(e),t.assign(r),i.assign(u);const c=eF(s,u);s.assign(c)}else{const e=L_(z_(o,this.decay),z_(V_(a),1-this.decay)),t=L_(z_(i,this.momentum),P_(z_(a,this.learningRate),W_(L_(e,this.epsilon))));o.assign(e),i.assign(t);const n=eF(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&D_(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&D_(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&D_(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}},oF];function lF(e){return new Promise((e=>setTimeout(e))).then(e)}class uF{constructor(e){if(!V$().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(uF.URL_SCHEME)&&(e=e.slice(uF.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=AA.join(e.weightData),n=window.URL.createObjectURL(new Blob([t],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const t=zA(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(t)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await lF((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=n,await lF((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:UA(e)}}}}uF.URL_SCHEME="downloads://";class cF{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),r=s.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const a=VA(s,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(r).then((e=>[t,e]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>PA(e.name))),s={};for(const r of e)r.paths.forEach((e=>{const r=PA(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function hF(e){return new cF(e)}function dF(e,t,n,s){!function(e){u$(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){u$(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),u$(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),u$(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++r/e.length*(s-n);return t(o),a})),a))))}async function pF(e,t){null==t&&(t={});const n=null==t.fetchFunc?V$().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await dF(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await dF(r,t.onProgress,.5,1)}async function fF(e,t="",n,s){return mF((e=>pF(e,{requestInit:s})))(e,t,n)}function mF(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},o=null!=s?s.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=RA[l]*d$(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=u}))})),!o.every((e=>e))){const e=s.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let d=0;return l.forEach((e=>{const n=t[e].paths.length,s=new AA(c.slice(d,d+n));a[e].forEach((e=>{const t=DA(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),d+=n})),h}}jA.registerSaveRouter((e=>V$().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(uF.URL_SCHEME)?function(e="model"){return new uF(e)}(e.slice(uF.URL_SCHEME.length)):null));class gF{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(u$("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=V$().platform.fetch,u$(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&u$(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=zA(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData){const n=AA.join(e.weightData);t.body.append("model.weights.bin",new Blob([n],{type:"application/octet-stream"}),"model.weights.bin")}const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:UA(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return VA(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=GA(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(r+e+s);return this.weightUrlConverter&&o.push(...await Promise.all(i)),[a,await pF(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})]}}function xF(e){return null!=e.match(gF.URL_SCHEME_REGEX)}gF.URL_SCHEME_REGEX=/^https?:\/\//;const bF=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>xF(e))):xF(e),n)return yF(e,t)}return null};function yF(e,t){return new gF(e,t)}function vF(e,t){return yF(e,t)}jA.registerSaveRouter(bF),jA.registerLoadRouter(bF);class kF{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class wF{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class IF{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function NF(e,t,n,s){return new IF(SF(...arguments))}function SF(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new kF(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new kF({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new kF({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function $F(e){return new wF(e)}function CF(e){return new wF(e)}function TF(e,t,n){if(h$(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=vA(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return TA(e,t,s,n)}let EF;const RF=$A({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(null!=iR(JE,mA.backendName)){const n={pixels:e},s={numChannels:t};return mA.runKernel(JE,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(o)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(a||r||i){if(null==EF)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");EF=new OffscreenCanvas(1,1).getContext("2d")}else EF=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});EF.canvas.width=l,EF.canvas.height=u,EF.drawImage(e,0,0,l,u),c=EF.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return TF(h,[u,l,t],"int32")}}),AF=-2,_F=-1;function FF(e,t,n){const s=e.shape.length;u$(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),u$(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)u$(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function DF(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function OF(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function MF(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function LF(e,t,n){return n<=e?n:n-(t-1)}function BF(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function PF(e,t,n,s,r,a,o,i,l){const u=e.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=zF(o,l,u,s,e),h=WF(i,l,u,r,e),d=MF(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=UF(o,s,a,e,t,l),h[t]=GF(i,r,a,e,t,l),d[t]=VF(a,t,l);return{begin:c,end:h,strides:d}}function zF(e,t,n,s,r){const a=[...r],o=BF(n,t);for(let r=0;r<a.length;r++)if(o.indexOf(r)>-1)a[r]=0;else{const o=LF(t,n,r);let i=s[o];e&1<<o&&(i=0),a[r]=i}return a}function WF(e,t,n,s,r){const a=[...r],o=BF(n,t);for(let r=0;r<a.length;r++)if(o.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const o=LF(t,n,r);let i=s[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),a[r]=i}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=o$(0,a[e],r[e])}return a}function VF(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function UF(e,t,n,s,r,a){let o=t[r];const i=n[r]||1;(e&1<<r||a&1<<r||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=o$(0,o,l-1),o}function GF(e,t,n,s,r,a){let o=t[r];const i=n[r]||1;(e&1<<r||a&1<<r||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return o<0&&(o+=l),o=i>0?o$(0,o,l):o$(-1,o,l-1),o}function HF(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function jF(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function KF(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{u$(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(u$(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function qF(e,t,n,s,r,a,o,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&i)&&h.numAddAxisAfterEllipsis++,1<<e&o&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(AF),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(_F),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,d);let p=!0,f=!0,m=!0;const g=[],x=[];for(let t=0;t<e.length;++t){if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(d.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const r=[d.beginMask&1<<t,d.endMask&1<<t],a=[d.strides[t]>0?0:-1,d.strides[t]>0?s:s-1];if(n&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[t];const o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(n){const e=d.begin[t]<0?s+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=s)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=XF(d.begin[t],0,d.strides[t],s,r,a),d.end[t]=XF(d.end[t],1,d.strides[t],s,r,a);const e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===s;p=p&&e,f=f&&(0===t&&1===d.strides[t]||e)}else p=p&&1===d.strides[t]&&o,f=f&&(0===t&&1===d.strides[t]||o);let i,l=!1;if(d.beginValid&&d.endValid?(i=d.end[t]-d.begin[t],l=!0):n?(i=1,l=!0):o&&s>=0&&(i=d.strides[t]<0?-s:s,l=!0),l){let e;e=0===i||i<0!=d.strides[t]<0?0:Math.trunc(i/d.strides[t])+(i%d.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){const t=d.finalShapeGatherIndices[e];t>=0?x.push(g[t]):t===AF&&x.push(1)}return{finalShapeSparse:x.filter(((e,t)=>d.finalShapeGatherIndices[t]!==AF)),finalShape:x,isIdentity:p,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function XF(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}const YF=$A({acos_:function(e){const t={x:IA(e,"x","acos")};return mA.runKernel(q$,t)}}),ZF=$A({acosh_:function(e){const t={x:IA(e,"x","acosh")};return mA.runKernel(X$,t)}}),JF=$A({addN_:function(e){u$(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),u$(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>IA(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!p$(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return mA.runKernel(Z$,s)}}),QF=$A({all_:function(e,t=null,n=!1){const s={x:IA(e,"x","all","bool")},r={axis:t,keepDims:n};return mA.runKernel(J$,s,r)}}),eD=$A({any_:function(e,t=null,n=!1){const s={x:IA(e,"x","any","bool")},r={axis:t,keepDims:n};return mA.runKernel(Q$,s,r)}}),tD=$A({argMax_:function(e,t=0){const n={x:IA(e,"x","argMax")},s={axis:t};return mA.runKernel(eC,n,s)}}),nD=$A({argMin_:function(e,t=0){const n={x:IA(e,"x","argMin")},s={axis:t};return mA.runKernel(tC,n,s)}}),sD=$A({asin_:function(e){const t={x:IA(e,"x","asin")};return mA.runKernel(nC,t)}}),rD=$A({asinh_:function(e){const t={x:IA(e,"x","asinh")};return mA.runKernel(sC,t)}}),aD=$A({atan_:function(e){const t={x:IA(e,"x","atan")};return mA.runKernel(rC,t)}}),oD=$A({atan2_:function(e,t){let n=IA(e,"a","atan2"),s=IA(t,"b","atan2");[n,s]=lA(n,s);const r={a:n,b:s};return mA.runKernel(oC,r)}}),iD=$A({atanh_:function(e){const t={x:IA(e,"x","atanh")};return mA.runKernel(aC,t)}});function lD(e,t,n,s,r="NHWC",a){return hD(e,[...t,e[3]],n,a,s,null,null,kD(r))}function uD(e,t,n,s,r,a,o="channelsLast"){const[i,l]=fD(t);let u;if("channelsLast"===o)u=[i,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);u=[i,l,e[1],e[1]]}return hD(e,u,n,s,r,a,!1,o)}function cD(e,t,n,s,r,a,o="NDHWC"){const[i,l,u]=mD(t);let c,h;if("NDHWC"===o)h="channelsLast",c=[i,l,u,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",c=[i,l,u,e[1],e[1]]}return dD(e,c,n,s,r,!1,h,a)}function hD(e,t,n,s,r,a,o=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=e}const[d,p,,f]=t,[m,g]=fD(n),[x,b]=fD(s),y=gD(d,x),v=gD(p,b),{padInfo:k,outHeight:w,outWidth:I}=function(e,t,n,s,r,a,o,i,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=pD(e,t,n));const a=e[1];return[xD((e[0]-t+2*s)/n+1,r),xD((a-t+2*s)/n+1,r)]}([t,n],a,s,e,i);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),i=Math.max(0,(h-1)*r+o-n),l=Math.floor(e/2),d=e-l,p=Math.floor(i/2);u={top:l,bottom:d,left:p,right:i-p,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-o+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===l?e[1][0]:e[2][0],p="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=xD((t-a+d+p)/s+1,i),h=xD((n-o+f+m)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,y,v,a,i),N=o?f*h:f;let S;return"channelsFirst"===i?S=[l,N,w,I]:"channelsLast"===i&&(S=[l,w,I,N]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:w,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:y,effectiveFilterWidth:v,dilationHeight:x,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function dD(e,t,n,s,r,a=!1,o="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h,d]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,d,u,c,h]=e}const[p,f,m,,g]=t,[x,b,y]=mD(n),[v,k,w]=mD(s),I=gD(p,v),N=gD(f,k),S=gD(m,w),{padInfo:$,outDepth:C,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,o,i,l,u,c){let h,d,p,f;if("valid"===e&&(e=0),"number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,s,r,a){null==r&&(r=pD(e,t[0],s[0]));const o=[0,0,0,1];for(let n=0;n<3;n++)e[n]+2*r>=t[n]&&(o[n]=xD((e[n]-t[n]+2*r)/s[n]+1,a));return o}([t,n,s,1],[i,l,u],0,[r,a,o],e,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{d=Math.ceil(t/r),p=Math.ceil(n/a),f=Math.ceil(s/o);const e=(d-1)*r+i-t,c=(p-1)*a+l-n,m=(f-1)*o+u-s,g=Math.floor(e/2),x=e-g,b=Math.floor(c/2),y=c-b,v=Math.floor(m/2);h={top:b,bottom:y,left:v,right:m-v,front:g,back:x,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,x,b,y,I,N,S,i),R=a?g*d:g;let A;return"channelsFirst"===o?A=[l,R,C,T,E]:"channelsLast"===o&&(A=[l,C,T,E,R]),{batchSize:l,dataFormat:o,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:C,outHeight:T,outWidth:E,outChannels:R,padInfo:$,strideDepth:x,strideHeight:b,strideWidth:y,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:v,dilationHeight:k,dilationWidth:w,inShape:e,outShape:A,filterShape:t}}function pD(e,t,n,s=1){const r=gD(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function fD(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function mD(e){return"number"==typeof e?[e,e,e]:e}function gD(e,t){return t<=1?e:e+(e-1)*(t-1)}function xD(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function bD(e){const[t,n,s]=fD(e);return 1===t&&1===n&&1===s}function yD(e,t){return bD(e)||bD(t)}function vD(e){return fD(e).every((e=>e>0))}function kD(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function wD(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)u$(f$(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{u$(f$(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const ID=$A({reshape_:function(e,t){const n={x:IA(e,"x","reshape","string_or_numeric")},s={shape:t};return mA.runKernel(sE,n,s)}}),ND=$A({avgPool_:function(e,t,n,s,r){const a=IA(e,"x","avgPool","float32");u$(yD(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=ID(a,[1,a.shape[0],a.shape[1],a.shape[2]])),u$(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),wD("avgPool",s,r);const l={x:o},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=mA.runKernel(iC,l,u);return c=E_(c,a.dtype),i?ID(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),SD=$A({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const o=IA(e,"x","avgPool3d","float32");let i=o,l=!1;4===o.rank&&(l=!0,i=ID(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),u$(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),u$("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),u$("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),wD("avgPool3d",s,r);const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=mA.runKernel(uC,u,c);return h=E_(h,i.dtype),l?ID(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),$D=$A({concat_:function(e,t=0){u$(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=NA(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return R_(n[0]);const s=n,r={axis:t};return mA.runKernel(kC,s,r)}}),CD=$A({matMul_:function(e,t,n=!1,s=!1){let r=IA(e,"a","matMul"),a=IA(t,"b","matMul");[r,a]=lA(r,a);const o={a:r,b:a},i={transposeA:n,transposeB:s};return mA.runKernel(hC,o,i)}}),TD=$A({sigmoid_:function(e){const t={x:IA(e,"x","sigmoid","float32")};return mA.runKernel(kE,t)}}),ED=$A({slice_:function(e,t,n){const s=IA(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return mA.runKernel(xE,r,a)}}),RD=$A({tanh_:function(e){const t={x:IA(e,"x","tanh","float32")};return mA.runKernel(VE,t)}}),AD=$A({basicLSTMCell_:function(e,t,n,s,r,a){const o=IA(e,"forgetBias","basicLSTMCell"),i=IA(t,"lstmKernel","basicLSTMCell"),l=IA(n,"lstmBias","basicLSTMCell"),u=IA(s,"data","basicLSTMCell"),c=IA(r,"c","basicLSTMCell"),h=IA(a,"h","basicLSTMCell"),d=$D([u,h],1),p=CD(d,i),f=L_(p,l),m=f.shape[0],g=f.shape[1]/4,x=[m,g],b=ED(f,[0,0],x),y=ED(f,[0,g],x),v=ED(f,[0,2*g],x),k=ED(f,[0,3*g],x),w=L_(z_(TD(b),RD(y)),z_(c,TD(L_(o,v))));return[w,z_(RD(w),TD(k))]}}),_D=$A({batchToSpaceND_:function(e,t,n){const s=IA(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));u$(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),u$(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),u$(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},o={blockShape:t,crops:n};return mA.runKernel(dC,a,o)}}),FD=$A({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const o=IA(e,"x","batchNorm"),i=IA(t,"mean","batchNorm"),l=IA(n,"variance","batchNorm");let u,c;null!=r&&(u=IA(r,"scale","batchNorm")),null!=s&&(c=IA(s,"offset","batchNorm")),u$(i.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),u$(null==c||i.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),u$(null==u||i.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?ID(e,[1,1,1,e.size]):2===e.rank?ID(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ID(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:u,offset:c,mean:i,variance:l},d={varianceEpsilon:a},p=mA.runKernel(nT,h,d);return ID(p,o.shape)}}),DD=$A({batchNorm2d_:function(e,t,n,s,r,a){const o=IA(e,"x","batchNorm"),i=IA(t,"mean","batchNorm"),l=IA(n,"variance","batchNorm");let u,c;return null!=r&&(u=IA(r,"scale","batchNorm")),null!=s&&(c=IA(s,"offset","batchNorm")),u$(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),u$(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),u$(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&u$(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&u$(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),FD(o,i,l,c,u,a)}}),OD=$A({batchNorm3d_:function(e,t,n,s,r,a){const o=IA(e,"x","batchNorm"),i=IA(t,"mean","batchNorm"),l=IA(n,"variance","batchNorm");let u,c;return null!=r&&(u=IA(r,"scale","batchNorm")),null!=s&&(c=IA(s,"offset","batchNorm")),u$(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),u$(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),u$(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&u$(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&u$(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),FD(o,i,l,c,u,a)}}),MD=$A({batchNorm4d_:function(e,t,n,s,r,a){const o=IA(e,"x","batchNorm"),i=IA(t,"mean","batchNorm"),l=IA(n,"variance","batchNorm");let u,c;return null!=r&&(u=IA(r,"scale","batchNorm")),null!=s&&(c=IA(s,"offset","batchNorm")),u$(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),u$(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),u$(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&u$(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&u$(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),FD(o,i,l,c,u,a)}}),LD=$A({bincount_:function(e,t,n){const s=IA(e,"x","bincount"),r=IA(t,"weights","bincount");u$("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),u$(n>=0,(()=>`size must be non-negative, but got ${n}.`)),u$(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},o={size:n};return mA.runKernel(pC,a,o)}}),BD=$A({bitwiseAnd_:function(e,t){const n=IA(e,"x","bitwiseAnd"),s=IA(t,"y","bitwiseAnd");if(!p$(n.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${s.shape}`);if("int32"!==n.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${s.dtype}`);const r={a:n,b:s};return mA.runKernel(fC,r)}}),PD=$A({broadcastArgs_:function(e,t){const n=IA(e,"s0","broadcastArgs","int32"),s=IA(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return mA.runKernel(mC,r)}}),zD=$A({broadcastTo_:function(e,t){let n=IA(e,"broadcastTo","x");const s=n.shape;if(O$(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ID(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return R_(n);const o={x:n},i={reps:a};return mA.runKernel(UE,o,i)}}),WD=$A({ceil_:function(e){const t={x:IA(e,"x","ceil","float32")};return mA.runKernel(xC,t)}}),VD=$A({clipByValue_:function(e,t,n){const s=IA(e,"x","clipByValue");if(u$(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return J_(s.shape,t,s.dtype);const r={x:s},a={clipValueMin:t,clipValueMax:n};return mA.runKernel(bC,r,a)}}),UD=$A({concat1d_:function(e){return $D(e,0)}}),GD=$A({concat2d_:function(e,t){return $D(e,t)}}),HD=$A({concat3d_:function(e,t){return $D(e,t)}}),jD=$A({concat4d_:function(e,t){return $D(e,t)}}),KD=$A({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],o){const i=IA(e,"x","conv2d","float32"),l=IA(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=ID(i,[1,i.shape[0],i.shape[1],i.shape[2]])),u$(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),u$(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),wD("conv2d",s,o);const h="NHWC"===r?u.shape[3]:u.shape[1];u$(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),u$(yD(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),u$(vD(a),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),u$(vD(n),(()=>"Error in conv2D: Strides should be larger than 0."));const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o},f=mA.runKernel(wC,d,p);return c?ID(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),qD=$A({conv1d_:function(e,t,n,s,r="NWC",a=1,o){const i=IA(e,"x","conv1d"),l=IA(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=ID(i,[1,i.shape[0],i.shape[1]])),u$(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),u$(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),wD("conv1d",s,o),u$(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),u$(yD(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),u$(vD(a),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),u$(vD(n),(()=>"Error in conv1D: Stride should be larger than 0.")),u$("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=ID(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=ID(u,[u.shape[0],1,u.shape[1],u.shape[2]]),p=KD(d,h,[1,n],s,"NHWC",[1,a],o);return ID(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}}),XD=$A({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",o){u$(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,l=t,u=!1;3===t.rank&&(u=!0,l=ID(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),u$(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),u$(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),u$(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?i[3]:i[1],h="NHWC"===a?l.shape[3]:l.shape[1];u$(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),u$(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),wD("conv2dDerInput",r,o);const d={dy:l,filter:n},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:o,inputShape:i},f=mA.runKernel(NC,d,p);return u?ID(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),YD=$A({conv2dTranspose_:function(e,t,n,s,r,a){const o=IA(e,"x","conv2dTranspose"),i=IA(t,"filter","conv2dTranspose");return XD(n,o,i,s,r,"NHWC",a)}}),ZD=$A({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const o=IA(e,"x","conv3d"),i=IA(t,"filter","conv3d");let l=o,u=!1;4===o.rank&&(u=!0,l=ID(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),u$(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),u$(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),u$(l.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),u$(yD(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),u$("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`)),u$(vD(a),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),u$(vD(n),(()=>"Error in conv3D: Strides should be larger than 0."));const c={x:l,filter:i},h={strides:n,pad:s,dataFormat:r,dilations:a},d=mA.runKernel(SC,c,h);return u?ID(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),JD=$A({conv3DBackpropInput_:function(e,t,n,s,r){u$(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=ID(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=o.shape[4];u$(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),u$(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),u$(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),u$(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),u$(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:o,filter:n},h={pad:r,strides:s,inputShape:a},d=mA.runKernel(CC,c,h);return i?ID(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),QD=$A({conv3dTranspose_:function(e,t,n,s,r){const a=IA(e,"x","conv3dTranspose"),o=IA(t,"filter","conv3dTranspose");return JD(n,a,o,s,r)}}),eO=$A({cos_:function(e){const t={x:IA(e,"x","cos","float32")};return mA.runKernel(TC,t)}}),tO=$A({cosh_:function(e){const t={x:IA(e,"x","cosh","float32")};return mA.runKernel(EC,t)}}),nO=$A({cumprod_:function(e,t=0,n=!1,s=!1){const r={x:IA(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:s};return mA.runKernel(RC,r,a)}}),sO=$A({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:IA(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return mA.runKernel(AC,r,a)}}),rO=$A({denseBincount_:function(e,t,n,s=!1){const r=IA(e,"x","denseBincount"),a=IA(t,"weights","denseBincount");u$("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),u$(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),u$(n>=0,(()=>`size must be non-negative, but got ${n}.`)),u$(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const o={x:r,weights:a},i={size:n,binaryOutput:s};return mA.runKernel(FC,o,i)}}),aO=$A({depthToSpace_:function(e,t,n="NHWC"){const s=IA(e,"x","depthToSpace","float32"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],o="NHWC"===n?s.shape[3]:s.shape[1];u$(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),u$(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),u$(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),u$(o%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${s.shape}`));const i={x:s},l={blockSize:t,dataFormat:n};return mA.runKernel(DC,i,l)}}),oO=$A({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],o){const i=IA(e,"x","depthwiseConv2d","float32"),l=IA(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=ID(i,[1,i.shape[0],i.shape[1],i.shape[2]])),u$(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),u$(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];u$(h===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`)),wD("depthwiseConv2d",s,o);const d={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o},f=mA.runKernel(OC,d,p);return c?ID(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),iO=$A({diag_:function(e){const t={x:IA(e,"x","diag")};return mA.runKernel(BC,t)}}),lO=$A({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const o=IA(e,"x","dilation2d"),i=IA(t,"filter","dilation2d");u$(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),u$(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),u$("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=o,u=!1;3===o.rank&&(l=ID(o,[1,o.shape[0],o.shape[1],o.shape[2]]),u=!0),u$(l.shape[3]===i.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`));const c={x:l,filter:i},h={strides:n,pad:s,dilations:r},d=mA.runKernel(PC,c,h);return u?ID(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),uO=$A({equal_:function(e,t){let n=IA(e,"a","equal","string_or_numeric"),s=IA(t,"b","equal","string_or_numeric");[n,s]=lA(n,s),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(KC,r)}}),cO=$A({where_:function(e,t,n){const s=IA(t,"a","where"),r=IA(n,"b","where"),a=IA(e,"condition","where","bool"),o=rF(rF(a.shape,s.shape),r.shape),i={condition:zD(a,o),t:zD(s,o),e:zD(r,o)};return mA.runKernel(mE,i)}}),hO=$A({divNoNan_:function(e,t){let n=IA(e,"a","div"),s=IA(t,"b","div");[n,s]=lA(n,s);const r=P_(n,s),a=U_(r),o=uO(s,a);return cO(o,a,r)}}),dO=$A({dot_:function(e,t){const n=IA(e,"t1","dot"),s=IA(t,"t2","dot");u$(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(u$(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=ID(n,[1,-1]),t=ID(s,[-1,1]),r=CD(e,t);return ID(r,[])}if(1===n.rank&&2===s.rank){const e=ID(n,[1,-1]),t=ID(s,[s.shape[0],s.shape[1]]),r=CD(e,t);return ID(r,[r.size])}if(2===n.rank&&1===s.rank){const e=ID(s,[-1,1]),t=CD(n,e);return ID(t,[t.size])}{const e=ID(s,[s.shape[0],s.shape[1]]);return CD(n,e)}}}),pO=$A({einsum_:function(e,...t){const n=t.map(((e,t)=>IA(e,`tensors${t}`,"einsum"))),s={equation:e};return mA.runKernel(UC,n,s)}}),fO=$A({elu_:function(e){const t={x:IA(e,"x","elu","float32")};return mA.runKernel(GC,t)}}),mO=$A({ensureShape_:function(e,t){const n=IA(e,"x","ensureShape","string_or_numeric");if(!function(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}}),gO=$A({erf_:function(e){let t=IA(e,"x","erf");u$("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=E_(t,"float32"));const n={x:t};return mA.runKernel(jC,n)}});function xO(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function bO(e,t,n){const s=e.length+t.length,r=[];let a=0,o=0;for(let i=0;i<s;i++)-1===n.indexOf(i)?r.push(e[a++]):r.push(t[o++]);return r}function yO(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function vO(e,t){return bO(e,t.map((e=>1)),t)}function kO(e,t,n){u$(xO(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function wO(e,t){if(xO(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function IO(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function NO(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const SO=$A({max_:function(e,t=null,n=!1){const s={x:IA(e,"x","max")},r={reductionIndices:t,keepDims:n};return mA.runKernel(NT,s,r)}}),$O=$A({min_:function(e,t=null,n=!1){const s={x:IA(e,"x","min")},r={axis:t,keepDims:n};return mA.runKernel(_T,s,r)}}),CO=$A({sum_:function(e,t=null,n=!1){let s=IA(e,"x","sum");"bool"===s.dtype&&(s=E_(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return mA.runKernel(NE,r,a)}});function TO(e,t,n=null){if(0===e.rank)return tF(e);if(1!==e.rank&&null===n)return TO(ID(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return CO(tF(e),n);if(t===1/0)return SO(tF(e),n);if(t===-1/0)return $O(tF(e),n);if("euclidean"===t||2===t)return W_(CO(Q_(tF(e),H_(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return SO(CO(tF(e),n[0]),n[1]-1);if(t===1/0)return SO(CO(tF(e),n[1]),n[0]);if(t===-1/0)return $O(CO(tF(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return W_(CO(V_(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const EO=$A({norm_:function(e,t="euclidean",n=null,s=!1){const r=TO(e=IA(e,"x","norm"),t,n);let a=r.shape;if(s){const t=y$(n,e.shape);a=vO(r.shape,t)}return ID(r,a)}}),RO=$A({euclideanNorm_:function(e,t=null,n=!1){return EO(e,"euclidean",t,n)}}),AO=$A({exp_:function(e){const t={x:IA(e,"x","exp")};return mA.runKernel(qC,t)}}),_O=$A({expandDims_:function(e,t=0){const n=IA(e,"x","expandDims","string_or_numeric");u$(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return mA.runKernel(XC,s,r)}}),FO=$A({expm1_:function(e){const t={x:IA(e,"x","expm1")};return mA.runKernel(YC,t)}}),DO=$A({tile_:function(e,t){const n=IA(e,"x","tile","string_or_numeric");u$(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return mA.runKernel(UE,s,r)}}),OO=$A({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=T_([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const o=ID(r.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return DO(_O(o,0),[n[0],1,1]);if(2===n.length)return DO(_O(_O(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return DO(_O(_O(_O(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),MO=$A({floor_:function(e){const t={x:IA(e,"x","floor","float32")};return mA.runKernel(eT,t)}}),LO=$A({gather_:function(e,t,n=0,s=0){const r={x:IA(e,"x","gather"),indices:IA(t,"indices","gather","int32")},a={axis:n,batchDims:s};return mA.runKernel(sT,r,a)}}),BO=$A({greater_:function(e,t){let n=IA(e,"a","greater","string_or_numeric"),s=IA(t,"b","greater","string_or_numeric");[n,s]=lA(n,s),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(aT,r)}}),PO=$A({greaterEqual_:function(e,t){let n=IA(e,"a","greaterEqual","string_or_numeric"),s=IA(t,"b","greaterEqual","string_or_numeric");[n,s]=lA(n,s),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(oT,r)}}),zO=$A({imag_:function(e){const t={input:IA(e,"input","imag")};return mA.runKernel(uT,t)}}),WO=$A({isFinite_:function(e){const t={x:IA(e,"x","isFinite")};return mA.runKernel(cT,t)}}),VO=$A({isInf_:function(e){const t={x:IA(e,"x","isInf")};return mA.runKernel(hT,t)}}),UO=$A({isNaN_:function(e){const t={x:IA(e,"x","isNaN")};return mA.runKernel(dT,t)}}),GO=$A({leakyRelu_:function(e,t=.2){const n={x:IA(e,"x","leakyRelu")},s={alpha:t};return mA.runKernel(pT,n,s)}}),HO=$A({less_:function(e,t){let n=IA(e,"a","less","string_or_numeric"),s=IA(t,"b","less","string_or_numeric");[n,s]=lA(n,s),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(fT,r)}}),jO=$A({lessEqual_:function(e,t){let n=IA(e,"a","lessEqual","string_or_numeric"),s=IA(t,"b","lessEqual","string_or_numeric");[n,s]=lA(n,s),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(mT,r)}});function KO(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return mA.runKernel(gT,{},s)}const qO=$A({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=IA(e,"x","localResponseNormalization");u$(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),u$(f$(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=ID(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:o},u={depthRadius:t,bias:n,alpha:s,beta:r},c=mA.runKernel(wT,l,u);return i?ID(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),XO=$A({log_:function(e){const t={x:IA(e,"x","log","float32")};return mA.runKernel(xT,t)}}),YO=$A({log1p_:function(e){const t={x:IA(e,"x","log1p")};return mA.runKernel(bT,t)}}),ZO=$A({neg_:function(e){const t={x:IA(e,"x","neg")};return mA.runKernel(BT,t)}}),JO=$A({softplus_:function(e){const t={x:IA(e,"x","softplus")};return mA.runKernel(wE,t)}}),QO=$A({logSigmoid_:function(e){const t=IA(e,"x","logSigmoid");return G_((e=>({value:ZO(JO(ZO(e))),gradFunc:t=>z_(t,TD(ZO(e)))})))(t)}}),eM=$A({logSoftmax_:function(e,t=-1){const n=IA(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const s=G_(((e,n)=>{const s=SO(e,t,!0),r=eF(e,s),a=eF(E_(r,"float32"),XO(CO(AO(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=AO(s);return eF(e,z_(CO(e,t,!0),r))}}}));return s(n)}}),tM=$A({logSumExp_:function(e,t=null,n=!1){const s=IA(e,"x","logSumExp"),r=y$(t,s.shape),a=SO(s,r,!0),o=eF(s,a),i=AO(o),l=CO(i,r),u=XO(l),c=L_(ID(a,u.shape),u);if(n){const e=vO(c.shape,r);return ID(c,e)}return c}}),nM=$A({logicalAnd_:function(e,t){const n=IA(e,"a","logicalAnd","bool"),s=IA(t,"b","logicalAnd","bool");rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(yT,r)}}),sM=$A({logicalNot_:function(e){const t={x:IA(e,"x","logicalNot","bool")};return mA.runKernel(vT,t)}}),rM=$A({logicalOr_:function(e,t){const n=IA(e,"a","logicalOr","bool"),s=IA(t,"b","logicalOr","bool");rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(kT,r)}}),aM=$A({logicalXor_:function(e,t){const n=IA(e,"a","logicalXor","bool"),s=IA(t,"b","logicalXor","bool");return rF(n.shape,s.shape),nM(rM(e,t),sM(nM(e,t)))}}),oM=2147483648,iM=$A({searchSorted_:function(e,t,n="left"){const s=IA(e,"sortedSequence","searchSorted"),r=IA(t,"values","searchSorted"),a=s.shape[s.shape.length-1],o=r.shape[r.shape.length-1],i=ID(s,[-1,a]),l=ID(r,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(d$(l.shape)>=oM)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=oM)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const u={sortedSequence:i,values:l},c={side:n};return mA.runKernel(fE,u,c)}});function lM(e,t){return iM(e,t,"left")}const uM=$A({maxPool_:function(e,t,n,s,r){const a=IA(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=ID(a,[1,a.shape[0],a.shape[1],a.shape[2]])),u$(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),u$(yD(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),wD("maxPool",s,r);const l={x:o},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=mA.runKernel($T,l,u);return i?ID(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),cM=$A({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const o=IA(e,"x","maxPool3d");let i=o,l=!1;4===o.rank&&(l=!0,i=ID(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),u$(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),u$("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),wD("maxPool3d",s,r);const u={x:i},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=mA.runKernel(TT,u,c);return l?ID(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),hM=$A({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:IA(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},i=mA.runKernel(RT,a,o);return{result:i[0],indexes:i[1]}}}),dM=$A({mean_:function(e,t=null,n=!1){const s={x:IA(e,"x","mean")},r={axis:t,keepDims:n};return mA.runKernel(AT,s,r)}});function pM(e,t="float32"){if(O$(e),"complex64"===t){const t=pM(e,"float32"),n=pM(e,"float32");return CA(t,n)}const n=F$(d$(e),t);return mA.makeTensor(n,e,t)}function fM(e,t="float32"){if(O$(e),"complex64"===t){const t=fM(e,"float32"),n=pM(e,"float32");return CA(t,n)}const n=_$(d$(e),t);return mA.makeTensor(n,e,t)}function mM(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=IA(e,"x","meshgrid",e instanceof XR?e.dtype:"float32");if(void 0===t)return[s];let r=IA(t,"y","meshgrid",t instanceof XR?t.dtype:"float32");const a=d$(s.shape),o=d$(r.shape);return"xy"===n?(s=ID(s,[1,-1]),r=ID(r,[-1,1]),[CD(fM([o,1],s.dtype),s),CD(r,fM([1,a],r.dtype))]):(s=ID(s,[-1,1]),r=ID(r,[1,-1]),[CD(s,fM([1,o],s.dtype)),CD(fM([a,1],r.dtype),r)])}const gM=$A({minimum_:function(e,t){let n=IA(e,"a","minimum"),s=IA(t,"b","minimum");[n,s]=lA(n,s),"bool"===n.dtype&&(n=E_(n,"int32"),s=E_(s,"int32")),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(FT,r)}}),xM=$A({mirrorPad_:function(e,t,n){u$("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=IA(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");u$(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)u$(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),u$(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},o={x:s};return mA.runKernel(DT,o,a)}}),bM=$A({mod_:function(e,t){let n=IA(e,"a","mod"),s=IA(t,"b","mod");[n,s]=lA(n,s);const r={a:n,b:s};return mA.runKernel(OT,r)}}),yM=$A({moments_:function(e,t=null,n=!1){const s=y$(t,(e=IA(e,"x","moments")).shape),r=dM(e,s,n);let a=r.shape;n||(a=vO(r.shape,s));const o=V_(eF(E_(e,"float32"),ID(r,a)));return{mean:r,variance:dM(o,s,n)}}}),vM=$A({multiRNNCell_:function(e,t,n,s){const r=IA(t,"data","multiRNNCell"),a=NA(n,"c","multiRNNCell"),o=NA(s,"h","multiRNNCell");let i=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);l.push(n[0]),l.push(n[1]),i=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}}),kM=$A({multinomial_:function(e,t,n,s=!1){const r=IA(e,"logits","multinomial"),a=r.size,o=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?ID(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=mA.runKernel(MT,i,l);return 1===o?ID(u,[u.size]):u}}),wM=$A({notEqual_:function(e,t){let n=IA(e,"a","notEqual","string_or_numeric"),s=IA(t,"b","notEqual","string_or_numeric");[n,s]=lA(n,s),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(PT,r)}}),IM=$A({oneHot_:function(e,t,n=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:IA(e,"indices","oneHot","int32")},o={dtype:r,depth:t,onValue:n,offValue:s};return mA.runKernel(GT,a,o)}}),NM=$A({onesLike_:function(e){const t={x:IA(e,"x","onesLike")};return mA.runKernel(UT,t)}}),SM=$A({outerProduct_:function(e,t){const n=IA(e,"v1","outerProduct"),s=IA(t,"v2","outerProduct");u$(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=ID(n,[-1,1]),a=ID(s,[1,-1]);return CD(r,a)}}),$M=$A({pad_:function(e,t,n=0){const s=IA(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return mA.runKernel(jT,a,r)}}),CM=$A({pad1d_:function(e,t,n=0){return u$(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),$M(e,[t],n)}}),TM=$A({pad2d_:function(e,t,n=0){return u$(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),$M(e,t,n)}}),EM=$A({pad3d_:function(e,t,n=0){return u$(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),$M(e,t,n)}}),RM=$A({pad4d_:function(e,t,n=0){return u$(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),$M(e,t,n)}}),AM=$A({spaceToBatchND_:function(e,t,n){const s=IA(e,"x","spaceToBatchND");u$(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),u$(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),u$(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return mA.runKernel(SE,r,a)}}),_M=$A({pool_:function(e,t,n,s,r,a,o){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=IA(e,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=ID(i,[1,i.shape[0],i.shape[1],i.shape[2]])),u$(yD(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=uD(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=r.map(((e,t)=>e+o[t]));return[t.map(((e,t)=>[s[t],i[t]])),t.map(((e,t)=>[0,o[t]]))]}([c.inHeight,c.inWidth],h,d),g=p?s:"valid",x=p?l:AM(l,h,f),b=("avg"===n?()=>ND(x,t,a,g,o):()=>uM(x,t,a,g,o))(),y=p?b:_D(b,h,m);return u?ID(y,[y.shape[1],y.shape[2],y.shape[3]]):y}}),FM=$A({prelu_:function(e,t){const n={x:IA(e,"x","prelu"),alpha:IA(t,"alpha","prelu")};return mA.runKernel(qT,n)}}),DM=$A({prod_:function(e,t=null,n=!1){let s=IA(e,"x","prod");"bool"===s.dtype&&(s=E_(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return mA.runKernel(XT,r,a)}}),OM=$A({raggedGather_:function(e,t,n,s){const r={paramsNestedSplits:e.map(((e,t)=>IA(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:IA(t,"paramsDenseValues","raggedGather"),indices:IA(n,"indices","raggedGather","int32")},a={outputRaggedRank:s},o=mA.runKernel(YT,r,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),MM=$A({raggedRange_:function(e,t,n){const s=IA(e,"starts","raggedRange"),r={starts:s,limits:IA(t,"limits","raggedRange",s.dtype),deltas:IA(n,"deltas","raggedRange",s.dtype)},a=mA.runKernel(ZT,r);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}}),LM=$A({raggedTensorToTensor_:function(e,t,n,s,r){const a=IA(e,"shape","raggedTensorToTensor","int32"),o=IA(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:IA(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:s.map(((e,t)=>IA(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:r};return mA.runKernel(JT,i,l)}}),BM=$A({rand_:function(e,t,n){O$(e);const s=d$(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return mA.makeTensor(r,e,n)}});class PM{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=ol.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*o,t=this.mean+this.stdDev*r*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class zM{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=ol.alea(r.toString()),this.randn=new PM(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class WM{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=ol.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const VM=$A({randomGamma_:function(e,t,n=1,s="float32",r){if(O$(e),null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new zM(t,n,s,r),o=T_(e,s);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),UM=$A({randomNormal_:function(e,t=0,n=1,s,r){if(O$(e),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new PM(t,n,s,!1,r),o=T_(e,s);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),GM=$A({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return UM(e,0,1,t,n)}}),HM=$A({randomUniform_:function(e,t=0,n=1,s="float32",r){O$(e);const a=T_(e,s),o=new WM(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}}),jM=$A({randomUniformInt_:function(e,t,n,s){return HM(e,t,n,"int32",s)}});function KM(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return mA.runKernel(QT,{},r)}const qM=$A({real_:function(e){const t={input:IA(e,"input","real")};return mA.runKernel(eE,t)}}),XM=$A({reciprocal_:function(e){const t={x:IA(e,"x","reciprocal")};return mA.runKernel(tE,t)}}),YM=$A({relu_:function(e){const t={x:IA(e,"x","relu")};return mA.runKernel(nE,t)}}),ZM=$A({relu6_:function(e){const t={x:IA(e,"x","relu6")};return mA.runKernel(lE,t)}}),JM=$A({reverse_:function(e,t){const n={x:IA(e,"x","reverse")},s={dims:t};return mA.runKernel(uE,n,s)}}),QM=$A({reverse1d_:function(e){const t=IA(e,"x","reverse");return u$(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),JM(t,0)}}),eL=$A({reverse2d_:function(e,t){const n=IA(e,"x","reverse");return u$(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),JM(n,t)}}),tL=$A({reverse3d_:function(e,t){const n=IA(e,"x","reverse");return u$(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),JM(n,t)}}),nL=$A({reverse4d_:function(e,t){const n=IA(e,"x","reverse");return u$(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),JM(n,t)}}),sL=$A({round_:function(e){const t={x:IA(e,"x","round")};return mA.runKernel(cE,t)}}),rL=$A({rsqrt_:function(e){const t={x:IA(e,"x","rsqrt","float32")};return mA.runKernel(hE,t)}}),aL=$A({selu_:function(e){const t={x:IA(e,"x","selu")};return mA.runKernel(gE,t)}}),oL=$A({separableConv2d_:function(e,t,n,s,r,a=[1,1],o="NHWC"){const i=IA(e,"x","separableConv2d"),l=IA(t,"depthwiseFilter","separableConv2d"),u=IA(n,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=ID(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");u$(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),u$(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),u$(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),u$(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),u$(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const d=l.shape[2],p=l.shape[3];u$(u.shape[2]===d*p,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`));const f=oO(c,l,s,r,o,a),m=KD(f,u,1,"valid",o);return h?ID(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),iL=async function(e,t){const n=IA(e,"x","setdiff1d"),s=IA(t,"y","setdiff1d");u$(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),u$(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),u$(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),o=new Set(a);let i=0;for(let e=0;e<r.length;e++)o.has(r[e])||i++;const l=new HR([i],n.dtype),u=new HR([i],"int32");for(let e=0,t=0;e<r.length;e++)o.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]},lL=$A({sign_:function(e){const t={x:IA(e,"x","sign")};return mA.runKernel(vE,t)}}),uL=$A({sin_:function(e){const t={x:IA(e,"x","sin","float32")};return mA.runKernel(bE,t)}}),cL=$A({sinh_:function(e){const t={x:IA(e,"x","sinh")};return mA.runKernel(yE,t)}}),hL=$A({slice1d_:function(e,t,n){const s=IA(e,"x","slice1d");return u$(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),ED(s,[t],[n])}}),dL=$A({slice2d_:function(e,t,n){const s=IA(e,"x","slice2d");return u$(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),ED(s,t,n)}}),pL=$A({slice3d_:function(e,t,n){const s=IA(e,"x","slice3d");return u$(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),ED(s,t,n)}}),fL=$A({slice4d_:function(e,t,n){const s=IA(e,"x","slice4d");return u$(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),ED(s,t,n)}}),mL=$A({softmax_:function(e,t=-1){const n=IA(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return mA.runKernel(CE,s,r)}}),gL=$A({fft_:function(e){u$("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return mA.runKernel(ZC,t)}}),xL=$A({ifft_:function(e){u$("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return mA.runKernel(lT,t)}}),bL=$A({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=ID(e,[n,t]);s=xL(r)}else{const r=[n,2*(t-1)],a=ID(qM(e),[n,t]),o=ID(zO(e),[n,t]),i=JM(ED(a,[0,1],[n,t-2]),1),l=z_(JM(ED(o,[0,1],[n,t-2]),1),H_(-1)),u=$D([a,i],1),c=$D([o,l],1),h=ID(CA(u,c),[r[0],r[1]]);s=xL(h)}if(s=qM(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=ID(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),yL=$A({split_:function(e,t,n=0){const s={x:IA(e,"x","split")},r={numOrSizeSplits:t,axis:n};return mA.runKernel($E,s,r)}}),vL=$A({rfft_:function(e,t){u$("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=ED(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=$D([e,pM(s)],e.shape.length-1),n=t}else r=e;const a=U_(r),o=ID(CA(r,a),[s,n]),i=gL(o),l=Math.floor(n/2)+1,u=qM(i),c=zO(i),h=yL(u,[l,n-l],u.shape.length-1),d=yL(c,[l,n-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,ID(CA(h[0],d[0]),p)}}),kL=$A({squaredDifference_:function(e,t){let n=IA(e,"a","squaredDifference"),s=IA(t,"b","squaredDifference");[n,s]=lA(n,s),rF(n.shape,s.shape);const r={a:n,b:s};return mA.runKernel(FE,r,{})}}),wL=$A({squeeze_:function(e,t){const n=IA(e,"x","squeeze","string_or_numeric");return ID(n,v$(n.shape,t).newShape)}}),IL=$A({stack_:function(e,t=0){const n=NA(e,"tensors","stack","string_or_numeric");u$(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&u$(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return mA.runKernel(HT,s,r)}}),NL=$A({step_:function(e,t=0){const n={x:IA(e,"x","step")},s={alpha:t};return mA.runKernel(ZE,n,s)}}),SL=$A({stridedSlice_:function(e,t,n,s,r=0,a=0,o=0,i=0,l=0){const u={x:IA(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:l};return mA.runKernel(ME,u,c)}}),$L=$A({tan_:function(e){const t={x:IA(e,"x","tan","float32")};return mA.runKernel(WE,t)}});function CL(e,t){h$(e);const n=vA(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return TA(e,null,n,t)}function TL(e,t,n){if(h$(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=vA(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return TA(e,t,s,n)}function EL(e,t,n){if(h$(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=vA(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return TA(e,t,s,n)}function RL(e,t,n){if(h$(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=vA(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return TA(e,t,s,n)}function AL(e,t,n){if(h$(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=vA(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return TA(e,t=t||s,s,n)}function _L(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function FL(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}_L(n,t,e)}function DL(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let o=1;for(let e=r;e<a;++e)o*=n[e];const i=r<1?1:r;return{sliceRank:r,numUpdates:d$(t.shape)/i,sliceSize:o,strides:[...E$(n.slice(0,r)),1],outputSize:d$(n)}}const OL=$A({tensorScatterUpdate_:function(e,t,n){const s=IA(e,"tensor","tensorScatterupdate"),r=IA(t,"indices","tensorScatterupdate","int32"),a=IA(n,"updates","tensorScatterupdate");if(FL(a,r,s.shape),s.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${a.dtype}.`);const o={tensor:s,indices:r,updates:a};return mA.runKernel(pE,o,{})}}),ML=$A({topk_:function(e,t=1,n=!0){const s=IA(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},o={k:t,sorted:n},[i,l]=mA.runKernel(GE,a,o);return{values:i,indices:l}}}),LL=$A({truncatedNormal_:function(e,t=0,n=1,s,r){if(O$(e),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new PM(t,n,s,!0,r),o=T_(e,s);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),BL=$A({unique_:function(e,t=0){const n=IA(e,"x","unique","string_or_numeric");u$(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,o]=mA.runKernel(KE,s,r);return{values:a,indices:o}}}),PL=$A({unsortedSegmentSum_:function(e,t,n){const s=IA(e,"x","unsortedSegmentSum"),r=IA(t,"segmentIds","unsortedSegmentSum","int32");u$(f$(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},o={numSegments:n};return mA.runKernel(XE,a,o)}}),zL=$A({unstack_:function(e,t=0){const n=IA(e,"x","unstack","string_or_numeric");u$(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return mA.runKernel(qE,s,r)}});function WL(e,t){return iM(e,t,"right")}function VL(e,t=!0,n,s){return mA.makeVariable(e,t,n,s)}function UL(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=T_(e,"int32"),r=T_([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),o=t*e.length;r.values.set(a,o)}return r.toTensor()}const GL=async function(e){const t=IA(e,"condition","whereAsync","bool"),n=await t.data(),s=UL(t.shape,n);return e!==t&&t.dispose(),s},HL=async function(e,t,n){const s=IA(e,"tensor","boolMask"),r=IA(t,"mask","boolMask","bool"),a=null==n?0:n,o=r.rank,i=s.shape;u$(o>0,(()=>"mask cannot be scalar")),c$(i.slice(a,a+o),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+o;e++)l*=i[e];const u=i.slice(0,a).concat([l],i.slice(a+o)),c=ID(s,u),h=ID(r,[-1]),d=await GL(h),p=wL(d,[1]),f=LO(c,p,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f},jL=$A({transpose_:function(e,t,n){const s=IA(e,"x","transpose");if(null==t&&(t=s.shape.map(((e,t)=>t)).reverse()),u$(s.rank===t.length,(()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`)),t.forEach((e=>{u$(e>=0&&e<s.rank,(()=>"All entries in 'perm' must be between 0 and "+(s.rank-1)+` but got ${t}`))})),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?F_((()=>{let e=qM(s),t=zO(s);return e=mA.runKernel(jE,{x:e},a),t=mA.runKernel(jE,{x:t},a),n&&(t=ZO(t)),CA(e,t)})):mA.runKernel(jE,r,a)}}),KL=$A({movingAverage_:function(e,t,n,s,r=!0){const a=IA(e,"v","movingAverage"),o=IA(t,"x","movingAverage"),i=IA(n,"decay","movingAverage");var l,u;u=o,u$((l=a).dtype===u.dtype,(()=>`The dtypes of the first(${l.dtype}) and second(${u.dtype}) input must match`)),u$(p$(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const c=H_(1),h=eF(c,i);let d=z_(eF(o,a),h);if(r){u$(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=IA(s,"step","movingAverage");d=P_(d,eF(c,Q_(i,e)))}return L_(a,d)}}),qL=$A({scatterND_:function(e,t,n){O$(n);const s=IA(e,"indices","scatterND","int32"),r=IA(t,"updates","scatterND");FL(r,s,n);const a={indices:s,updates:r},o={shape:n};return mA.runKernel(dE,a,o)}}),XL=$A({sparseToDense_:function(e,t,n,s=0){O$(n);const r=IA(e,"sparseIndices","sparseToDense","int32"),a=IA(t,"sparseValues","sparseToDense","string_or_numeric"),o=IA(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,o);const i={sparseIndices:r,sparseValues:a,defaultValue:o},l={outputShape:n};return mA.runKernel(_E,i,l)}}),YL=$A({gatherND_:function(e,t){const n=IA(t,"indices","gatherND","int32"),s={params:IA(e,"x","gatherND","string_or_numeric"),indices:n};return mA.runKernel(rT,s)}}),ZL=$A({dropout_:function(e,t,n,s){const r=IA(e,"x","dropout");if(u$("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),u$(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof XR?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(p$(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),o=1-t,i=P_(MO(L_(HM(a,0,1,"float32",s),o)),o);return z_(r,i)}});function JL(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function QL(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(o)}return CL(r,"float32")}const eB=async function(e,t,n=1){const s=IA(e,"predictions","inTopK"),r=IA(t,"targets","inTopK");u$(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),u$(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),c$(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];u$(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await s.data(),i=await r.data(),[l,u]=[o.length/a,a],c=k$("bool",l);for(let e=0;e<l;e++){const t=e*u,s=o.subarray(t,t+u),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(r[t].index===i[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),EA(c,r.shape,"bool")},tB=$A({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",o){let i=e;3===e.rank&&(i=ID(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=ID(t,[1,t.shape[0],t.shape[1],t.shape[2]])),u$(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),u$(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),u$(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?i.shape[3]:i.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];u$(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),u$(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),wD("conv2dDerFilter",r,o);const h={x:i,dy:l},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:o,filterShape:n};return mA.runKernel(IC,h,d)}});function nB(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return z_(e,NL(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function sB(e,t){let n=t;const s=sF(e.shape,t.shape);return s.length>0&&(n=CO(n,s)),ID(n,e.shape)}function rB(e,t,n,s){if("linear"===t)return e;if("relu"===t)return YM(e);if("elu"===t)return fO(e);if("relu6"===t)return ZM(e);if("prelu"===t)return FM(e,n);if("leakyrelu"===t)return GO(e,s);if("sigmoid"===t)return TD(e);throw new Error(`Unknown fused activation ${t}.`)}const aB=(e,t)=>!(e>0)||"linear"===t,oB=$A({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===aB(mA.state.gradientDepth,l)){u$("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=KD(e,t,n,s,r,a,o);return null!=i&&(h=L_(h,i)),rB(h,l,u,c)}const h=IA(e,"x","conv2d","float32"),d=IA(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=ID(h,[1,h.shape[0],h.shape[1],h.shape[2]])),u$(4===p.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`)),u$(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),wD("fused conv2d",s,o);const m="NHWC"===r?p.shape[3]:p.shape[1];u$(d.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`)),u$(yD(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=hD(p.shape,d.shape,n,a,s,o);let x,b;if(null!=i&&(x=IA(i,"bias","fused conv2d"),[x]=lA(x,h),"NHWC"===r?rF(g.outShape,x.shape):(u$(x.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`)),u$(0===x.shape.length||x.shape[0]===g.outChannels||1===x.shape[0],(()=>`Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(u$(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)u$(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{rF(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=IA(u,"prelu weights","fused conv2d")}const y=(e,t)=>{u$("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[o,i,u,c]=t,h=nB(e,u,l);u$(bD(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const d=[XD(i.shape,h,o,n,s),tB(i,h,o.shape,n,s)];if(null!=c){const e=sB(c,h);d.push(e)}return d},v={x:p,filter:d,bias:x,preluActivationWeights:b},k={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=G_(((e,t,n)=>{let s=mA.runKernel(tR,v,k);return n([t,e,s]),f&&(s=ID(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}}));return e(p,d)}{const e=G_(((e,t,n,s)=>{let r=mA.runKernel(tR,v,k);return s([t,e,r,n]),f&&(r=ID(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}}));return e(p,d,x)}}}),iB=$A({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],o){let i=e;3===e.rank&&(i=ID(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=ID(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:i,dy:l},c={strides:s,pad:r,dimRoundingMode:o,dilations:a,filterShape:n};return mA.runKernel(MC,u,c)}}),lB=$A({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],o){let i=t,l=!1;3===t.rank&&(l=!0,i=ID(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:i,filter:n},c={strides:s,pad:r,dimRoundingMode:o,dilations:a,inputShape:e},h=mA.runKernel(LC,u,c);return l?ID(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),uB=$A({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===aB(mA.state.gradientDepth,l)){let h=oO(e,t,n,s,r,a,o);return null!=i&&(h=L_(h,i)),rB(h,l,u,c)}const h=IA(e,"x","depthwiseConv2d","float32"),d=IA(t,"filter","depthwiseConv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=ID(h,[1,h.shape[0],h.shape[1],h.shape[2]])),u$(4===p.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),u$(4===d.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),u$(p.shape[3]===d.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null==a&&(a=[1,1]),u$(yD(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),wD("fused depthwiseConv2d",s,o);const m=hD(p.shape,d.shape,n,a,s,o,!0);let g,x;null!=i&&(g=IA(i,"bias","fused conv2d"),[g]=lA(g,h),rF(m.outShape,g.shape)),null!=u&&(x=IA(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{u$(bD(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,i,u,c]=t,h=nB(e,u,l),d=lB(i.shape,h,r,n,s,a,o),p=iB(i,h,r.shape,n,s,a,o);return null!=c?[d,p,sB(g,h)]:[d,p]},y={x:p,filter:d,bias:g,preluActivationWeights:x},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:o,activation:l,leakyreluAlpha:c};if(null==i){const e=G_(((e,t,n)=>{let s=mA.runKernel(nR,y,v);return n([t,e,s]),f&&(s=ID(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(p,d)}{const e=G_(((e,t,n,s)=>{let r=mA.runKernel(nR,y,v);return s([t,e,r,n]),f&&(r=ID(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}));return e(p,d,g)}}}),cB=$A({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===aB(mA.state.gradientDepth,a)){let l=CD(e,t,n,s);return null!=r&&(l=L_(l,r)),rB(l,a,o,i)}let l=IA(e,"a","fused matMul"),u=IA(t,"b","fused matMul");[l,u]=lA(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=n?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=d$(f),x=d$(m);u$(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=rF(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),y=ID(l,n?[g,c,d]:[g,d,c]),v=ID(u,s?[x,p,h]:[x,h,p]);let k,w;null!=r&&(k=IA(r,"bias","fused matMul"),[k]=lA(k,l),rF(b,k.shape)),null!=o&&(w=IA(o,"prelu weights","fused matMul"));const I=(e,t)=>{const[o,i,l,u]=t,c=nB(ID(e,l.shape),l,a);let h,d;return n||s?!n&&s?(h=CD(c,i,!1,!1),d=CD(c,o,!0,!1)):n&&!s?(h=CD(i,c,!1,!0),d=CD(o,c,!1,!1)):(h=CD(i,c,!0,!0),d=CD(c,o,!0,!0)):(h=CD(c,i,!1,!0),d=CD(o,c,!0,!1)),null!=r?[h,d,sB(u,c)]:[h,d]},N={a:y,b:v,bias:k,preluActivationWeights:w},S={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:i};if(null==r){const e=G_(((e,t,n)=>{const s=mA.runKernel(eR,N,S);return n([e,t,s]),{value:ID(s,b),gradFunc:I}}));return e(y,v)}{const e=G_(((e,t,n,s)=>{const r=mA.runKernel(eR,N,S);return s([e,t,r,n]),{value:ID(r,b),gradFunc:I}}));return e(y,v,k)}}}),hB=$A({hammingWindow_:function(e){return QL(e,.54,.46)}}),dB=$A({hannWindow_:function(e){return QL(e,.5,.5)}}),pB=$A({frame_:function(e,t,n,s=!1,r=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(ED(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,i=$D([ED(e,a,t-s),J_([s],r)]);o.push(i),a+=n}return 0===o.length?TL([],[0,t]):ID($D(o),[o.length,t])}}),fB=$A({stft_:function(e,t,n,s,r=dB){null==s&&(s=JL(t));const a=pB(e,t,n),o=z_(a,r(t));return vL(o,s)}}),mB=$A({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const o=IA(e,"image","cropAndResize"),i=IA(t,"boxes","cropAndResize","float32"),l=IA(n,"boxInd","cropAndResize","int32"),u=i.shape[0];u$(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),u$(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`)),u$(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`)),u$(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),u$(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),u$("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:o,boxes:i,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return mA.runKernel(_C,c,h)}}),gB=$A({flipLeftRight_:function(e){const t=IA(e,"image","flipLeftRight","float32");u$(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return mA.runKernel(QC,n,{})}}),xB=$A({grayscaleToRGB_:function(e){const t=IA(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];u$(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),u$(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,DO(t,r)}}),bB=$A({rgbToGrayscale_:function(e){const t=IA(e,"image","RGBToGrayscale"),n=t.rank-1,s=t.shape[n];u$(t.rank>=2,(()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`)),u$(3===s,(()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`));const r=t.dtype,a=E_(t,"float32"),o=CL([.2989,.587,.114]);let i;switch(t.rank){case 2:i=pO("ij,j->i",a,o);break;case 3:i=pO("ijk,k->ij",a,o);break;case 4:i=pO("ijkl,l->ijk",a,o);break;case 5:i=pO("ijklm,m->ijkl",a,o);break;case 6:i=pO("ijklmn,n->ijklm",a,o);break;default:throw new Error("Not a valid tensor rank.")}return i=_O(i,-1),E_(i,r)}}),yB=$A({rotateWithOffset_:function(e,t,n=0,s=.5){const r=IA(e,"image","rotateWithOffset","float32");u$(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},o={radians:t,fillValue:n,center:s};return mA.runKernel(QE,a,o)}});function vB(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),u$(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),u$(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),u$(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),u$(1===t.rank,(()=>"scores must be a 1D tensor")),u$(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),u$(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const kB=$A({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=IA(e,"boxes","nonMaxSuppression","float32"),o=IA(t,"scores","nonMaxSuppression","float32"),i=vB(a,o,n,s,r),l={maxOutputSize:n=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold};return mA.runKernel(zT,{boxes:a,scores:o},l)}});function wB(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,o=!1;for(;s<r;){a=s+(r-s>>>1);const i=n(t,e[a]);i>0?s=a+1:(r=a,o=!i)}return o?s:-s-1}(e,t,n||IB)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function IB(e,t){return e>t?1:e<t?-1:0}function NB(e,t,n,s,r){return CB(e,t,n,s,r,0)}function SB(e,t,n,s,r,a){return CB(e,t,n,s,r,0,!1,a,!0)}function $B(e,t,n,s,r,a){return CB(e,t,n,s,r,a,!0)}function CB(e,t,n,s,r,a,o=!1,i=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(RB);const c=a>0?-.5/a:0,h=[],d=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<r)break;let i=!1;for(let n=h.length-1;n>=o;--n){const o=TB(e,a,h[n]);if(o>=s){i=!0;break}if(t.score=t.score*EB(s,c,o),t.score<=r)break}t.suppressBeginIndex=h.length,i||(t.score===n?(h.push(a),d.push(t.score)):t.score>r&&wB(u,t,RB))}const p=h.length,f=n-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return o&&(m.selectedScores=d),l&&(m.validOutputs=p),m}function TB(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),o=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-a)*(l-o),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(o,c),x=Math.min(i,h),b=Math.min(l,d),y=Math.max(x-m,0)*Math.max(b-g,0);return y/(p+f-y)}function EB(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function RB(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const AB=$A({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const o=IA(e,"boxes","nonMaxSuppression"),i=IA(t,"scores","nonMaxSuppression"),l=vB(o,i,n,s,r,a),u={boxes:o,scores:i},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=mA.runKernel(VT,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),_B=$A({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const o=IA(e,"boxes","nonMaxSuppression"),i=IA(t,"scores","nonMaxSuppression"),l=vB(o,i,n,s,r,null),u={boxes:o,scores:i},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=mA.runKernel(WT,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),FB=$A({resizeBilinear_:function(e,t,n=!1,s=!1){const r=IA(e,"images","resizeBilinear");u$(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),u$(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),u$(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,o=!1;3===r.rank&&(o=!0,a=ID(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=mA.runKernel(oE,i,l);return o?ID(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),DB=$A({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=IA(e,"images","resizeNearestNeighbor");u$(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),u$(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),u$("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),u$(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,o=!1;3===r.rank&&(o=!0,a=ID(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,i={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=mA.runKernel(rE,i,l);return o?ID(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),OB=$A({threshold_:function(e,t="binary",n=!1,s=.5){const r=IA(e,"image","threshold"),a=r.shape[0]*r.shape[1];let o,i,l,u,c=z_(CL([s]),255);if(u$(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),u$(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),u$("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),u$("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[o,i,l]=yL(r,[1,1,1],-1);const e=z_(o,.2989),t=z_(i,.587),n=z_(l,.114);u=L_(L_(e,t),n)}else u=e;"otsu"===t&&(c=function(e,t){let n,s,r,a,o,i,l=CL([-1]),u=CL([0]),c=CL([0]);for(let h=0;h<e.size-1;h++){n=ED(e,0,h+1),s=ED(e,h+1),o=P_(CO(n),t),i=P_(CO(s),t);const d=CO(z_(n,KM(0,n.size)));r=P_(d,CO(n));const p=J_(s.shape,n.size),f=L_(KM(0,s.size),p),m=z_(s,f);a=P_(CO(m),CO(s));const g=eF(r,a),x=eF(r,a),b=z_(o,i);c=z_(z_(b,g),x);const y=BO(c,u);u=cO(y,c,u),l=cO(y,CL([h]),l)}return l}(LD(E_(sL(u),"int32"),EA([]),256),a));const h=n?jO(u,c):BO(u,c);return E_(z_(h,255),"int32")}}),MB=$A({transform_:function(e,t,n="nearest",s="constant",r=0,a){const o=IA(e,"image","transform","float32"),i=IA(t,"transforms","transform","float32");u$(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),u$(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),u$(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:o,transforms:i},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return mA.runKernel(HE,l,u)}}),LB=$A({bandPart_:function(e,t,n){const s=IA(e,"a","bandPart");u$(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,o]=s.shape.slice(-2);let i,l;"number"==typeof t?(u$(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),u$(t<=a,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`)),i=IA(t<0?a:t,"numLower","bandPart")):(u$("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),i=cO(HO(t,0),a,gM(t,a))),"number"==typeof n?(u$(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),u$(n<=o,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`)),l=IA(n<0?o:n,"numUpper","bandPart")):(u$("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),l=cO(HO(n,0),o,gM(n,o)));const u=ID(KM(0,a,1,"int32"),[-1,1]),c=KM(0,o,1,"int32"),h=eF(u,c),d=nM(jO(h,i),PO(h,ZO(l))),p=pM([a,o],s.dtype);return ID(IL(zL(ID(s,[-1,a,o])).map((e=>cO(d,e,p)))),r)}}),BB=$A({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,u$(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)u$(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=yL(e,e.shape[0],0).map((e=>wL(e,[0])));u$(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(mA.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=z_(CO(z_(n[s],e)),n[s]);e=eF(e,t)}return P_(e,EO(e,"euclidean"))})));return t?IL(n,0):n}});function PB(e,t=!1){return mA.tidy((()=>{u$(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=OO(n),a=R_(e);const o=TL([[1]],[1,1]);let i=R_(o);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=i,u=r;[i,a,r]=mA.tidy((()=>{const t=ED(a,[e,e],[n-e,1]),l=EO(t),u=ED(a,[e,e],[1,1]),c=cO(BO(u,0),TL([[-1]]),TL([[1]])),h=eF(u,z_(c,l)),d=P_(t,h);i=1===d.shape[0]?R_(o):$D([o,ED(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=ZO(P_(CD(c,h),l)),f=ED(a,[e,0],[n-e,s]),m=z_(p,i),g=jL(i);if(0===e)a=eF(f,CD(m,CD(g,f)));else{const t=eF(f,CD(m,CD(g,f)));a=$D([ED(a,[0,0],[e,s]),t],0)}const x=jL(m),b=ED(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=eF(b,CD(CD(b,i),x));else{const t=eF(b,CD(CD(b,i),x));r=$D([ED(r,[0,0],[n,e]),t],1)}return[i,a,r]})),D_([t,l,u])}return!t&&n>s&&(r=ED(r,[0,0],[n,s]),a=ED(a,[0,0],[s,s])),[r,a]}))}const zB=$A({qr_:function(e,t=!1){if(u$(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return PB(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=zL(ID(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach((e=>{const[n,s]=PB(e,t);r.push(n),a.push(s)})),[ID(IL(r,0),e.shape),ID(IL(a,0),e.shape)]}}});var WB;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(WB||(WB={}));const VB=$A({computeWeightedLoss_:function(e,t,n=WB.SUM_BY_NONZERO_WEIGHTS){const s=IA(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=IA(t,"weights","computeWeightedLoss"));const a=null==r?s:z_(s,r);if(n===WB.NONE)return a;if(n===WB.SUM)return CO(a);if(n===WB.MEAN){if(null==r)return dM(a);{const e=s.size/r.size,t=P_(CO(a),CO(r));return e>1?P_(t,H_(e)):t}}if(n===WB.SUM_BY_NONZERO_WEIGHTS){if(null==r)return P_(CO(a),H_(s.size));{const e=z_(r,fM(s.shape)),t=E_(CO(wM(e,H_(0))),"float32");return P_(CO(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),UB=$A({absoluteDifference_:function(e,t,n,s=WB.SUM_BY_NONZERO_WEIGHTS){const r=IA(e,"labels","absoluteDifference"),a=IA(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=IA(n,"weights","absoluteDifference")),c$(r.shape,a.shape,"Error in absoluteDifference: ");const i=tF(eF(r,a));return VB(i,o,s)}}),GB=$A({cosineDistance_:function(e,t,n,s,r=WB.SUM_BY_NONZERO_WEIGHTS){const a=IA(e,"labels","cosineDistance"),o=IA(t,"predictions","cosineDistance");let i=null;null!=s&&(i=IA(s,"weights","cosineDistance")),c$(a.shape,o.shape,"Error in cosineDistance: ");const l=H_(1),u=eF(l,CO(z_(a,o),n,!0));return VB(u,i,r)}}),HB=$A({hingeLoss_:function(e,t,n,s=WB.SUM_BY_NONZERO_WEIGHTS){let r=IA(e,"labels","hingeLoss");const a=IA(t,"predictions","hingeLoss");let o=null;null!=n&&(o=IA(n,"weights","hingeLoss")),c$(r.shape,a.shape,"Error in hingeLoss: ");const i=H_(1);r=eF(z_(H_(2),r),i);const l=YM(eF(i,z_(r,a)));return VB(l,o,s)}}),jB=$A({huberLoss_:function(e,t,n,s=1,r=WB.SUM_BY_NONZERO_WEIGHTS){const a=IA(e,"labels","huberLoss"),o=IA(t,"predictions","huberLoss");let i=null;null!=n&&(i=IA(n,"weights","huberLoss")),c$(a.shape,o.shape,"Error in huberLoss: ");const l=H_(s),u=tF(eF(o,a)),c=gM(u,l),h=eF(u,c),d=L_(z_(H_(.5),V_(c)),z_(l,h));return VB(d,i,r)}}),KB=$A({logLoss_:function(e,t,n,s=1e-7,r=WB.SUM_BY_NONZERO_WEIGHTS){const a=IA(e,"labels","logLoss"),o=IA(t,"predictions","logLoss");let i=null;null!=n&&(i=IA(n,"weights","logLoss")),c$(a.shape,o.shape,"Error in logLoss: ");const l=H_(1),u=H_(s),c=ZO(z_(a,XO(L_(o,u)))),h=z_(eF(l,a),XO(L_(eF(l,o),u))),d=eF(c,h);return VB(d,i,r)}}),qB=$A({meanSquaredError_:function(e,t,n,s=WB.SUM_BY_NONZERO_WEIGHTS){const r=IA(e,"labels","meanSquaredError"),a=IA(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=IA(n,"weights","meanSquaredError")),c$(r.shape,a.shape,"Error in meanSquaredError: ");const i=kL(r,a);return VB(i,o,s)}}),XB=$A({sigmoidCrossEntropy_:function(e,t,n,s=0,r=WB.SUM_BY_NONZERO_WEIGHTS){let a=IA(e,"multiClassLabels","sigmoidCrossEntropy");const o=IA(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=IA(n,"weights","sigmoidCrossEntropy")),c$(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=H_(s),t=H_(1),n=H_(.5);a=L_(z_(a,eF(t,e)),z_(n,e))}const l=function(e,t){const n=IA(e,"labels","sigmoidCrossEntropyWithLogits"),s=IA(t,"logits","sigmoidCrossEntropyWithLogits");c$(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=YM(s),a=z_(s,n),o=YO(AO(ZO(tF(s))));return L_(eF(r,a),o)}(a,o);return VB(l,i,r)}}),YB=$A({softmaxCrossEntropy_:function(e,t,n,s=0,r=WB.SUM_BY_NONZERO_WEIGHTS){let a=IA(e,"onehotLabels","softmaxCrossEntropy");const o=IA(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=IA(n,"weights","softmaxCrossEntropy")),c$(a.shape,o.shape,"Error in softmaxCrossEntropy: "),s>0){const e=H_(s),t=H_(1),n=H_(a.shape[1]);a=L_(z_(a,eF(t,e)),P_(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=G_(((e,t,s)=>{const r=tM(t,[n],!0),a=eF(E_(t,"float32"),r);s([e,a]);const o=ZO(z_(a,e));return{value:CO(o,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=vO(e.shape,[n]);return[z_(ID(e,a),eF(E_(s,"float32"),AO(r))),z_(ID(e,a),eF(AO(r),E_(s,"float32")))]}}}));return s(e,t)}(a,o);return VB(l,i,r)}}),ZB=$A({sparseFillEmptyRows_:function(e,t,n,s){const r=IA(e,"indices","sparseFillEmptyRows","int32"),a=IA(t,"values","sparseFillEmptyRows"),o=IA(n,"denseShape","sparseFillEmptyRows","int32"),i=IA(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const l={indices:r,values:a,denseShape:o,defaultValue:i},u=mA.runKernel(TE,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),JB=$A({sparseReshape_:function(e,t,n){const s=IA(e,"inputIndices","sparseReshape","int32"),r=IA(t,"inputShape","sparseReshape","int32"),a=IA(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:s,inputShape:r,newShape:a},i=mA.runKernel(EE,o);return{outputIndices:i[0],outputShape:i[1]}}}),QB=$A({sparseSegmentMean_:function(e,t,n){const s=IA(e,"data","sparseSegmentMean"),r=IA(t,"indices","sparseSegmentMean","int32"),a=IA(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:s,indices:r,segmentIds:a};return mA.runKernel(RE,o)}}),eP=$A({sparseSegmentSum_:function(e,t,n){const s=IA(e,"data","sparseSegmentSum"),r=IA(t,"indices","sparseSegmentSum","int32"),a=IA(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:s,indices:r,segmentIds:a};return mA.runKernel(AE,o)}}),tP=$A({stringNGrams_:function(e,t,n,s,r,a,o,i){const l=IA(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=IA(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:o,preserveShortSequences:i},h={data:l,dataSplits:u},d=mA.runKernel(LE,h,c);return{nGrams:d[0],nGramsSplits:d[1]}}}),nP={fft:gL,ifft:xL,rfft:vL,irfft:bL},sP={hammingWindow:hB,hannWindow:dB,frame:pB,stft:fB},rP={flipLeftRight:gB,grayscaleToRGB:xB,resizeNearestNeighbor:DB,resizeBilinear:FB,rgbToGrayscale:bB,rotateWithOffset:yB,cropAndResize:mB,nonMaxSuppression:kB,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=IA(e,"boxes","nonMaxSuppressionAsync"),o=IA(t,"scores","nonMaxSuppressionAsync"),i=vB(a,o,n,s,r);n=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=await Promise.all([a.data(),o.data()]),u=l[0],c=l[1],{selectedIndices:h}=NB(u,c,n,s,r);return a!==e&&a.dispose(),o!==t&&o.dispose(),CL(h,"int32")},nonMaxSuppressionWithScore:AB,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const o=IA(e,"boxes","nonMaxSuppressionAsync"),i=IA(t,"scores","nonMaxSuppressionAsync"),l=vB(o,i,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([o.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=$B(c,h,n,s,r,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:CL(d,"int32"),selectedScores:CL(p)}},nonMaxSuppressionPadded:_B,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const o=IA(e,"boxes","nonMaxSuppressionAsync"),i=IA(t,"scores","nonMaxSuppressionAsync"),l=vB(o,i,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=SB(d,p,u,c,h,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:CL(f,"int32"),validOutputs:H_(m,"int32")}},threshold:OB,transform:MB},aP={bandPart:LB,gramSchmidt:BB,qr:zB},oP={absoluteDifference:UB,computeWeightedLoss:VB,cosineDistance:GB,hingeLoss:HB,huberLoss:jB,logLoss:KB,meanSquaredError:qB,sigmoidCrossEntropy:XB,softmaxCrossEntropy:YB},iP={sparseFillEmptyRows:ZB,sparseReshape:JB,sparseSegmentMean:QB,sparseSegmentSum:eP},lP={stringNGrams:tP,stringSplit:$A({stringSplit_:function(e,t,n=!0){const s=IA(e,"input","stringSplit","string"),r=IA(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},o={input:s,delimiter:r},i=mA.runKernel(BE,o,a);return{indices:i[0],values:i[1],shape:i[2]}}}),stringToHashBucketFast:$A({stringToHashBucketFast_:function(e,t){const n=IA(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return mA.runKernel(PE,r,s)}}),staticRegexReplace:$A({staticRegexReplace_:function(e,t,n,s=!0){const r=IA(e,"input","staticRegexReplace","string"),a={pattern:t,rewrite:n,replaceGlobal:s};return mA.runKernel(OE,{x:r},a)}})},uP="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function cP(e,t){const n=e[0].length;e.forEach(((e,t)=>{u$(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),u$(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)u$(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function hP(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}var dP;function pP(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let r=1;r<n.length;++r){const a=n[r],o=s[s.length-n.length+r],i=s[o];if(a>=0)if(i>=0){if(i!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${a} but shape[${r+e}] = ${i}`)}else s[o]=a}return s}function fP(e){const t={FIRST_DIM_SIZE:dP.FIRST_DIM_SIZE,VALUE_ROWIDS:dP.VALUE_ROWIDS,ROW_LENGTHS:dP.ROW_LENGTHS,ROW_SPLITS:dP.ROW_SPLITS,ROW_LIMITS:dP.ROW_LIMITS,ROW_STARTS:dP.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function mP(e){return 0===e.length?0:e[0]===dP.FIRST_DIM_SIZE?e.length-1:e.length}function gP(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(n,s-1);++r){const n=e[r],s=t[r+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${s}`)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(dP||(dP={}));const xP=30;function bP(e){return e<=xP?e:T$(e,Math.floor(Math.sqrt(e)))}function yP(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function vP(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function kP(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function wP(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function IP(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function NP(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}function SP(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===d$(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let o=1;for(let e=0;e<r.length-1;++e)o*=r[e];const i=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=i[e],l.push(i[e]);const c=[...E$(e.shape).map((e=>e/u)),1].slice(0,a);return[l,o,u,c]}const $P=1.7580993408473768,CP=1.0507009873554805,TP=.3275911,EP=.254829592,RP=-.284496736,AP=1.421413741,_P=-1.453152027,FP=1.061405429;function DP(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function OP(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function MP(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function LP(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function BP(e,t){return{real:e[2*t],imag:e[2*t+1]}}function PP(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function zP(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function WP(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const VP="->",UP=/->/g,GP=",",HP="...";function jP(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(UP,"").length)/VP.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error(`Equation must contain exactly one arrow ("${VP}").`);const[s,r]=e.split(VP);u$(-1===s.indexOf(HP),(()=>`The ellipsis notation ("${HP}") is not supported yet.`));const a=s.split(GP),o=a.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===i.indexOf(t)&&t!==GP&&i.push(t)}const l=new Array(a.length);for(let e=0;e<o;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(i.indexOf(a[e][t]))}const u=i.length,c=[];for(let e=r.length;e<u;++e)c.push(e);return{allDims:i,summedDims:c,idDims:l}}function KP(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function qP(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:u$(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function XP(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=ZP(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function YP(e){return e.every(((e,t)=>e===t))}function ZP(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function JP(e,t,n=0){let s=[];if("number"==typeof t)u$(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const r=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);u$(r<=1,(()=>"There should be only one negative value in split array."));const a=t.indexOf(-1);if(-1!==a){const s=t.reduce(((e,t)=>t>0?e+t:e));t[a]=e.shape[n]-s}u$(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function QP(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function ez(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function tz(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function nz(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function sz(e,t){return`size ${e} must be non-negative, not ${t}`}function rz(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function az(e,t){return`Input to reshape is a SparseTensor with ${d$(e)}\n  dense values, but the requested shape requires a multiple of ${d$(t)}. inputShape=${e} outputShape= ${t}`}function oz(e,t){return`Input to reshape is a tensor with ${d$(e)} dense values, but the requested shape has ${d$(t)}. inputShape=${e} outputShape=${t}`}function iz(){return"segment ids must be >= 0"}function lz(){return"segment ids are not increasing"}function uz(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function cz(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function hz(e,t){let n,s=!1;for(e<=xP?(n=e,s=!0):n=T$(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=T$(e,n+1);return n}function dz(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function pz(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)i.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)i.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)i.push(t.shape[e]);for(let t=n+1;t<a;t++)i.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:o,outputShape:i}}function fz(e){try{return e.map((e=>AR(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function mz(e){return e.map((e=>RR(e)))}!function(){for(const e of iF)Y_(e)}();const gz={kernelName:K$,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(e,NL(E_(n,"float32"),-1))}}},xz={kernelName:q$,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=V_(E_(n,"float32")),s=W_(eF(H_(1),t));return ZO(P_(e,s))}}}},bz={kernelName:X$,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=W_(eF(V_(E_(n,"float32")),1));return P_(e,t)}}}},yz={kernelName:Y$,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=rF(n.shape,s.shape);return{a:()=>{let t=e;const s=sF(n.shape,r);return s.length>0&&(t=CO(t,s)),ID(t,n.shape)},b:()=>{let t=e;const n=sF(s.shape,r);return n.length>0&&(t=CO(t,n)),ID(t,s.shape)}}}},vz={kernelName:Z$,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},kz={kernelName:eC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>U_(n)}}},wz={kernelName:tC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>U_(n)}}},Iz={kernelName:nC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>P_(e,W_(eF(H_(1),V_(E_(n,"float32")))))}}},Nz={kernelName:sC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=W_(L_(H_(1),V_(E_(n,"float32"))));return P_(e,t)}}}},Sz={kernelName:oC,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=rF(n.shape,s.shape);return{a:()=>{const t=L_(V_(n),V_(s));let a=z_(e,P_(s,t));const o=sF(n.shape,r);return o.length>0&&(a=CO(a,o)),ID(a,n.shape)},b:()=>{const t=L_(V_(n),V_(s));let a=ZO(z_(e,P_(n,t)));const o=sF(s.shape,r);return o.length>0&&(a=CO(a,o)),ID(a,s.shape)}}}},$z={kernelName:rC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>P_(e,L_(V_(E_(n,"float32")),1))}}},Cz={kernelName:aC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>P_(e,eF(H_(1),V_(E_(n,"float32"))))}}},Tz=$A({avgPool3dGrad_:function(e,t,n,s,r,a){const o=IA(e,"dy","avgPool3dGrad"),i=IA(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=ID(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=ID(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),u$(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),u$(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),wD("avgPool3dGrad",r,a);const h={dy:l,input:u},d={filterSize:n,strides:s,pad:r,dimRoundingMode:a},p=mA.runKernel(cC,h,d);return c?ID(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Ez={kernelName:uC,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:o,dimRoundingMode:i}=n;return{x:()=>Tz(e,s,r,a,o,i)}}},Rz=$A({avgPoolGrad_:function(e,t,n,s,r){const a=IA(e,"dy","avgPoolGrad"),o=IA(t,"input","avgPoolGrad");u$(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,l=a,u=!1;3===o.rank&&(u=!0,i=ID(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=ID(a,[1,a.shape[0],a.shape[1],a.shape[2]])),u$(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),u$(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:l,input:i},h={filterSize:n,strides:s,pad:r},d=mA.runKernel(lC,c,h);return u?ID(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Az={kernelName:iC,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:o}=n;return{x:()=>Rz(e,s,r,a,o)}}},_z={kernelName:hC,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>CD(e,r,!1,!1),b:()=>CD(e,s,!0,!1)}:a&&!o?{a:()=>CD(r,e,!1,!0),b:()=>CD(s,e,!1,!1)}:{a:()=>CD(r,e,!0,!0),b:()=>CD(e,s,!0,!0)}:{a:()=>CD(e,r,!1,!0),b:()=>CD(s,e,!0,!1)}}},Fz={kernelName:dC,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>AM(e,s,r)}}},Dz={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,o=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])o[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>CO(e,i,!0)}}},Oz={kernelName:gC,gradFunc:e=>({x:()=>e.clone()})},Mz={kernelName:xC,gradFunc:e=>({x:()=>U_(e)})},Lz={kernelName:bC,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>cO(nM(PO(s,r),jO(s,a)),e,U_(e))}}},Bz={kernelName:vC,inputsToSave:["x"],gradFunc:gz.gradFunc},Pz={kernelName:kC,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=y$(r,t[0].shape)[0],o=s.map((e=>e[a]));return yL(e,o,a).map((e=>()=>e))}},zz={kernelName:wC,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:o,pad:i,dataFormat:l}=n;return u$(bD(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>XD(s.shape,e,r,o,i,l),filter:()=>tB(s,e,r.shape,o,i,l)}}},Wz={kernelName:NC,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:l}=n;return{dy:()=>KD(e,r,a,o,i,1,l),filter:()=>tB(e,s,r.shape,a,o,i,l)}}},Vz=$A({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=ID(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=ID(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),u$(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),u$(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),u$(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),u$(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),u$(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},l={strides:s,pad:r,filterShape:n};return mA.runKernel($C,i,l)}}),Uz={kernelName:SC,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;u$(bD(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[o,i]=t;return{x:()=>JD(o.shape,e,i,r,a),filter:()=>Vz(o,e,i.shape,r,a)}}},Gz={kernelName:TC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(ZO(uL(E_(n,"float32"))),e)}}},Hz={kernelName:EC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(cL(E_(n,"float32")),e)}}},jz={kernelName:AC,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:o}=n;return{x:()=>{const t=wO([r],s.rank);let n=sO(e,r,a,!o);return null!=t&&(n=jL(n,t)),n}}}},Kz={kernelName:OC,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:o}=n,i=null==s?[1,1]:s;u$(bD(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[l,u]=t;return u$(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),u$(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),u$(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),u$(yD(r,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`)),wD("depthwiseConv2d",a,o),{x:()=>lB(l.shape,e,u,r,a,i,o),filter:()=>iB(l,e,u.shape,r,a,i,o)}}},qz={kernelName:PC,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},o={x:s,filter:r,dy:e};return{x:()=>mA.runKernel(zC,a,n),filter:()=>mA.runKernel(WC,o,n)}}},Xz={kernelName:GC,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>mA.runKernel(HC,s)}}},Yz={kernelName:jC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=z_(AO(ZO(V_(n))),2/Math.sqrt(Math.PI));return{x:()=>z_(e,s)}}},Zz={kernelName:qC,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(e,n)}}},Jz={kernelName:XC,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>ID(e,n.shape)}}},Qz={kernelName:YC,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(e,AO(n))}}},eW={kernelName:eT,gradFunc:e=>({x:()=>U_(e)})},tW={kernelName:tT,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=rF(n.shape,s.shape);return{a:()=>{const t=P_(e,E_(s,"float32")),a=sF(n.shape,r);return a.length>0?ID(CO(t,a),n.shape):t},b:()=>{let t=z_(e,E_(n,"float32"));const a=sF(s.shape,r);a.length>0&&(t=ID(CO(t,a),s.shape));const o=V_(s);return ZO(P_(t,E_(o,"float32")))}}}},nW={kernelName:nT,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,o,i]=t,l=null==i?H_(1):i,u=sF(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=eF(r,a),d=z_(e,l),p=rL(L_(o,H_(s))),f=z_(z_(z_(p,p),p),H_(-.5));return{x:()=>1===a.rank?ID(z_(z_(e,DO(ID(p,[1,1,1,a.shape[0]]),c)),l),r.shape):ID(z_(z_(e,p),l),r.shape),mean:()=>{let e=z_(z_(p,H_(-1)),d);return 1===a.rank&&(e=CO(e,u)),ID(e,a.shape)},variance:()=>{let e=z_(z_(f,h),d);return 1===a.rank&&(e=CO(e,u)),ID(e,a.shape)},scale:()=>{const t=z_(h,p);let n=z_(e,t);return 1===a.rank&&(n=CO(n,u)),ID(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=CO(t,u)),ID(t,a.shape)}}}},sW={kernelName:sT,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a,batchDims:o}=n,i=y$(a,s.shape)[0],l=(e,t,n)=>()=>{const s=e.shape,r=t.size,o=s.slice(0,i),l=o.length,u=s.slice(a,s.length).slice(1),c=u.length,h=rW(0,l),d=rW(l+1,l+1+c),p=aW([o,[r],u]),f=ID(n,p),m=ID(t,[r]),g=aW([[l],h,d]),x=jL(f,g);let b=PL(x,m,e.shape[i]);const y=IO(g);return b=jL(b,y),b};if(1===o){const t=s.shape[0],n=s.split(t,0);return{x:()=>{const t=IL(n.map(((t,n)=>l(t,r.slice(n,1),e.slice(n,1))())));return t.reshape(s.shape)},indices:()=>r}}return{x:l(s,r,e),indices:()=>r}}};function rW(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function aW(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const oW={kernelName:oT,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>U_(n),b:()=>U_(s)}}},iW={kernelName:iT,gradFunc:e=>({x:()=>E_(e,"float32")})},lW={kernelName:cT,gradFunc:e=>({x:()=>U_(e)})},uW={kernelName:hT,gradFunc:e=>({x:()=>U_(e)})},cW={kernelName:dT,gradFunc:e=>({x:()=>U_(e)})},hW={kernelName:pT,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=BO(s,0);return{x:()=>cO(a,e,z_(e,r))}}},dW={kernelName:bT,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>P_(e,L_(n,1))}}},pW={kernelName:xT,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>P_(e,E_(n,"float32"))}}},fW={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=AO(s);return eF(e,z_(CO(e,r,!0),t))}}}},mW=$A({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,o=.5){const i={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:o};return mA.runKernel(IT,i,l)}}),gW={kernelName:wT,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:o,alpha:i,beta:l}=n;return{x:()=>mW(s,r,e,a,o,i,l)}}};function xW(e,t,n,s){return t.rank<n.rank&&(t=ID(t,vO(t.shape,s))),e.rank<n.rank&&(e=ID(e,vO(e.shape,s))),{x:()=>z_(e,E_(uO(n,t),e.dtype))}}const bW={kernelName:NT,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],o=xW(e,t[1],a,y$(r,a.shape));return{x:()=>o.x()}}},yW={kernelName:ST,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>z_(e,E_(PO(n,s),"float32")),b:()=>z_(e,E_(HO(n,s),"float32"))}}},vW=$A({maxPool3dGrad_:function(e,t,n,s,r,a,o){const i=IA(e,"dy","maxPool3dGrad"),l=IA(t,"input","maxPool3dGrad"),u=IA(n,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=ID(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=ID(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=ID(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),u$(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),u$(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),u$(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),wD("maxPool3dGrad",a,o);const f={dy:c,input:h,output:d},m={filterSize:s,strides:r,pad:a,dimRoundingMode:o},g=mA.runKernel(ET,f,m);return p?ID(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),kW={kernelName:TT,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=n;return{x:()=>vW(e,s,r,a,o,i,l)}}},wW=$A({maxPoolGrad_:function(e,t,n,s,r,a,o){const i=IA(e,"dy","maxPoolGrad"),l=IA(t,"input","maxPoolGrad"),u=IA(n,"output","maxPoolGrad");u$(l.rank===i.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`)),u$(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),u$(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),wD("maxPoolGrad",a,o);const c={dy:i,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:o};return mA.runKernel(CT,c,h)}}),IW={kernelName:$T,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>wW(e,s,r,a,o,i)}}},NW={kernelName:DT,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>ED(e,a,s.shape)}}},SW={kernelName:jT,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>ED(e,a,s.shape)}}},$W={kernelName:KT,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,o=s,i=rF(a.shape,o.shape);return{a:()=>{const t=E_(o,"float32");let n=z_(e,z_(t,Q_(a,eF(t,H_(1)))));const s=sF(a.shape,i);return s.length>0&&(n=CO(n,s)),ID(n,a.shape)},b:()=>{const t=BO(a,0),n=cO(t,XO(a),U_(a));let s=z_(e,z_(r,n));const l=sF(o.shape,i);return l.length>0&&(s=CO(s,l)),ID(s,o.shape)}}}};const CW={kernelName:gE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=BO(n,H_(0)),s=H_($P),r=H_(CP),a=z_(e,r),o=z_(z_(e,s),AO(E_(n,"float32")));return cO(t,a,o)}}}},TW={kernelName:SE,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>_D(e,s,r)}}},EW={kernelName:$E,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>$D(e,s)}}},RW=[gz,xz,bz,yz,vz,kz,wz,Iz,Nz,Sz,$z,Cz,Ez,Az,_z,Fz,Dz,Oz,Mz,Lz,Bz,Pz,Wz,zz,Uz,Gz,Hz,jz,Kz,qz,{kernelName:VC,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=rF(n.shape,s.shape);return{a:()=>{const t=P_(e,E_(s,"float32")),a=sF(n.shape,r);return a.length>0?ID(CO(t,a),n.shape):t},b:()=>{let t=z_(e,E_(n,"float32"));const a=sF(s.shape,r);a.length>0&&(t=ID(CO(t,a),s.shape));const o=V_(s);return ZO(P_(t,E_(o,"float32")))}}}},Xz,Yz,Zz,Jz,Qz,tW,eW,nW,sW,oW,iW,lW,uW,cW,hW,dW,pW,fW,gW,bW,bW,yW,kW,IW,{kernelName:AT,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=y$(r,s.shape),o=d$(yO(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=ID(e,t);return P_(z_(n,fM(s.shape,"float32")),o)}}}},{kernelName:_T,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,o]=t,i=xW(e,o,a,y$(r,a.shape));return{x:()=>i.x()}}},{kernelName:FT,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>z_(e,E_(jO(n,s),"float32")),b:()=>z_(e,E_(BO(n,s),"float32"))}}},NW,{kernelName:OT,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=rF(n.shape,s.shape);return{a:()=>{const t=sF(n.shape,r);return t.length>0?ID(CO(e,t),n.shape):e},b:()=>{const t=z_(e,ZO(MO(P_(n,s)))),a=sF(s.shape,r);return a.length>0?ID(CO(t,a),s.shape):t}}}},{kernelName:LT,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=rF(n.shape,s.shape);return{a:()=>{const t=z_(e,E_(s,"float32")),a=sF(n.shape,r);return a.length>0?ID(CO(t,a),n.shape):t},b:()=>{const t=z_(e,E_(n,"float32")),a=sF(s.shape,r);return a.length>0?ID(CO(t,a),s.shape):t}}}},{kernelName:BT,gradFunc:e=>({x:()=>ZO(e)})},{kernelName:GT,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>pM(n.shape,"float32")}}},{kernelName:UT,gradFunc:e=>({x:()=>U_(e)})},{kernelName:HT,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return zL(e,s).map((e=>()=>e))}},SW,SW,$W,{kernelName:qT,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=BO(n,0);return{x:()=>cO(r,e,z_(e,s)),alpha:()=>{let t=cO(r,U_(e),z_(e,n));const a=sF(s.shape,e.shape);return a.length>0&&(t=CO(t,a)),ID(t,s.shape)}}}},{kernelName:XT,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;let a=[];return a=null==r?s.shape.map(((e,t)=>t)):"number"==typeof r?[r]:r,{x:()=>function(e,t,n){const s=e.shape.length,r=s-n.length,a=wO(n,s);let o=e;null!=a&&(o=jL(e,a));const i=o.shape.slice(),l=i.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);i.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const r=ID(t,s),a=nO(e,n,!0,!1),o=nO(e,n,!0,!0),i=z_(a,o);return z_(r,i)}(o.reshape(i),t,r);if(u=u.reshape(o.shape),null!=a){const e=IO(a);u=jL(u,e)}return u}(s,e,a)}}},{kernelName:tE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>P_(e,ZO(V_(n)))}}},{kernelName:lE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=z_(jO(n,6),NL(n));return{x:()=>z_(e,E_(s,"float32"))}}},{kernelName:nE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(e,E_(NL(n),"float32"))}}},{kernelName:sE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ID(e,n.shape)}}},{kernelName:oE,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>mA.runKernel(iE,r,n)}}},{kernelName:rE,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>mA.runKernel(aE,r,n)}}},{kernelName:uE,gradFunc:(e,t,n)=>{const{dims:s}=n,r=y$(s,e.shape);return{x:()=>JM(e,r)}}},{kernelName:cE,gradFunc:e=>({x:()=>U_(e)})},{kernelName:hE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ZO(P_(e,z_(Q_(n,1.5),2)))}}},{kernelName:mE,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>E_(U_(n),"float32"),t:()=>z_(e,E_(n,e.dtype)),e:()=>z_(e,E_(sM(n),e.dtype))}}},CW,{kernelName:kE,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(e,z_(n,eF(H_(1),n)))}}},{kernelName:vE,gradFunc:e=>({x:()=>U_(e)})},{kernelName:bE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(eO(E_(n,"float32")),e)}}},{kernelName:yE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(tO(E_(n,"float32")),e)}}},{kernelName:xE,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,o=s.shape,[i,l]=KF(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([i[t],o[t]-i[t]-l[t]]);return{x:()=>$M(e,u)}}},{kernelName:CE,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=z_(e,s);return{logits:()=>eF(a,z_(CO(a,[r],!0),s))}}},{kernelName:wE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(e,TD(n))}}},TW,TW,EW,EW,{kernelName:IE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>P_(e,z_(W_(E_(n,"float32")),2))}}},{kernelName:FE,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=H_(2);return{a:()=>z_(e,z_(r,eF(n,s))),b:()=>z_(e,z_(r,eF(s,n)))}}},{kernelName:DE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(e,z_(E_(n,"float32"),2))}}},{kernelName:ZE,gradFunc:e=>({x:()=>U_(e)})},{kernelName:zE,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=rF(n.shape,s.shape);return{a:()=>{let t=e;const s=sF(n.shape,r);return s.length>0&&(t=CO(t,s)),ID(t,n.shape)},b:()=>{let t=e;const n=sF(s.shape,r);return n.length>0&&(t=CO(t,n)),ID(ZO(t),s.shape)}}}},{kernelName:NE,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;y$(a,s.shape).forEach((e=>{r[e]=1}));const o=ID(e,r),i=z_(o,fM(s.shape,"float32"));return{x:()=>i}}},{kernelName:WE,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>P_(e,V_(eO(n)))}}},{kernelName:VE,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>z_(eF(H_(1),V_(n)),e)}}},{kernelName:UE,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=U_(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=L_(t,ED(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=L_(t,ED(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let o=0;o<r[2];++o)t=L_(t,ED(e,[n*s.shape[0],a*s.shape[1],o*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let o=0;o<r[2];++o)for(let i=0;i<r[3];++i)t=L_(t,ED(e,[n*s.shape[0],a*s.shape[1],o*s.shape[2],i*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:jE,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=IO(r);return{x:()=>jL(e,a)}}},{kernelName:qE,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>IL(e,r)}}},{kernelName:XE,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=aF(t,U_(t)),s=LO(e,n);let r=PO(t,H_(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=_O(r,e+1);r=nM(r,fM(s.shape,"bool"));const o=U_(s);return cO(r,s,o)}(e,n)}}},{kernelName:YE,gradFunc:e=>({x:()=>U_(e)})}];for(const e of RW)hR(e);YR().prototype.abs=function(){return this.throwIfDisposed(),tF(this)},YR().prototype.acos=function(){return this.throwIfDisposed(),YF(this)},YR().prototype.acosh=function(){return this.throwIfDisposed(),ZF(this)},YR().prototype.add=function(e){return this.throwIfDisposed(),L_(this,e)},YR().prototype.all=function(e,t){return this.throwIfDisposed(),QF(this,e,t)},YR().prototype.any=function(e,t){return this.throwIfDisposed(),eD(this,e,t)},YR().prototype.argMax=function(e){return this.throwIfDisposed(),tD(this,e)},YR().prototype.argMin=function(e){return this.throwIfDisposed(),nD(this,e)},YR().prototype.asScalar=function(){return this.throwIfDisposed(),u$(1===this.size,(()=>"The array must have only 1 element.")),ID(this,[])},YR().prototype.asType=function(e){return this.throwIfDisposed(),E_(this,e)},YR().prototype.as1D=function(){return this.throwIfDisposed(),ID(this,[this.size])},YR().prototype.as2D=function(e,t){return this.throwIfDisposed(),ID(this,[e,t])},YR().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),ID(this,[e,t,n])},YR().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),ID(this,[e,t,n,s])},YR().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),ID(this,[e,t,n,s,r])},YR().prototype.asin=function(){return this.throwIfDisposed(),sD(this)},YR().prototype.asinh=function(){return this.throwIfDisposed(),rD(this)},YR().prototype.atan=function(){return this.throwIfDisposed(),aD(this)},YR().prototype.atan2=function(e){return this.throwIfDisposed(),oD(this,e)},YR().prototype.atanh=function(){return this.throwIfDisposed(),iD(this)},YR().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),ND(this,e,t,n,s)},YR().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),_D(this,e,t)},YR().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),FD(this,e,t,n,s,r)},YR().prototype.broadcastTo=function(e){return this.throwIfDisposed(),zD(this,e)},YR().prototype.cast=function(e){return this.throwIfDisposed(),E_(this,e)},YR().prototype.ceil=function(){return this.throwIfDisposed(),WD(this)},YR().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),VD(this,e,t)},YR().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof XR&&(e=[e]),$D([this,...e],t)},YR().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),qD(this,e,t,n,s,r,a)},YR().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),YD(this,e,t,n,s,r)},YR().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),KD(this,e,t,n,s,r,a)},YR().prototype.cos=function(){return this.throwIfDisposed(),eO(this)},YR().prototype.cosh=function(){return this.throwIfDisposed(),tO(this)},YR().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),nO(this,e,t,n)},YR().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),sO(this,e,t,n)},YR().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),aO(this,e,t)},YR().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),oO(this,e,t,n,s,r,a)},YR().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),lO(this,e,t,n,s,r)},YR().prototype.divNoNan=function(e){return this.throwIfDisposed(),hO(this,e)},YR().prototype.div=function(e){return this.throwIfDisposed(),P_(this,e)},YR().prototype.dot=function(e){return this.throwIfDisposed(),dO(this,e)},YR().prototype.elu=function(){return this.throwIfDisposed(),fO(this)},YR().prototype.equal=function(e){return this.throwIfDisposed(),uO(this,e)},YR().prototype.erf=function(){return this.throwIfDisposed(),gO(this)},YR().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),RO(this,e,t)},YR().prototype.exp=function(){return this.throwIfDisposed(),AO(this)},YR().prototype.expandDims=function(e){return this.throwIfDisposed(),_O(this,e)},YR().prototype.expm1=function(){return this.throwIfDisposed(),FO(this)},YR().prototype.fft=function(){return this.throwIfDisposed(),gL(this)},YR().prototype.flatten=function(){return this.throwIfDisposed(),ID(this,[this.size])},YR().prototype.floor=function(){return this.throwIfDisposed(),MO(this)},YR().prototype.floorDiv=function(e){return this.throwIfDisposed(),B_(this,e)},YR().prototype.gather=function(e,t,n){return this.throwIfDisposed(),LO(this,e,t,n)},YR().prototype.greaterEqual=function(e){return this.throwIfDisposed(),PO(this,e)},YR().prototype.greater=function(e){return this.throwIfDisposed(),BO(this,e)},YR().prototype.ifft=function(){return this.throwIfDisposed(),xL(this)},YR().prototype.irfft=function(){return this.throwIfDisposed(),bL(this)},YR().prototype.isFinite=function(){return this.throwIfDisposed(),WO(this)},YR().prototype.isInf=function(){return this.throwIfDisposed(),VO(this)},YR().prototype.isNaN=function(){return this.throwIfDisposed(),UO(this)},YR().prototype.leakyRelu=function(e){return this.throwIfDisposed(),GO(this,e)},YR().prototype.lessEqual=function(e){return this.throwIfDisposed(),jO(this,e)},YR().prototype.less=function(e){return this.throwIfDisposed(),HO(this,e)},YR().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),qO(this,e,t,n,s)},YR().prototype.logSigmoid=function(){return this.throwIfDisposed(),QO(this)},YR().prototype.logSoftmax=function(e){return this.throwIfDisposed(),eM(this,e)},YR().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),tM(this,e,t)},YR().prototype.log=function(){return this.throwIfDisposed(),XO(this)},YR().prototype.log1p=function(){return this.throwIfDisposed(),YO(this)},YR().prototype.logicalAnd=function(e){return this.throwIfDisposed(),nM(this,e)},YR().prototype.logicalNot=function(){return this.throwIfDisposed(),sM(this)},YR().prototype.logicalOr=function(e){return this.throwIfDisposed(),rM(this,e)},YR().prototype.logicalXor=function(e){return this.throwIfDisposed(),aM(this,e)},YR().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),CD(this,e,t,n)},YR().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),uM(this,e,t,n,s)},YR().prototype.max=function(e,t){return this.throwIfDisposed(),SO(this,e,t)},YR().prototype.maximum=function(e){return this.throwIfDisposed(),aF(this,e)},YR().prototype.mean=function(e,t){return this.throwIfDisposed(),dM(this,e,t)},YR().prototype.min=function(e,t){return this.throwIfDisposed(),$O(this,e,t)},YR().prototype.minimum=function(e){return this.throwIfDisposed(),gM(this,e)},YR().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),xM(this,e,t)},YR().prototype.mod=function(e){return this.throwIfDisposed(),bM(this,e)},YR().prototype.mul=function(e){return this.throwIfDisposed(),z_(this,e)},YR().prototype.neg=function(){return this.throwIfDisposed(),ZO(this)},YR().prototype.norm=function(e,t,n){return this.throwIfDisposed(),EO(this,e,t,n)},YR().prototype.notEqual=function(e){return this.throwIfDisposed(),wM(this,e)},YR().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),IM(this,e,t,n)},YR().prototype.onesLike=function(){return this.throwIfDisposed(),NM(this)},YR().prototype.pad=function(e,t){return this.throwIfDisposed(),$M(this,e,t)},YR().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),_M(this,e,t,n,s,r,a)},YR().prototype.pow=function(e){return this.throwIfDisposed(),Q_(this,e)},YR().prototype.prelu=function(e){return this.throwIfDisposed(),FM(this,e)},YR().prototype.prod=function(e,t){return this.throwIfDisposed(),DM(this,e,t)},YR().prototype.reciprocal=function(){return this.throwIfDisposed(),XM(this)},YR().prototype.relu=function(){return this.throwIfDisposed(),YM(this)},YR().prototype.relu6=function(){return this.throwIfDisposed(),ZM(this)},YR().prototype.reshapeAs=function(e){return this.throwIfDisposed(),ID(this,e.shape)},YR().prototype.reshape=function(e){return this.throwIfDisposed(),ID(this,e)},YR().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),FB(this,e,t,n)},YR().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),DB(this,e,t,n)},YR().prototype.reverse=function(e){return this.throwIfDisposed(),JM(this,e)},YR().prototype.rfft=function(){return this.throwIfDisposed(),vL(this)},YR().prototype.round=function(){return this.throwIfDisposed(),sL(this)},YR().prototype.rsqrt=function(){return this.throwIfDisposed(),rL(this)},YR().prototype.selu=function(){return this.throwIfDisposed(),aL(this)},YR().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),oL(this,e,t,n,s,r,a)},YR().prototype.sigmoid=function(){return this.throwIfDisposed(),TD(this)},YR().prototype.sign=function(){return this.throwIfDisposed(),lL(this)},YR().prototype.sin=function(){return this.throwIfDisposed(),uL(this)},YR().prototype.sinh=function(){return this.throwIfDisposed(),cL(this)},YR().prototype.slice=function(e,t){return this.throwIfDisposed(),ED(this,e,t)},YR().prototype.softmax=function(e){return this.throwIfDisposed(),mL(this,e)},YR().prototype.softplus=function(){return this.throwIfDisposed(),JO(this)},YR().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),AM(this,e,t)},YR().prototype.split=function(e,t){return this.throwIfDisposed(),yL(this,e,t)},YR().prototype.sqrt=function(){return this.throwIfDisposed(),W_(this)},YR().prototype.square=function(){return this.throwIfDisposed(),V_(this)},YR().prototype.squaredDifference=function(e){return this.throwIfDisposed(),kL(this,e)},YR().prototype.squeeze=function(e){return this.throwIfDisposed(),wL(this,e)},YR().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof XR?[this,e]:[this,...e];return IL(n,t)},YR().prototype.step=function(e){return this.throwIfDisposed(),NL(this,e)},YR().prototype.stridedSlice=function(e,t,n,s,r,a,o,i){return this.throwIfDisposed(),SL(this,e,t,n,s,r,a,o,i)},YR().prototype.sub=function(e){return this.throwIfDisposed(),eF(this,e)},YR().prototype.sum=function(e,t){return this.throwIfDisposed(),CO(this,e,t)},YR().prototype.tan=function(){return this.throwIfDisposed(),$L(this)},YR().prototype.tanh=function(){return this.throwIfDisposed(),RD(this)},YR().prototype.tile=function(e){return this.throwIfDisposed(),DO(this,e)},YR().prototype.toBool=function(){return this.throwIfDisposed(),E_(this,"bool")},YR().prototype.toFloat=function(){return this.throwIfDisposed(),E_(this,"float32")},YR().prototype.toInt=function(){return this.throwIfDisposed(),E_(this,"int32")},YR().prototype.topk=function(e,t){return this.throwIfDisposed(),ML(this,e,t)},YR().prototype.transpose=function(e){return this.throwIfDisposed(),jL(this,e)},YR().prototype.unique=function(e){return this.throwIfDisposed(),BL(this,e)},YR().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),PL(this,e,t)},YR().prototype.unstack=function(e){return this.throwIfDisposed(),zL(this,e)},YR().prototype.where=function(e,t){return this.throwIfDisposed(),cO(e,this,t)},YR().prototype.zerosLike=function(){return this.throwIfDisposed(),U_(this)};class AW extends Error{constructor(e){super(e),Object.setPrototypeOf(this,AW.prototype)}}class _W extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_W.prototype)}}class FW extends Error{constructor(e){super(e),Object.setPrototypeOf(this,FW.prototype)}}class DW extends Error{constructor(e){super(e),Object.setPrototypeOf(this,DW.prototype)}}class OW extends Error{constructor(e){super(e),Object.setPrototypeOf(this,OW.prototype)}}class MW{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function LW(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function BW(e,t){if(!e)throw new OW(t)}function PW(e,t){let n=0;for(const s of e)s===t&&n++;return n}function zW(e){return 1===e.length?e[0]:e}function WW(e){return Array.isArray(e)?e:[e]}function VW(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function UW(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let GW={};function HW(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function jW(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>jW(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?jW(t):e[n]=t.value)}}}function KW(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in GW)a=GW[r];else if(a=t[r],null==a)throw new FW(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new FW(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const o=a.className;let i,l;if(o in n?[i,l]=n[o]:o in GW?[i,l]=GW.className:o in t&&([i,l]=t[o]),null==i)throw new FW(`Unknown ${s}: ${o}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(GW))e[t]=GW[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},GW);for(const e of Object.keys(n))GW[e]=n[e];jW(a.config);const s=l(i,a.config,n,r);return GW=Object.assign({},t),s}{const e=Object.assign({},GW);for(const e of Object.keys(n))GW[e]=n[e];const t=new i(a.config);return GW=Object.assign({},e),t}}}function qW(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function XW(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function YW(e){if(null==e)throw new FW(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function ZW(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new FW(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function JW(e,t,n=0,s=1/0){return BW(n>=0),BW(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function QW(e,t){Array.isArray(e)?(P(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>QW(e,`element ${n+1} of ${t}`)))):P(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${eV(e)}.`))}function eV(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>eV(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function tV(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let nV=0;function sV(){return nV++}const rV={};function aV(e=""){return e in rV||(rV[e]=0),rV[e]+=1,e+rV[e].toString()}const oV=["channelsFirst","channelsLast"],iV=["nearest","bilinear"],lV=["valid","same","causal"],uV=["max","avg"],cV=["sum","mul","concat","ave"],hV=new Map;function dV(e){ZW(oV,"DataFormat",e)}function pV(e){ZW(lV,"PaddingMode",e)}function fV(e){ZW(uV,"PoolMode",e)}const mV=[];function gV(e,t){mV.push(e);try{const e=t();return mV.pop(),e}catch(e){throw mV.pop(),e}}function xV(e){if(!vV(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===mV.length?"":mV.join("/")+"/")+e}function bV(e){if(!vV(e))throw new Error("Not a valid tensor name: '"+e+"'");hV.has(e)||hV.set(e,0);const t=hV.get(e);if(hV.set(e,hV.get(e)+1),t>0){const n=`${e}_${t}`;return hV.set(n,1),n}return e}const yV=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function vV(e){return!!e.match(yV)}function kV(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function wV(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function IV(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function NV(e,t){if(t<e)throw new FW(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let SV;function $V(){return null==SV&&(SV=Wr.backend.epsilon()),SV}function CV(e,t){return Da(e,t)}function TV(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),Uo(e,n)}function EV(e,t,n){return xo((()=>{switch(e.rank){case 1:return bl(e,t,n);case 2:return yl(e,[t,0],[n,e.shape[1]]);case 3:return vl(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return kl(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return xl(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return xl(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new FW(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function RV(e,t,n){return xo((()=>{switch(e.rank){case 1:return bl(e,t,n);case 2:return yl(e,[0,t],[e.shape[0],n]);case 3:return vl(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return kl(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new FW(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function AV(e,t,n,s){return xo((()=>{switch(e.rank){case 1:return bl(e,t,n);case 2:switch(s){case 1:return EV(e,t,n);case 2:return RV(e,t,n);default:throw new FW(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return EV(e,t,n);case 2:return vl(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return RV(e,t,n);default:throw new FW(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return EV(e,t,n);case 2:return kl(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return kl(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return RV(e,t,n);default:throw new FW(`The axis is not within the rank of the tensor ${s}`)}default:throw new FW(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function _V(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Qo(e,t)}function FV(e,t){switch(e.rank){case 1:return ei([e,t]);case 2:return ti([e,t],0);case 3:return ni([e,t],0);case 4:return si([e,t],0);default:throw new FW(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function DV(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new FW(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return yi(e,t)}function OV(e,t=0,n=1,s,r){return ul(e,t,n,s,r)}function MV(e,t,n,s){if(e.rank<2||t.rank<2)throw new DW(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new DW(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return Zl({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?PV(e.rank,s,"channelsLast"):null,activation:n});{const r=e.shape.slice(),a=r.pop();e=Uo(e,[-1,a]);const o=t.shape.slice(),i=o.pop(),l=o.pop(),u=[...o,i],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=Uo(Ml(t,c),[l,-1]);const h=[...r,...u];return Uo(Zl({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?PV(e.rank,s,"channelsLast"):null,activation:n}),h)}}function LV(e,t,n){return xo((()=>(t=Array.isArray(t)?El(t,"int32"):Da(t,"int32"),wi(e,t,n))))}function BV(e){return Ei(e,e)}function PV(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new FW(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?Uo(t,[1,s[0],1,1,1]):Uo(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?Uo(t,[1,1,1,1,s[0]]):Uo(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?Uo(t,[1,s[0],1,1]):Uo(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?Uo(t,[1,1,1,s[0]]):Uo(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?Uo(t,[1,s[0],1]):Uo(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?Uo(t,[1,1,s[0]]):Uo(t,[1].concat(s))}else if(e<3)return t;throw new FW(`Unsupported input rank by biasAdd: ${t.rank}`)}function zV(e,t,n){return xo((()=>(null==n&&(n="channelsLast"),dV(n),So(e,PV(e.rank,t,n)))))}function WV(e,t,n,s){return xo((()=>Ll(e,t,n,s)))}function VV(e,t,n=!1){return n?e():t()}const UV=["fanIn","fanOut","fanAvg"],GV=["normal","uniform","truncatedNormal"];class HV extends ho{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class jV extends HV{apply(e,t){return tl(e,t)}}jV.className="Zeros",fo(jV);class KV extends HV{apply(e,t){return nl(e,t)}}KV.className="Ones",fo(KV);class qV extends HV{constructor(e){if(super(),"object"!=typeof e)throw new FW(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new FW(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return xo((()=>Ei(wo(this.value),nl(e,t))))}getConfig(){return{value:this.value}}}qV.className="Constant",fo(qV);class XV extends HV{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return cl(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}XV.className="RandomUniform",fo(XV);class YV extends HV{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new DW(`randomNormal does not support dType ${t}.`);return OV(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}YV.className="RandomNormal",fo(YV);class ZV extends HV{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new DW(`truncatedNormal does not support dType ${t}.`);return Rl(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ZV.className="TruncatedNormal",fo(ZV);class JV extends HV{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return xo((()=>{if(2!==e.length||e[0]!==e[1])throw new FW("Identity matrix initializer can only be used for 2D square matrices.");return Ei(this.gain,vi(e[0]))}))}getConfig(){return{gain:this.gain}}}JV.className="Identity",fo(JV);class QV extends HV{constructor(e){if(super(),e.scale<0)throw new FW(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,ZW(UV,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){ZW(GV,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(dV(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=kV(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=kV(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=kV(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new DW(`${this.getClassName()} does not support dType ${t}.`);return Rl(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return cl(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}QV.className="VarianceScaling",fo(QV);class eU extends QV{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return QV.className}}eU.className="GlorotUniform",fo(eU);class tU extends QV{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return QV.className}}tU.className="GlorotNormal",fo(tU);class nU extends QV{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return QV.className}}nU.className="HeNormal",fo(nU);class sU extends QV{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return QV.className}}sU.className="HeUniform",fo(sU);class rU extends QV{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return QV.className}}rU.className="LeCunNormal",fo(rU);class aU extends QV{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return QV.className}}aU.className="LeCunUniform",fo(aU);class oU extends HV{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return xo((()=>{if(e.length<2)throw new DW("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=U(e.slice(0,-1)),s=e[e.length-1],r=n*s;r>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${r}) elements: Slowness may result.`);const a=OV([Math.max(s,n),Math.min(s,n)],0,1,t,this.seed),o=Lu.qr(a,!1);let i=o[0];const l=o[1].flatten().stridedSlice([0],[Math.min(s,n)*Math.min(s,n)],[Math.min(s,n)+1]);return i=Ei(i,l.sign()),n<s&&(i=i.transpose()),Ei(wo(this.gain),i.reshape(e))}))}getConfig(){return{gain:this.gain,seed:this.seed}}}oU.className="Orthogonal",fo(oU);const iU={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function lU(e,t={}){return KW(e,po.getMap().classNameMap,t,"initializer")}function uU(e){return HW(e)}function cU(e){if("string"==typeof e){const t=e in iU?iU[e]:e;if("GlorotNormal"===t)return new tU;if("GlorotUniform"===t)return new eU;if("HeNormal"===t)return new nU;if("HeUniform"===t)return new sU;if("LeCunNormal"===t)return new rU;if("LeCunUniform"===t)return new aU;{const e={};return e.className=t,e.config={},lU(e)}}return e instanceof HV?e:lU(e)}function hU(e){return Array.isArray(e)&&Array.isArray(e[0])}function dU(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function pU(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new FW(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function fU(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new FW(`Expected exactly 1 Shape; got ${e.length}`)}return e}function mU(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const gU="Variable";class xU{constructor(e,t="float32",n=gU,s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=sV(),n=null==n?gU:n,this.originalName=xV(n),this.name=bV(this.originalName),this.trainable_=s,this.constraint=r,this.val=function(e,t=!0,n,s){return Wr.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function bU(e){return e.map((e=>e.read()))}function yU(e){e.forEach((e=>{e[0].write(e[1])}))}class vU{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class kU{constructor(e,t,n,s,r,a,o){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=o,this.id=sV(),null!=a&&(this.originalName=xV(a),this.name=bV(this.originalName)),this.rank=t.length}}let wU=0;class IU{constructor(e,t){this.callArgs=t,this.id=wU++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let NU=0;class SU extends ho{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=NU++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=VW(e)+"_"+aV(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new _W(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new FW(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return zW(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return zW(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new AW(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new AW(`Layer ${this.name} is not connected, no input to return.`);return zW(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new AW(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new AW(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return zW(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){const t=WW(e);if(null==this.inputSpec||0===this.inputSpec.length)return;const n=WW(this.inputSpec);if(t.length!==n.length)throw new FW(`Layer ${this.name} expects ${n.length} inputs, but it received ${t.length} input tensors. Input received: ${e}`);for(let e=0;e<t.length;e++){const s=t[e],r=n[e];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new FW(`Input ${e} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new FW(`Input ${e} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new FW(`Input ${e} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new FW(`Input ${e} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const t=s.shape;for(const n in r.axes){const s=Number(n),a=r.axes[n],o=s>=0?t[s]:t[t.length+s];if(null!=a&&-1===[a,null].indexOf(o))throw new FW(`Input ${e} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=r.shape)for(let t=0;t<r.shape.length;++t){const n=r.shape[t],a=s.shape[t];if(null!=n&&null!=a&&n!==a)throw new FW(`Input ${e} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=WW(e),s=function(e){let t=!0;for(const n of WW(e))if(!(n instanceof kU)){t=!1;break}return t}(e),r=function(e){let t=!0;for(const n of WW(e))if(n instanceof kU){t=!1;break}return t}(e);if(s===r)throw new FW("Arguments to apply() must be all SymbolicTensors or all Tensors");return gV(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of WW(e))t.push(n.shape);this.build(zW(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);this.supportsMasking&&this.setMaskMetadata(e,s);const r=WW(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=zW(a),null!=this.activityRegularizer)throw new DW("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=WW(e);const t=[];for(const n of e)t.push(n.shape);return zW(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new kU(a,n,this,WW(e),t,this.name,s))):new kU(a,s,this,WW(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new DW("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new AW(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new AW(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new _W(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return mU(this.weights)}build(e){this.built=!0}getWeights(e=!1){return bU(e?this.trainableWeights:this.weights)}setWeights(e){xo((()=>{const t=this.weights;if(t.length!==e.length)throw new FW(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=bU(t);for(let r=0;r<s.length;++r){const a=s[r],o=t[r],i=e[r];if(!G(a.shape,i.shape))throw new FW(`Layer weight shape ${a.shape} not compatible with provided weight shape ${i.shape}`);n.push([o,i])}yU(n)}))}addWeight(e,t,n,s,r,a,o,i){if(-1!==this._addedWeightNames.indexOf(e))throw new FW(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=i?i():cU("zeros"));const l=s.apply(t,n),u=new xU(l,n,e,a,o);return l.dispose(),null!=r&&this.addLoss((()=>r.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=WW(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}setMaskMetadata(e,t,n){if(!this.supportsMasking)return;const s=this.computeMask(e,n);if(t instanceof Array&&s instanceof Array){if(t.length!==s.length)throw new Error(`${this.name} outputs ${t.length} tensors but ${s.length} masks for those tensors`);for(let e=0;e<t.length;e++)t[e].kerasMask=s[e]}else{if(s instanceof Array)throw new Error(`{this.name} outputs a single tensor but ${s.length} masks`);if(t instanceof Array)throw new Error(`{this.name} outputs ${t.length} tensors but only one mask`);t.kerasMask=s}}addInboundNode(e,t,n,s,r,a,o=null){const i=WW(e);t=WW(t),n=WW(n),s=WW(s),r=dU(r),a=dU(a);const l=[],u=[],c=[];for(const e of i)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new IU({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:i,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},o);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function $U(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=$U(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class CU extends SU{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:aV("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new FW("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new FW("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new FW("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new kU(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new IU({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new FW(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}CU.className="InputLayer",fo(CU);class TU{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof TU)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new FW(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Da(t,e.dtype)}catch(n){throw new FW(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof kU){if(null==this.id2Value[e.id])throw new FW(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new FW(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof kU){if(null==this.id2Value[e.id])throw new FW(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new FW(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&bo(this.id2Mask)}}const EU=new MW,RU=new MW;function AU(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),o=a?e:[e],i=o.map((e=>e.name)),l=[],u=t.names();for(const e of i)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let h,d=EU.get(c);if(null==d){const e=function(e,t){P(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=FU(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:o}=FU(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in o)null==s[e]&&(s[e]=new Set),o[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:_U(s)}}(o,t);d=e.sorted,h=e.recipientCounts,EU.put(c,d),RU.put(c,h)}h={},r||Object.assign(h,RU.get(c));const p=new TU(t);for(let e=0;e<d.length;++e){if(null!=s){const e=go().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=d[e],o=a.sourceLayer;if(o instanceof CU)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=p.getValue(e),s=p.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==i.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=WW(o.apply(u,n));let x=null;o.supportsMasking&&(x=o.computeMask(u,c));const b=DU(a),y=Array.isArray(b)?b:[b];for(let e=0;e<y.length;++e){p.hasKey(y[e])||p.add(y[e],g[e],Array.isArray(x)?x[0]:x);const t=i.indexOf(y[e].name);-1!==t&&(l[t]=g[e])}r||bo(f)}return p.disposeMasks(),a?l:l[0]}function _U(e){const t={};for(const n in e)t[n]=e[n].size;return t}function FU(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],o=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=o[o.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&o.pop();else{o.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function DU(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}ke().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=EU&&EU.setMaxEntries(e),null!=RU&&RU.setMaxEntries(e)}));const OU={kernelName:$e,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(e,Ul(Da(n,"float32"),-1))}}},MU={kernelName:Ce,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Yi(Da(n,"float32")),s=Sl(Ri(wo(1),t));return Ji(fi(e,s))}}}},LU={kernelName:Te,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Sl(Ri(Yi(Da(n,"float32")),1));return fi(e,t)}}}},BU={kernelName:Ee,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ha(n.shape,s.shape);return{a:()=>{let t=e;const s=Ga(n.shape,r);return s.length>0&&(t=Ai(t,s)),Uo(t,n.shape)},b:()=>{let t=e;const n=Ga(s.shape,r);return n.length>0&&(t=Ai(t,n)),Uo(t,s.shape)}}}},PU={kernelName:Re,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},zU={kernelName:Fe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fl(n)}}},WU={kernelName:De,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Fl(n)}}},VU={kernelName:Oe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fi(e,Sl(Ri(wo(1),Yi(Da(n,"float32")))))}}},UU={kernelName:Me,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Sl(So(wo(1),Yi(Da(n,"float32"))));return fi(e,t)}}}},GU={kernelName:Pe,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ha(n.shape,s.shape);return{a:()=>{const t=So(Yi(n),Yi(s));let a=Ei(e,fi(s,t));const o=Ga(n.shape,r);return o.length>0&&(a=Ai(a,o)),Uo(a,n.shape)},b:()=>{const t=So(Yi(n),Yi(s));let a=Ji(Ei(e,fi(n,t)));const o=Ga(s.shape,r);return o.length>0&&(a=Ai(a,o)),Uo(a,s.shape)}}}},HU={kernelName:Le,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fi(e,So(Yi(Da(n,"float32")),1))}}},jU={kernelName:Be,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fi(e,Ri(wo(1),Yi(Da(n,"float32"))))}}},KU=Zr({avgPool3dGrad_:function(e,t,n,s,r,a){const o=Xr(e,"dy","avgPool3dGrad"),i=Xr(t,"input","avgPool3dGrad");let l=o,u=i,c=!1;4===i.rank&&(c=!0,l=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),u=Uo(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),P(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),P(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),Vo("avgPool3dGrad",r,a);const h={dy:l,input:u},d={filterSize:n,strides:s,pad:r,dimRoundingMode:a},p=Wr.runKernel(Ue,h,d);return c?Uo(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),qU={kernelName:Ve,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:o,dimRoundingMode:i}=n;return{x:()=>KU(e,s,r,a,o,i)}}},XU=Zr({avgPoolGrad_:function(e,t,n,s,r){const a=Xr(e,"dy","avgPoolGrad"),o=Xr(t,"input","avgPoolGrad");P(o.rank===a.rank,(()=>`Rank of input (${o.rank}) does not match rank of dy (${a.rank})`));let i=o,l=a,u=!1;3===o.rank&&(u=!0,i=Uo(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=Uo(a,[1,a.shape[0],a.shape[1],a.shape[2]])),P(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),P(4===i.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`));const c={dy:l,input:i},h={filterSize:n,strides:s,pad:r},d=Wr.runKernel(We,c,h);return u?Uo(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),YU={kernelName:ze,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:o}=n;return{x:()=>XU(e,s,r,a,o)}}},ZU={kernelName:Ge,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:o}=n;return a||o?!a&&o?{a:()=>Ui(e,r,!1,!1),b:()=>Ui(e,s,!0,!1)}:a&&!o?{a:()=>Ui(r,e,!1,!0),b:()=>Ui(s,e,!1,!1)}:{a:()=>Ui(r,e,!0,!0),b:()=>Ui(e,s,!0,!0)}:{a:()=>Ui(e,r,!1,!0),b:()=>Ui(s,e,!0,!1)}}},JU=Zr({spaceToBatchND_:function(e,t,n){const s=Xr(e,"x","spaceToBatchND");P(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),P(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),P(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Wr.runKernel(ns,r,a)}}),QU={kernelName:He,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>JU(e,s,r)}}},eG={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,o=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])o[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const i=[];for(let e=0;e<o.length;e++)o[e]>1&&i.push(e);return{x:()=>Ai(e,i,!0)}}},tG={kernelName:qe,gradFunc:e=>({x:()=>e.clone()})},nG={kernelName:Xe,gradFunc:e=>({x:()=>Fl(e)})},sG={kernelName:Ye,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>_l(Vi(Ni(s,r),wu(s,a)),e,Fl(e))}}},rG={kernelName:Je,inputsToSave:["x"],gradFunc:OU.gradFunc},aG={kernelName:Qe,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=Y(r,t[0].shape)[0],o=s.map((e=>e[a]));return Nl(e,o,a).map((e=>()=>e))}},oG={kernelName:et,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:o,pad:i,dataFormat:l}=n;return P(Po(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>oi(s.shape,e,r,o,i,l),filter:()=>Wl(s,e,r.shape,o,i,l)}}},iG={kernelName:nt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:o,dataFormat:i,dimRoundingMode:l}=n;return{dy:()=>ri(e,r,a,o,i,1,l),filter:()=>Wl(e,s,r.shape,a,o,i,l)}}},lG=Zr({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=Uo(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let o=t;4===o.rank&&(o=Uo(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),P(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),P(5===o.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${o.shape}.`)),P(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),P(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),P(o.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${o.shape[4]}) must match output depth for filter (${n[4]}).`));const i={x:a,dy:o},l={strides:s,pad:r,filterShape:n};return Wr.runKernel(rt,i,l)}}),uG={kernelName:st,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;P(Po(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[o,i]=t;return{x:()=>ui(o.shape,e,i,r,a),filter:()=>lG(o,e,i.shape,r,a)}}},cG=Zr({sin_:function(e){const t={x:Xr(e,"x","sin","float32")};return Wr.runKernel(Xn,t)}}),hG={kernelName:ot,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(Ji(cG(Da(n,"float32"))),e)}}},dG=Zr({sinh_:function(e){const t={x:Xr(e,"x","sinh")};return Wr.runKernel(Yn,t)}}),pG={kernelName:it,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(dG(Da(n,"float32")),e)}}},fG=Zr({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Xr(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Wr.runKernel(ut,r,a)}}),mG={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:o}=n;return{x:()=>{const t=Bi([r],s.rank);let n=fG(e,r,a,!o);return null!=t&&(n=Ml(n,t)),n}}}},gG={kernelName:pt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:o}=n,i=null==s?[1,1]:s;P(Po(i),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[l,u]=t;return P(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),P(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),P(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),P(zo(r,i),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`)),Vo("depthwiseConv2d",a,o),{x:()=>Yl(l.shape,e,u,r,a,i,o),filter:()=>Xl(l,e,u.shape,r,a,i,o)}}},xG={kernelName:xt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},o={x:s,filter:r,dy:e};return{x:()=>Wr.runKernel(bt,a,n),filter:()=>Wr.runKernel(yt,o,n)}}},bG={kernelName:wt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Wr.runKernel(It,s)}}},yG={kernelName:Nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Ei(xi(Ji(Yi(n))),2/Math.sqrt(Math.PI));return{x:()=>Ei(e,s)}}},vG={kernelName:$t,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(e,n)}}},kG={kernelName:Ct,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>Uo(e,n.shape)}}},wG={kernelName:Tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(e,xi(n))}}},IG={kernelName:_t,gradFunc:e=>({x:()=>Fl(e)})},NG={kernelName:Ft,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ha(n.shape,s.shape);return{a:()=>{const t=fi(e,Da(s,"float32")),a=Ga(n.shape,r);return a.length>0?Uo(Ai(t,a),n.shape):t},b:()=>{let t=Ei(e,Da(n,"float32"));const a=Ga(s.shape,r);a.length>0&&(t=Uo(Ai(t,a),s.shape));const o=Yi(s);return Ji(fi(t,Da(o,"float32")))}}}},SG=Zr({rsqrt_:function(e){const t={x:Xr(e,"x","rsqrt","float32")};return Wr.runKernel(Un,t)}}),$G={kernelName:Dt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,o,i]=t,l=null==i?wo(1):i,u=Ga(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Ri(r,a),d=Ei(e,l),p=SG(So(o,wo(s))),f=Ei(Ei(Ei(p,p),p),wo(-.5));return{x:()=>1===a.rank?Uo(Ei(Ei(e,yi(Uo(p,[1,1,1,a.shape[0]]),c)),l),r.shape):Uo(Ei(Ei(e,p),l),r.shape),mean:()=>{let e=Ei(Ei(p,wo(-1)),d);return 1===a.rank&&(e=Ai(e,u)),Uo(e,a.shape)},variance:()=>{let e=Ei(Ei(f,h),d);return 1===a.rank&&(e=Ai(e,u)),Uo(e,a.shape)},scale:()=>{const t=Ei(h,p);let n=Ei(e,t);return 1===a.rank&&(n=Ai(n,u)),Uo(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Ai(t,u)),Uo(t,a.shape)}}}},CG=Zr({unsortedSegmentSum_:function(e,t,n){const s=Xr(e,"x","unsortedSegmentSum"),r=Xr(t,"segmentIds","unsortedSegmentSum","int32");P(H(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},o={numSegments:n};return Wr.runKernel(Ss,a,o)}}),TG={kernelName:Ot,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,o=Y(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,i=t.slice(0,o),l=i.length,u=t.slice(a,t.length).slice(1),c=u.length,h=EG(0,l),d=EG(l+1,l+1+c),p=RG([i,[n],u]),f=Uo(e,p),m=Uo(r,[n]),g=RG([[l],h,d]),x=Ml(f,g);let b=CG(x,m,s.shape[o]);const y=Pi(g);return b=Ml(b,y),b},indices:()=>r}}};function EG(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function RG(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const AG={kernelName:Bt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Fl(n),b:()=>Fl(s)}}},_G={kernelName:Pt,gradFunc:e=>({x:()=>Da(e,"float32")})},FG={kernelName:Vt,gradFunc:e=>({x:()=>Fl(e)})},DG={kernelName:Ut,gradFunc:e=>({x:()=>Fl(e)})},OG={kernelName:Gt,gradFunc:e=>({x:()=>Fl(e)})},MG={kernelName:Ht,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=Ii(s,0);return{x:()=>_l(a,e,Ei(e,r))}}},LG={kernelName:Yt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fi(e,So(n,1))}}},BG={kernelName:Xt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fi(e,Da(n,"float32"))}}},PG={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=xi(s);return Ri(e,Ei(Ai(e,r,!0),t))}}}},zG=Zr({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,o=.5){const i={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:o};return Wr.runKernel(tn,i,l)}}),WG={kernelName:en,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:o,alpha:i,beta:l}=n;return{x:()=>zG(s,r,e,a,o,i,l)}}};function VG(e,t,n,s){return t.rank<n.rank&&(t=Uo(t,Mi(t.shape,s))),e.rank<n.rank&&(e=Uo(e,Mi(e.shape,s))),{x:()=>Ei(e,Da(gi(n,t),e.dtype))}}const UG={kernelName:nn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],o=VG(e,t[1],a,Y(r,a.shape));return{x:()=>o.x()}}},GG=Zr({less_:function(e,t){let n=Xr(e,"a","less","string_or_numeric"),s=Xr(t,"b","less","string_or_numeric");[n,s]=Fr(n,s),Ha(n.shape,s.shape);const r={a:n,b:s};return Wr.runKernel(jt,r)}}),HG={kernelName:sn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Ei(e,Da(Ni(n,s),"float32")),b:()=>Ei(e,Da(GG(n,s),"float32"))}}},jG=Zr({maxPool3dGrad_:function(e,t,n,s,r,a,o){const i=Xr(e,"dy","maxPool3dGrad"),l=Xr(t,"input","maxPool3dGrad"),u=Xr(n,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=Uo(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=Uo(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=Uo(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),P(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),P(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),P(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),Vo("maxPool3dGrad",a,o);const f={dy:c,input:h,output:d},m={filterSize:s,strides:r,pad:a,dimRoundingMode:o},g=Wr.runKernel(ln,f,m);return p?Uo(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),KG={kernelName:on,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=n;return{x:()=>jG(e,s,r,a,o,i,l)}}},qG=Zr({maxPoolGrad_:function(e,t,n,s,r,a,o){const i=Xr(e,"dy","maxPoolGrad"),l=Xr(t,"input","maxPoolGrad"),u=Xr(n,"output","maxPoolGrad");P(l.rank===i.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`)),P(4===i.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`)),P(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),Vo("maxPoolGrad",a,o);const c={dy:i,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:o};return Wr.runKernel(an,c,h)}}),XG={kernelName:rn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:o,pad:i}=n;return{x:()=>qG(e,s,r,a,o,i)}}},YG={kernelName:cn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=Y(r,s.shape),o=U(Oi(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=Uo(e,t);return fi(Ei(n,nl(s.shape,"float32")),o)}}}},ZG={kernelName:hn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,o]=t,i=VG(e,o,a,Y(r,a.shape));return{x:()=>i.x()}}},JG={kernelName:dn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Ei(e,Da(wu(n,s),"float32")),b:()=>Ei(e,Da(Ii(n,s),"float32"))}}},QG={kernelName:pn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>xl(e,a,s.shape)}}},eH={kernelName:fn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ha(n.shape,s.shape);return{a:()=>{const t=Ga(n.shape,r);return t.length>0?Uo(Ai(e,t),n.shape):e},b:()=>{const t=Ei(e,Ji(ki(fi(n,s)))),a=Ga(s.shape,r);return a.length>0?Uo(Ai(t,a),s.shape):t}}}},tH={kernelName:gn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ha(n.shape,s.shape);return{a:()=>{const t=Ei(e,Da(s,"float32")),a=Ga(n.shape,r);return a.length>0?Uo(Ai(t,a),n.shape):t},b:()=>{const t=Ei(e,Da(n,"float32")),a=Ga(s.shape,r);return a.length>0?Uo(Ai(t,a),s.shape):t}}}},nH={kernelName:xn,gradFunc:e=>({x:()=>Ji(e)})},sH={kernelName:In,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>tl(n.shape,"float32")}}},rH={kernelName:wn,gradFunc:e=>({x:()=>Fl(e)})},aH={kernelName:Nn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return Al(e,s).map((e=>()=>e))}},oH={kernelName:Sn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>xl(e,a,s.shape)}}},iH={kernelName:$n,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,o=s,i=Ha(a.shape,o.shape);return{a:()=>{const t=Da(o,"float32");let n=Ei(e,Ei(t,Cu(a,Ri(t,wo(1)))));const s=Ga(a.shape,i);return s.length>0&&(n=Ai(n,s)),Uo(n,a.shape)},b:()=>{const t=Ii(a,0),n=_l(t,$i(a),Fl(a));let s=Ei(e,Ei(r,n));const l=Ga(o.shape,i);return l.length>0&&(s=Ai(s,l)),Uo(s,o.shape)}}}},lH={kernelName:Cn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=Ii(n,0);return{x:()=>_l(r,e,Ei(e,s)),alpha:()=>{let t=_l(r,Fl(e),Ei(e,n));const a=Ga(s.shape,e.shape);return a.length>0&&(t=Ai(t,a)),Uo(t,s.shape)}}}},uH=Zr({cumprod_:function(e,t=0,n=!1,s=!1){const r={x:Xr(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:s};return Wr.runKernel(lt,r,a)}});const cH={kernelName:Tn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;let a=[];return a=null==r?s.shape.map(((e,t)=>t)):"number"==typeof r?[r]:r,{x:()=>function(e,t,n){const s=e.shape.length,r=s-n.length,a=Bi(n,s);let o=e;null!=a&&(o=Ml(e,a));const i=o.shape.slice(),l=i.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);i.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const r=Uo(t,s),a=uH(e,n,!0,!1),o=uH(e,n,!0,!0),i=Ei(a,o);return Ei(r,i)}(o.reshape(i),t,r);if(u=u.reshape(o.shape),null!=a){const e=Pi(a);u=Ml(u,e)}return u}(s,e,a)}}},hH={kernelName:vt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ha(n.shape,s.shape);return{a:()=>{const t=fi(e,Da(s,"float32")),a=Ga(n.shape,r);return a.length>0?Uo(Ai(t,a),n.shape):t},b:()=>{let t=Ei(e,Da(n,"float32"));const a=Ga(s.shape,r);a.length>0&&(t=Uo(Ai(t,a),s.shape));const o=Yi(s);return Ji(fi(t,Da(o,"float32")))}}}},dH={kernelName:Fn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fi(e,Ji(Yi(n)))}}},pH={kernelName:zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Ei(wu(n,6),Ul(n));return{x:()=>Ei(e,Da(s,"float32"))}}},fH={kernelName:Dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(e,Da(Ul(n),"float32"))}}},mH={kernelName:On,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Uo(e,n.shape)}}},gH={kernelName:Bn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Wr.runKernel(Pn,r,n)}}},xH={kernelName:Mn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Wr.runKernel(Ln,r,n)}}},bH={kernelName:Wn,gradFunc:(e,t,n)=>{const{dims:s}=n,r=Y(s,e.shape);return{x:()=>pl(e,r)}}},yH={kernelName:Vn,gradFunc:e=>({x:()=>Fl(e)})},vH={kernelName:Un,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ji(fi(e,Ei(Cu(n,1.5),2)))}}},kH=Zr({logicalNot_:function(e){const t={x:Xr(e,"x","logicalNot","bool")};return Wr.runKernel(Jt,t)}}),wH={kernelName:jn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Da(Fl(n),"float32"),t:()=>Ei(e,Da(n,e.dtype)),e:()=>Ei(e,Da(kH(n),e.dtype))}}},IH={kernelName:Kn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Ii(n,wo(0)),s=wo(fc),r=wo(mc),a=Ei(e,r),o=Ei(Ei(e,s),xi(Da(n,"float32")));return _l(t,a,o)}}}},NH={kernelName:Jn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(e,Ei(n,Ri(wo(1),n)))}}},SH={kernelName:Zn,gradFunc:e=>({x:()=>Fl(e)})},$H=Zr({cos_:function(e){const t={x:Xr(e,"x","cos","float32")};return Wr.runKernel(ot,t)}}),CH={kernelName:Xn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei($H(Da(n,"float32")),e)}}},TH=Zr({cosh_:function(e){const t={x:Xr(e,"x","cosh","float32")};return Wr.runKernel(it,t)}}),EH={kernelName:Yn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(TH(Da(n,"float32")),e)}}},RH={kernelName:qn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,o=s.shape,[i,l]=lo(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([i[t],o[t]-i[t]-l[t]]);return{x:()=>rl(e,u)}}},AH={kernelName:rs,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Ei(e,s);return{logits:()=>Ri(a,Ei(Ai(a,[r],!0),s))}}},_H={kernelName:Qn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(e,gl(n))}}},FH=Zr({batchToSpaceND_:function(e,t,n){const s=Xr(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));P(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),P(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),P(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},o={blockShape:t,crops:n};return Wr.runKernel(He,a,o)}}),DH={kernelName:ns,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>FH(e,s,r)}}},OH={kernelName:ss,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>Qo(e,s)}}},MH=[OU,MU,LU,BU,PU,zU,WU,VU,UU,GU,HU,jU,qU,YU,ZU,QU,eG,tG,nG,sG,rG,aG,iG,oG,uG,hG,pG,mG,gG,xG,hH,bG,yG,vG,kG,wG,NG,IG,$G,TG,AG,_G,FG,DG,OG,MG,LG,BG,PG,WG,UG,UG,HG,KG,XG,YG,ZG,JG,QG,eH,tH,nH,sH,rH,aH,oH,oH,iH,lH,cH,dH,pH,fH,mH,gH,xH,bH,yH,vH,wH,IH,NH,SH,CH,EH,RH,AH,_H,DH,DH,OH,OH,{kernelName:es,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fi(e,Ei(Sl(Da(n,"float32")),2))}}},{kernelName:cs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=wo(2);return{a:()=>Ei(e,Ei(r,Ri(n,s))),b:()=>Ei(e,Ei(r,Ri(s,n)))}}},{kernelName:hs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(e,Ei(Da(n,"float32"),2))}}},{kernelName:Cs,gradFunc:e=>({x:()=>Fl(e)})},{kernelName:gs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ha(n.shape,s.shape);return{a:()=>{let t=e;const s=Ga(n.shape,r);return s.length>0&&(t=Ai(t,s)),Uo(t,n.shape)},b:()=>{let t=e;const n=Ga(s.shape,r);return n.length>0&&(t=Ai(t,n)),Uo(Ji(t),s.shape)}}}},{kernelName:ts,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;Y(a,s.shape).forEach((e=>{r[e]=1}));const o=Uo(e,r),i=Ei(o,nl(s.shape,"float32"));return{x:()=>i}}},{kernelName:xs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fi(e,Yi($H(n)))}}},{kernelName:bs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Ei(Ri(wo(1),Yi(n)),e)}}},{kernelName:ys,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Fl(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=So(t,xl(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=So(t,xl(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let o=0;o<r[2];++o)t=So(t,xl(e,[n*s.shape[0],a*s.shape[1],o*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let o=0;o<r[2];++o)for(let i=0;i<r[3];++i)t=So(t,xl(e,[n*s.shape[0],a*s.shape[1],o*s.shape[2],i*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:ws,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Pi(r);return{x:()=>Ml(e,a)}}},{kernelName:Ns,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>Cl(e,r)}}},{kernelName:Ss,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=ji(t,Fl(t)),s=wi(e,n);let r=Ni(t,wo(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=bi(r,e+1);r=Vi(r,nl(s.shape,"bool"));const o=Fl(s);return _l(r,s,o)}(e,n)}}},{kernelName:$s,gradFunc:e=>({x:()=>Fl(e)})}];for(const e of MH)zs(e);function LH(e,t){return xo((()=>Sl(Ai(Ei(e,e),t,!0))))}class BH extends ho{getConfig(){return{}}}class PH extends BH{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return xo((()=>{const t=LH(e,this.axis),n=Jo(t,0,this.maxValue);return Ei(e,fi(n,So($V(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}PH.className="MaxNorm",fo(PH);class zH extends BH{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return xo((()=>fi(e,So($V(),LH(e,this.axis)))))}getConfig(){return{axis:this.axis}}}zH.className="UnitNorm",fo(zH);class WH extends BH{apply(e){return dl(e)}}WH.className="NonNeg",fo(WH);class VH extends BH{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return xo((()=>{const t=LH(e,this.axis),n=So(Ei(this.rate,Jo(t,this.minValue,this.maxValue)),Ei(1-this.rate,t));return Ei(e,fi(n,So($V(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}VH.className="MinMaxNorm",fo(VH);const UH={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function GH(e){return HW(e)}function HH(e,t={}){return KW(e,po.getMap().classNameMap,t,"constraint")}function jH(e){return null==e?null:"string"==typeof e?HH({className:e in UH?UH[e]:e,config:{}}):e instanceof BH?e:HH(e)}async function KH(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];bo(s)}}function qH(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var XH;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(XH||(XH={}));class YH{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class ZH{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class JH extends YH{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=xo((()=>So(this.totals[e],Ei(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:xo((()=>{const n=Ei(fi(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),yo(t[e])})))}}class QH extends YH{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const o=r[a];e.push(o.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class ej extends YH{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||qu,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");re(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():ar();return(...a)=>{const o=null!=n?n():ar();return o-r<t||(r=o,s=e(...a)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await KH(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await KH(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await KH(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await KH(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await KH(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):re(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await KH(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await KH(e),await this.trainEnd(e))}}function tj(e,t){return null==e&&(e={}),e instanceof YH?[e]:Array.isArray(e)&&e[0]instanceof YH?e:WW(e).map((e=>new ej(e,t)))}class nj{constructor(){}static registerCallbackConstructor(e,t){P(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),nj.checkForDuplicate(t),null==nj.constructors[e]&&(nj.constructors[e]=[]),nj.constructors[e].push(t)}static checkForDuplicate(e){for(const t in nj.constructors)nj.constructors[+t].forEach((t=>{if(t===e)throw new FW("Duplicate callback constructor.")}))}static clear(){nj.constructors={}}static createCallbacks(e){const t=[];for(const n in nj.constructors){const s=+n;e>=s&&t.push(...nj.constructors[s])}return t.map((e=>new e))}}function sj(e,t,n,s,r,a,o,i,l){const u=new QH,c=[new JH,...nj.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new ZH(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:o,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function rj(e,t={},n=!1){return KW(e,po.getMap().classNameMap,t,"layer",n)}function aj(e,t){return xo((()=>{"float32"!==e.dtype&&(e=Da(e,"float32"));const n=Ai(BV(e),t,!0),s=Zo(n.shape,$V()),r=Sl(ji(n,s));return fi(e,r)}))}function oj(e,t){return xo((()=>Ki(BV(Ri(t,e)),-1)))}function ij(e,t){return xo((()=>Ki(No(Ri(t,e)),-1)))}function lj(e,t){return xo((()=>{const n=Ri(e,t),s=Jo(No(e),$V(),Number.MAX_VALUE),r=No(fi(n,s));return Ei(100,Ki(r,-1))}))}function uj(e,t,n=!1){return xo((()=>{if(n)t=wl(t);else{const e=Ai(t,t.shape.length-1,!0);t=fi(t,e)}return t=Jo(t,$V(),1-$V()),Ji(Ai(Ei(Da(e,"float32"),$i(t)),t.shape.length-1))}))}function cj(e,t,n=!1){return xo((()=>{const s=Da(ki(function(e){const t=[kV(e.shape)];return Uo(e,t)}(e)),"int32"),r=(t=Jo(t,$V(),1-$V())).shape;return uj(Uo(el(s,r[r.length-1]),r),t,n)}))}function hj(e,t){return xo((()=>{let n;return n=Jo(t,$V(),1-$V()),n=$i(fi(n,Ri(1,n))),Ki(function(e,t){if(!G(e.shape,t.shape))throw new FW(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return xo((()=>{const n=dl(t),s=Ji(No(t));return So(Ri(n,Ei(t,e)),Ci(xi(s)))}))}(e,n),-1)}))}function dj(e,t){return xo((()=>{const n=aj(e,-1),s=aj(t,-1),r=Ei(n,s);return Ji(Ai(r,-1))}))}nj.constructors={};const pj={meanSquaredError:oj,meanAbsoluteError:ij,meanAbsolutePercentageError:lj,meanSquaredLogarithmicError:function(e,t){return xo((()=>{const n=Jo(t,$V(),Number.MAX_VALUE),s=$i(So(1,n)),r=Jo(e,$V(),Number.MAX_VALUE),a=$i(So(1,r));return Ki(BV(Ri(s,a)),-1)}))},squaredHinge:function(e,t){return xo((()=>{const n=ji(0,Ri(1,Ei(e,t)));return Ki(BV(n),-1)}))},hinge:function(e,t){return xo((()=>{const n=ji(0,Ri(1,Ei(e,t)));return Ki(n,-1)}))},categoricalHinge:function(e,t){return xo((()=>{const n=Ai(Ei(e,t),-1),s=Ti(Ei(Ri(1,e),t),-1);return ji(0,So(1,Ri(s,n)))}))},logcosh:function(e,t){return xo((()=>{const n=Math.log(2),s=Ri(t,e),r=Ri(So(s,Il(Ei(-2,s))),n);return Ki(r,-1)}))},categoricalCrossentropy:uj,sparseCategoricalCrossentropy:cj,binaryCrossentropy:hj,kullbackLeiblerDivergence:function(e,t){return xo((()=>{const n=Jo(e,$V(),1),s=Jo(t,$V(),1);return Ai(Ei(e,$i(fi(n,s))),-1)}))},poisson:function(e,t){return xo((()=>{const n=$i(So($V(),t));return Ki(Ri(t,Ei(e,n)),-1)}))},cosineProximity:dj};function fj(e){if("string"==typeof e){if(e in pj)return pj[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new FW(t)}return e}function mj(e,t){return xo((()=>{const n=Ei(.5,sl(t)),s=CV(Ii(t,n),e.dtype);return Ki(gi(e,s),-1)}))}function gj(e,t){return xo((()=>CV(gi(To(e,-1),To(t,-1)),"float32")))}function xj(e,t){return hj(e,t)}function bj(e,t){return e.rank===t.rank&&(e=$l(e,[e.rank-1])),(t=To(t,-1)).dtype!==e.dtype&&(t=Da(t,e.dtype)),Da(gi(e,t),"float32")}const yj=uj,vj=cj,kj={binaryAccuracy:mj,categoricalAccuracy:gj,precision:function(e,t){return xo((()=>{const n=function(e,t){return xo((()=>Da(Ai(Vi(gi(e,1),gi(t,1))),"float32")))}(e,t),s=function(e,t){return xo((()=>Da(Ai(Vi(gi(e,0),gi(t,1))),"float32")))}(e,t),r=So(n,s);return Da(_l(Ii(r,0),fi(n,r),0),"float32")}))},categoricalCrossentropy:yj,sparseCategoricalCrossentropy:vj,mse:oj,MSE:oj,mae:ij,MAE:ij,mape:lj,MAPE:lj,cosine:dj};function wj(e){if("string"==typeof e&&e in kj)return kj[e];if("string"!=typeof e&&null!=e)return e;throw new FW(`Unknown metric ${e}`)}function Ij(e){if(BW(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(pj))if(pj[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(kj))if(kj[n]===e){t=n;break}return void 0!==t?t:e.name}}function Nj(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Sj(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Sj(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Sj(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Sj(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function $j(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function Cj(e,t,n){let s,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){r="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}$j([`${e.name} (${e.getClassName()})`,r,s,e.countParams().toString()],t,n)}function Tj(e,t,n,s){let r,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const o=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];o.push(`${n}[${s}][${r}]`)}const i=e.name,l=e.getClassName(),u=0===o.length?"":o[0];$j([`${i} (${l})`,a,r,e.countParams().toString(),u],t,s);for(let e=1;e<o.length;++e)$j(["","","","",o[e]],t,s)}function Ej(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Rj(e,t){if(null===e)return null;if("string"==typeof e)return UW(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Ej(t,r,s)?n.push(s):n.push(Rj(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=UW(n);t[e]=Rj(s,e)}}return t}}function Aj(e,t){if(null==e)return null;if("string"==typeof e)return VW(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Ej(t,r,s)?n.push(s):n.push(Aj(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[VW(n)]="name"!==n&&"className"!==n||"string"!=typeof s?Aj(s,n):s}return t}}const _j="4.12.0";class Fj extends SU{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=aV(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],XW(this.inputs).length!==this.inputs.length)throw new FW(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);XW(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;BW(0===n,"input layer has >1 nodes"),BW(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof CU))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},o=[],i=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new _W(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Fj.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],o=u.tensorIndices[e];i(s,t,n,r,a,o)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);o.push(u)},l=[],u=[];for(const e of this.outputs)i(e,l,u);const c=o.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const o=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,o),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],o=e.nodeIndices[s],i=r.inboundNodes[o],l=null==t[i.id]?0:t[i.id];t[i.id]=Math.max(a+1,l),n[i.id]=i}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const d={};for(const e in s){const t=s[e];t in d||(d[t]=[]),d[t].push(r[e])}let p=Object.keys(d).map((e=>parseInt(e,10))).sort(qW);this.layers=[];for(const e of p){const t=d[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof Fj&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=d,p=Object.keys(h).map((e=>parseInt(e,10))).sort(qW);const f=this.inputs.slice(),m=[];for(const e of p)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new _W(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new _W(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new IU({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new FW("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;const r=(e=>{const t=Object.keys(e);if(0===t.length)return!1;const n=t[0].split("/");return!isNaN(parseInt(n[n.length-1],10))})(e);r&&this.parseWeights(e);for(const e of this.layers)for(const[t,a]of e.weights.entries()){const e=r?`${a.name.split("/").slice(0,-1).join("/")+"/"}${t}`:a.originalName;if(null!=n[e])throw new FW(`Duplicate weight name: ${e}`);n[e]=a,s++}const a=[];for(const s in e){let r=s;if(null==n[s]){const e=s.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])a.push([n[r],e[s]]);else if(t)throw new FW(`Provided weight data has no target variable: ${s}`);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new FW(`${e.length} of ${s} weights are not set: ${e}`)}yU(a)}parseWeights(e){for(const t in Object.keys(e)){const n=t.split("/"),s=["vars","layer_checkpoint_dependencies"],r=n.map((e=>e.startsWith("_")?e.slice(1):e)).filter((e=>!s.includes(e))).join("/");r!==t&&(e[r]=e[t],delete e[t])}}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${_j}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Aj(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return xo((()=>{e=WW(e);const n=new TU;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return AU(this.outputs,n,t)}))}computeMask(e,t){return xo((()=>{let n;return e=WW(e),n=null==t?LW(null,e.length):WW(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=dU(e);if(t.length!==this.inputLayers.length)throw new FW(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(qW);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],o=e.tensorIndices[t],i=n[`${r.name}_${a}_${o}`];s.push(i)}const r=dU(t.computeOutputShape(zW(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${a}_${e}`]=r[e]}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];BW(t in n),r.push(n[t])}return zW(r)}runInternalGraph(e,t){null==t&&(t=LW(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],o=t[s];n[r.id]=[a,o]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(qW);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,o,i,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),i=WW(t.call(e,u)),l=WW(t.computeMask(e,n)),s=[e],o=[n]}else s=a.map((e=>e[0])),o=a.map((e=>e[1])),null==u.mask&&(u.mask=o),i=WW(t.call(s,u)),l=WW(t.computeMask(s,o));if(t.activityRegularizer)throw new DW("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=i[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],o=[];for(const e of this.outputs){BW(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];o.push(t.shape),r.push(t),a.push(s)}return[r,a,o]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Fj?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=Fj.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t)return this.findLayer(t);if(null==e)throw new FW("Provide either a layer name or layer index");if("number"==typeof e)return this.findLayer(e);for(const t of this.layers)if(t.name===e)return t;throw new FW(`No such layer: ${e}`)}findLayer(e){if(this.layers.length<=e)throw new FW(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}calculateLosses(){return xo((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Fj.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=Fj.nodeKey(e,n);let o={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),o=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),o={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],i=s.tensorIndices[n];let l=t[Fj.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,i,o])}a.push(e)}}}const o={};o.name=e.name,o.className=s,o.config=r,o.inboundNodes=a,n.push(o)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=Fj.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.inputLayersTensorIndices[e];s.push([n.name,o,i])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=Fj.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let o=t[a];null==o&&(o=0);const i=this.outputLayersTensorIndices[e];r.push([n.name,o,i])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function o(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function i(e,t){const n=[];let s;for(const a of t){const i=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(i in r))return void o(e,t);const c=r[i];if(c.inboundNodes.length<=l)return void o(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(zW(n),s)}function l(e){const n=e.name,a=rj(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new FW(`Corrupted configuration, expected array for nodeData: ${e}`);o(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!YW(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)i(t,n)}}const h=[],d=[],p=t.inputLayers;for(const e of p){const t=e[0],n=e[1],s=e[2];BW(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];BW(t in r);const a=r[t].inboundNodes[n].outputTensors;d.push(a[s])}return new e({inputs:h,outputs:d,name:u})}get stateful(){if(this._stateful)throw new FW("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){xo((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function Dj(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Oj(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=xo((()=>{if(1===e.shape.length)return Oa(e);if(2===e.shape.length){if(e.shape[1]>1)return To(e,1);if(1===e.shape[1])return Uo(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());bo(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),El(r,"float32")}return null}function Mj(e,t){return Ei(e,t)}function Lj(e,t){let n,s;const r=t;n=r.xs,s=r.ys,P(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=Bj("input",e.inputNames,n),o=Bj("output",e.outputNames,s),i=a[0].shape[0];P(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),P(o.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${o.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)P(a[t].shape[0]===i,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));for(let t=0;t<o.length;t++)P(o[t].shape[0]===i,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${o[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`));return{xs:a,ys:o}}function Bj(e,t,n){if(n instanceof Ir)return[n];if(Array.isArray(n))return P(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new FW(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function Pj(e){return"function"==typeof e.iterator}function zj(e){P(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Wj(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>EV(e,t,n-t))):EV(e,t,n-t)}function Vj(e,t){return xo((()=>null==e?null:Array.isArray(e)?e.map((e=>Vj(e,t))):LV(e,"int32"===t.dtype?t:Da(t,"int32"))))}function Uj(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function Gj(e){const t=[];e instanceof Ir&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(TV(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Hj(e,t){if(null==e)return;const n=[];if(t instanceof Ir)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof Ir)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function jj(e){return Array.isArray(e)}function Kj(e){return!function(e){return e instanceof Ir}(e)&&!jj(e)}function qj(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(jj(e)&&e.length>0)t=!0;else if(Kj(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new FW(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(Kj(e)){a=[];for(const n of t){if(null==e[n])throw new FW(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(jj(e)){if(e.length!==t.length)throw new FW(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new FW(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=Gj(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new FW(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${o.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const a=o.shape[t],i=n[e][t];if(null!=i&&i>=0&&a!==i)throw new FW(`${r} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${r} received an input with ${o.shape[0]} examples, each with shape [${o.shape.slice(1,o.shape.length)}] (tensor shape [${o.shape}])`)}}return a}function Xj(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new FW(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new FW(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const o=a[e];if(o.shape.length!==n[e].length)throw new FW(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(o.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const i=o.shape[a],l=n[e][a];if(null!=l&&l!==i)throw new FW(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(o.shape)}.`)}}}class Yj extends Fj{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new FW("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let o;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),o=[];for(const t in e.nodesByDepth)o.push(...e.nodesByDepth[t])}s("_".repeat(t)),$j(a,n,s),s("=".repeat(t));const i=e.layers;for(let e=0;e<i.length;++e)r?Cj(i[e],n,s):Tj(i[e],n,o,s),s((e===i.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?mU(e.collectedTrainableWeights):mU(e.trainableWeights),t}(e),u=mU(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>ju.adagrad(.01),Adadelta:()=>ju.adadelta(1,.95,$V()),Adam:()=>ju.adam(.001,.9,.999,$V()),Adamax:()=>ju.adamax(.002,.9,.999,$V(),0),RMSProp:()=>ju.rmsprop(.001,.9,0,$V()),SGD:()=>ju.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new FW(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Io))throw new FW("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new FW(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>fj(e)))}else{const n=fj(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new FW(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(fj(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],gV("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};gV("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const o of t){if("string"==typeof o&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(o)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===hj?-1!==["accuracy","acc"].indexOf(o)?s=mj:-1!==["crossentropy","ce"].indexOf(o)&&(s=xj):this.lossFunctions[e]===cj?-1!==["accuracy","acc"].indexOf(o)?s=bj:-1!==["crossentropy","ce"].indexOf(o)&&(s=vj):-1!==["accuracy","acc"].indexOf(o)?s=gj:-1!==["crossentropy","ce"].indexOf(o)&&(s=yj),-1!==["accuracy","acc"].indexOf(o)?r="acc":-1!==["crossentropy","ce"].indexOf(o)&&(r="ce"),a=s,n=""+r}else{const e=wj(o);a=e,n=""+Ij(o)}let t;gV(n,(()=>{t=a})),r(e,n,t)}})(s[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;zj(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const e=r[0].concat(r[1]);this.makeTestFunction();const t=this.testFunction;return zW(this.testLoop(t,e,s,n.verbose,n.steps))}finally{Hj(r[0],e),Hj(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new DW("Verbose mode is not implemented yet.");P(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const o="function"==typeof t.next?t:await t.iterator();let i=0,l=0;for(;!s||l<n.batches;){const t=await o.next();if(a=xo((()=>{if(t.value){const{xs:n,ys:s}=Lj(e,t.value),o=n.concat(s),u=xo((()=>r(o)));if(bo(o),0===l)for(let e=0;e<u.length;++e)a.push(wo(0));const c=o[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=xo((()=>So(a[e],Ei(c,t)))),l>0&&bo(n)}bo(u),i+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=fi(a[e],i),bo(t)}return zW(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new FW(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new FW(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new FW("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new TU;if(e instanceof Ir&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new FW(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new FW(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const o=AU(r,a);return n?o:o[0]}retrieveSymbolicTensors(e){const t=LW(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const o=a.indexOf(e[s]);if(-1!==o&&(t[s]=r[o],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new FW(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return xo((()=>{const s=this.checkNumSamples(e);if(n)throw new DW("Verbose predictLoop() is not implemented yet.");const r=Uj(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t)xo((()=>{const n=r[t][0],s=r[t][1],a=Wj(e,n,s),o=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)o.push({key:this.inputs[e],value:a[e]});else o.push({key:this.inputs[0],value:a});const i=new TU(o);return AU(this.outputs,i)})).forEach(((e,t)=>a[t].push(e)));return zW(a.map((e=>Qo(e,0))))}))}predict(e,t={}){const n=Gj(e);Xj(n,this.inputNames,this.feedInputShapes,!1);try{const e=null==t.batchSize?32:t.batchSize;return zj(e),this.predictLoop(n,e)}finally{Hj(n,e)}}predictOnBatch(e){Xj(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new _W("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===cj?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=XW(e.map((e=>e.shape[0])));s.sort();const r=XW(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new FW(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new FW(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!G(s,r))throw new FW(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=qj(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=qj(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[oj,hj,uj];for(let r=0;r<e.length;++r){const a=e[r],o=t[r],i=n[r];if(null!=o){if(o===uj&&1===a.shape[a.shape.length-1])throw new FW(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(o)){const e=a.shape.slice(1),t=i.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new FW(`A target Tensor with shape ${a.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new FW(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[o,i]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=Dj(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Oj(i[t],null,e[t]))}return[o,i,l]}testLoop(e,t,n,s=0,r){return xo((()=>{const a=this.checkNumSamples(t,n,r,"steps"),o=[];if(s>0)throw new DW("Verbose mode is not implemented yet.");if(null!=r)throw new DW("steps mode in testLoop() is not implemented yet");{const s=Uj(a,n),r=El(NV(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],i=s[n][1],l=EV(r,a,i-a),u=Vj(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)o.push(wo(0));for(let e=0;e<c.length;++e){const t=c[e];o[e]=So(o[e],Ei(i-a,t))}}for(let e=0;e<o.length;++e)o[e]=fi(o[e],a)}return o}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;PW(e,s)>1&&(r+=`_${PW(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],o=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const o=new TU(e),i=AU(this.outputs,o,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],i[e]);null!=r[e]&&(n=Mj(n,r[e]));const a=Ki(n);t.push(a),l=0===e?n:So(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Ki(t(s[r],i[r]))}yo(n),a.push(n)}return l=Ki(l),this.calculateLosses().forEach((e=>{l=So(l,e)})),l}),!0,o)].concat(a)}}makeTestFunction(){this.testFunction=e=>xo((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const o=new TU(a),i=AU(this.outputs,o);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Ki(s(r[e],i[e]));n=0===e?a:So(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Ki(n(r[s],i[s]));t.push(a)}return t}))}async fit(e,t,n={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,r,a,o,i,l,u,c,h;this.isTraining=!0;try{const d=null==n.batchSize?32:n.batchSize;zj(d);const p=!1,f=await this.standardizeUserData(e,t,n.sampleWeight,n.classWeight,p,d);s=f[0],r=f[1],h=f[2];let m,g=!1;if(null!=n.validationData&&n.validationData.length>0){if(g=!0,2!==n.validationData.length)throw 3===n.validationData.length?new DW("validationData including sample weights is not supported yet."):new FW(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);i=n.validationData[0],l=n.validationData[1];const e=!0,t=await this.standardizeUserData(i,l,null,null,e,d);u=t[0],c=t[1],m=u.concat(c)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){g=!0;const e=Math.floor(s[0].shape[0]*(1-n.validationSplit)),t=s[0].shape[0];u=Wj(s,e,t),a=s,s=Wj(s,0,e),c=Wj(r,e,t),o=r,r=Wj(r,0,e),m=u.concat(c)}else null!=n.validationSteps&&(g=!0);const x=s.concat(r).concat(h);this.checkTrainableWeightsConsistency();const b=this.makeTrainFunction(),y=this.getDedupedMetricsNames();let v,k;g?(this.makeTestFunction(),v=this.testFunction,k=y.slice().concat(y.map((e=>"val_"+e)))):(v=null,m=[],k=y.slice());const w=tj(n.callbacks,n.yieldEvery);return await this.fitLoop(b,x,y,d,n.epochs,n.verbose,w,v,m,n.shuffle,k,n.initialEpoch,null,null)}finally{this.isTraining=!1,Hj(s,e),Hj(r,t),Hj(a,e),Hj(o,t),Hj(u,i),Hj(c,l),null!=h&&bo(h)}}async fitLoop(e,t,n,s,r,a,o,i,l,u,c,h,d,p){null==s&&(s=32),null==r&&(r=1),null==u&&(u=!0),null==h&&(h=0);let f=!1;if(null!=i&&null!=l&&(f=!0),null!=p&&(f=!0,null==d))throw new FW("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(t,s,d,"steps_per_epoch");let g;null!=m&&(g=NV(0,m)),null==a&&(a=1);const{callbackList:x,history:b}=sj(o,a,r,h,m,d,s,f,c);x.setModel(this),this.history=b,await x.onTrainBegin(),this.stopTraining_=!1;for(let a=h;a<r;++a){await x.onEpochBegin(a);const r={};if(null!=d)throw new DW("stepsPerEpoch mode is not implemented yet.");{if("batch"===u)throw new DW("batch shuffling is not implemneted yet");u&&O(g);const a=El(g),o=Uj(m,s);for(let u=0;u<o.length;++u){const c={};if(await x.onBatchBegin(u,c),xo((()=>{const h=o[u][0],d=o[u][1],p=EV(a,h,d-h);c.batch=u,c.size=d-h;const m=Vj(t,p),g=e(m);for(let e=0;e<n.length;++e){const t=n[e],s=g[e];c[t]=s,yo(s)}if(u===o.length-1&&f){const e=this.testLoop(i,l,s);for(let t=0;t<n.length;++t){const s=n[t],a=e[t];yo(a),r["val_"+s]=a}}})),await x.onBatchEnd(u,c),qH(c),this.stopTraining_)break}a.dispose()}if(await x.onEpochEnd(a,r),this.stopTraining_)break}return await x.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(P(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),P(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),P(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),P(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),P(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,o;if(r)if(Pj(n.validationData))P(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new DW("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,o=e.ys}const i=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=tj(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=sj(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,u);d.setModel(e),e.history=p,await d.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await d.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=Lj(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await d.onBatchBegin(h,a);const o=[];if(null!=n.classWeight){const t=Dj(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)o.push(await Oj(r[e],null,t[e]))}const u=s.concat(r).concat(o),p=i(u);bo(u);for(let e=0;e<l.length;++e){const t=l[e],n=p[e];a[t]=n,yo(n)}await d.onBatchEnd(h,a),qH(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=Pj(n.validationData)?WW(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):WW(e.evaluate(a,o,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await d.onEpochEnd(f,u),f++,e.stopTraining_)break}return await d.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),o=[];for(const e of a){const t=await e.data();o.push(t[0])}return bo(a),Hj(n[0],e),Hj(n[1],t),zW(o)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=go().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-go().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=VW(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>VW(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=VW(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[VW(Ij(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>VW(Ij(e))));{const e={};for(const t in this.metrics)e[t]=VW(Ij(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=rj(Rj(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=UW(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>UW(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=UW(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>UW(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=UW(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=(n=e,la.getSaveHandlers(n));if(0===t.length)throw new FW(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new FW(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}var n;if(null==e.save)throw new FW("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const s=await ta(this.getNamedWeights(t)),r={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${_j}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:n}=await ta(await this.optimizer.getWeights(),e);s.specs.push(...n),s.data=aa([s.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Nj(this.userDefinedMetadata,this.name,e),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=s.data,r.weightSpecs=s.specs,e.save(r)}setUserDefinedMetadata(e){Nj(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Yj.className="Model",fo(Yj);class Zj extends Yj{}Zj.className="Functional",fo(Zj);class Jj extends Yj{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:aV("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new FW(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Jj||e instanceof Yj;let n;if(t){if(n=e,1!==n.outputs.length)throw new FW("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new FW("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new FW("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new FW("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new CU({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new FW(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new FW("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=$U(this.outputs[0])}this.inboundNodes=[],new IU({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:LW(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(fU(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Yj({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new _W("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new _W("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new _W("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new _W("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new FW("Legacy serialization format not supported yet.");r=t}else P(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const o=new e(a);if(!(o instanceof Jj))throw new DW(`Sequential.fromConfig called on non-Sequential input: ${o}`);for(const e of r){const t=rj(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),o.add(t)}return o}set stopTraining(e){if(null==this.model)throw new FW("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new FW("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Jj.className="Sequential",fo(Jj);class Qj extends ho{getConfig(){return{}}}class eK extends Qj{apply(e,t=1){return function(e,t=1){if(1!==t)throw new DW(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return mi(e)}(e,t)}}eK.className="elu",fo(eK);class tK extends Qj{apply(e){return fl(e)}}tK.className="selu",fo(tK);class nK extends Qj{apply(e){return dl(e)}}nK.className="relu",fo(nK);class sK extends Qj{apply(e){return xo((()=>Xi(6,dl(e))))}}sK.className="relu6",fo(sK);class rK extends Qj{apply(e){return e}}rK.className="linear",fo(rK);class aK extends Qj{apply(e){return gl(e)}}aK.className="sigmoid",fo(aK);class oK extends Qj{apply(e){return function(e){return xo((()=>{const t=So(.5,Ei(.2,e));return Jo(t,0,1)}))}(e)}}oK.className="hardSigmoid",fo(oK);class iK extends Qj{apply(e){return Il(e)}}iK.className="softplus",fo(iK);class lK extends Qj{apply(e){return function(e){return xo((()=>fi(e,So(No(e),1))))}(e)}}lK.className="softsign",fo(lK);class uK extends Qj{apply(e){return Tl(e)}}uK.className="tanh",fo(uK);class cK extends Qj{apply(e,t=-1){return wl(e,t)}}cK.className="softmax",fo(cK);class hK extends Qj{apply(e,t=-1){return _i(e,t)}}hK.className="logSoftmax",fo(hK);class dK extends Qj{apply(e,t=1){return xo((()=>Ei(gl(Ei(e,t)),e)))}}dK.className="swish",fo(dK);class pK extends Qj{apply(e){return xo((()=>Ei(e,Tl(Il(e)))))}}function fK(e){return e.getClassName()}function mK(e,t={}){return KW(e,po.getMap().classNameMap,t,"activation")}function gK(e){if(null==e){return mK({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},mK(t)}return e instanceof Qj?e:mK(e)}pK.className="mish",fo(pK);class xK extends ho{}class bK extends xK{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return xo((()=>{let t=tl([1]);return this.hasL1&&(t=So(t,Ai(Ei(this.l1,No(e))))),this.hasL2&&(t=So(t,Ai(Ei(this.l2,BV(e))))),Uo(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}bK.className="L1L2",fo(bK);const yK={l1l2:"L1L2"};function vK(e){return HW(e)}function kK(e,t={}){return KW(e,po.getMap().classNameMap,t,"regularizer")}function wK(e){return null==e?null:"string"==typeof e?kK({className:e in yK?yK[e]:e,config:{}}):e instanceof xK?e:kK(e)}class IK extends SU{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=pU(e);let n=dl(e);return null!=this.maxValue&&(n=Jo(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}IK.className="ReLU",fo(IK);class NK extends SU{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=pU(e);return Si(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}NK.className="LeakyReLU",fo(NK);class SK extends SU{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=cU(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=wK(e.alphaRegularizer),this.alphaConstraint=jH(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new FW(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=fU(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new vU({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=pU(e),al(e,this.alpha.read())}getConfig(){const e={alphaInitializer:uU(this.alphaInitializer),alphaRegularizer:vK(this.alphaRegularizer),alphaConstraint:GH(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}SK.className="PReLU",fo(SK);class $K extends SU{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new DW(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=pU(e);return mi(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}$K.className="ELU",fo($K);class CK extends SU{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=pU(e);return Ei(n,Da(Ii(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}CK.className="ThresholdedReLU",fo(CK);class TK extends SU{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new cK).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){return xo((()=>{let n=pU(e);const s=t.mask;if(null!=s){const e=Ei(Ri(nl(n.shape),Da(s,n.dtype)),wo(-1e9));n=So(n,e)}return this.axis instanceof Array?this.axis.length>1?xi(Ri(n,Wi(n,this.axis,!0))):this.softmax(n,this.axis[0]):this.softmax(n,this.axis)}))}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function EK(e,t,n){if("number"==typeof e)return LW(e,t);if(e.length!==t)throw new FW(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new FW(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function RK(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function AK(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+IV([n-t,0]);else{if("same"!==s)throw new FW(`Unsupport padding mode: ${s}.`);e*=t}return e}function _K(e,t){return xo((()=>(dV(t),"channelsFirst"===t?Ml(e,[0,2,3,1]):e)))}function FK(e,t){return xo((()=>(dV(t),"channelsFirst"===t?Ml(e,[0,2,3,4,1]):e)))}function DK(e,t,n,s=[1,1],r="valid",a,o,i=null){return xo((()=>{if(null==a&&(a="channelsLast"),dV(a),3!==e.rank&&4!==e.rank)throw new FW(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new FW(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=_K(e,a);if("causal"===r)throw new DW("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=ql({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:o,dataFormat:"NHWC",bias:n,activation:i}),"channelsFirst"===a&&(l=Ml(l,[0,3,1,2])),l}))}TK.className="Softmax",fo(TK);class OK extends SU{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",OK.verifyArgs(t),this.rank=e,QW(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new DW(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=EK(t.kernelSize,e,"kernelSize"),this.strides=EK(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,pV(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,dV(this.dataFormat),this.activation=gK(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=cU(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=jH(t.biasConstraint),this.biasRegularizer=wK(t.biasRegularizer),this.activityRegularizer=wK(t.activityRegularizer),this.dilationRate=EK(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new FW(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new FW(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new FW(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(BW("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!JW(e.kernelSize,"number",1,3))throw new FW(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:fK(this.activation),useBias:this.useBias,biasInitializer:uU(this.biasInitializer),biasRegularizer:vK(this.biasRegularizer),activityRegularizer:vK(this.activityRegularizer),biasConstraint:GH(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class MK extends OK{constructor(e,t){super(e,t),this.kernel=null,MK.verifyArgs(t),this.filters=t.filters,QW(this.filters,"filters"),this.kernelInitializer=cU(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=jH(t.kernelConstraint),this.kernelRegularizer=wK(t.kernelRegularizer)}build(e){e=fU(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new FW(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return xo((()=>{let t;e=pU(e);const n=null==this.bias?null:this.bias.read(),s=tV(this.activation.getClassName());if(null!=s&&2===this.rank)t=DK(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,o=1){return xo((()=>{if(null==a&&(a="channelsLast"),dV(a),3!==e.shape.length)throw new FW(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new FW(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new FW(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=Ml(e,[0,2,1])),"causal"===r)throw new DW("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=ai(e,t,s,"same"===r?"same":"valid","NWC",o);return null!=n&&(i=zV(i,n)),i}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=DK(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new DW("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,o){return xo((()=>{if(null==a&&(a="channelsLast"),dV(a),4!==e.rank&&5!==e.rank)throw new FW(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new FW(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let i=FK(e,a);if("causal"===r)throw new DW("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=li(i,t,s,"same"===r?"same":"valid","NDHWC",o),null!=n&&(i=zV(i,n)),"channelsFirst"===a&&(i=Ml(i,[0,4,1,2,3])),i}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=fU(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=RK(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:uU(this.kernelInitializer),kernelRegularizer:vK(this.kernelRegularizer),kernelConstraint:GH(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new FW(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class LK extends MK{constructor(e){super(2,e),LK.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!JW(e.kernelSize,"number",1,2))throw new FW(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}LK.className="Conv2D",fo(LK);class BK extends MK{constructor(e){super(3,e),BK.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new FW(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}BK.className="Conv3D",fo(BK);class PK extends LK{constructor(e){if(super(e),this.inputSpec=[new vU({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new FW(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=fU(e)).length)throw new FW("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new FW("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new vU({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return xo((()=>{let t=pU(e);if(4!==t.shape.length)throw new FW(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const o=n[r],i=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[s,AK(o,c,l,this.padding),AK(i,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Ml(t,[0,2,3,1]));let p=ii(t,this.kernel.read(),d,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(p=Ml(p,[0,3,1,2])),null!=this.bias&&(p=zV(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p}))}computeOutputShape(e){const t=(e=fU(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],o=this.kernelSize[1],i=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=AK(t[s],i,a,this.padding),t[r]=AK(t[r],l,o,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}PK.className="Conv2DTranspose",fo(PK);class zK extends BK{constructor(e){if(super(e),this.inputSpec=[new vU({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new FW(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=fU(e)).length)throw new FW("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new FW("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new vU({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return xo((()=>{let t=pU(e);if(5!==t.shape.length)throw new FW(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,o;"channelsFirst"===this.dataFormat?(o=2,r=3,a=4):(o=1,r=2,a=3);const i=n[o],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],d=this.kernelSize[2],p=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,AK(i,p,c,this.padding),AK(l,f,h,this.padding),AK(u,m,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Ml(t,[0,2,3,4,1]));let x=ci(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=Ml(x,[0,4,1,2,3])),null!==this.bias&&(x=zV(x,this.bias.read(),this.dataFormat)),null!==this.activation&&(x=this.activation.apply(x)),x}))}computeOutputShape(e){const t=(e=fU(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const o=this.kernelSize[0],i=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=AK(t[s],u,o,this.padding),t[r]=AK(t[r],c,i,this.padding),t[a]=AK(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}zK.className="Conv3DTranspose",fo(zK);class WK extends MK{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new FW("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new FW("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new FW(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=cU(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=wK(t.depthwiseRegularizer),this.depthwiseConstraint=jH(t.depthwiseConstraint),this.pointwiseInitializer=cU(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=wK(t.pointwiseRegularizer),this.pointwiseConstraint=jH(t.pointwiseConstraint)}build(e){if((e=fU(e)).length<this.rank+2)throw new FW(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new FW(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new vU({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return xo((()=>{let t;if(e=pU(e),1===this.rank)throw new DW("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Ml(e,[0,2,3,1])),t=ml(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=zV(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Ml(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=uU(this.depthwiseInitializer),e.pointwiseInitializer=uU(this.pointwiseInitializer),e.depthwiseRegularizer=vK(this.depthwiseRegularizer),e.pointwiseRegularizer=vK(this.pointwiseRegularizer),e.depthwiseConstraint=GH(this.depthwiseConstraint),e.pointwiseConstraint=GH(this.pointwiseConstraint),e}}WK.className="SeparableConv";class VK extends WK{constructor(e){super(2,e)}}VK.className="SeparableConv2D",fo(VK);class UK extends MK{constructor(e){super(1,e),UK.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!JW(e.kernelSize,"number",1,1))throw new FW(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}UK.className="Conv1D",fo(UK);class GK extends SU{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return xo((()=>{if(e=pU(e),"channelsLast"===this.dataFormat){const t=AV(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return AV(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=AV(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return AV(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}GK.className="Cropping2D",fo(GK);class HK extends SU{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dV(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,ZW(iV,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return xo((()=>{let t=pU(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Ml(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?Mu.resizeNearestNeighbor(t,[e,s]):Mu.resizeBilinear(t,[e,s]);return Ml(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?Mu.resizeNearestNeighbor(t,[e,s]):Mu.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}HK.className="UpSampling2D",fo(HK);class jK extends OK{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=cU(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=jH(e.depthwiseConstraint),this.depthwiseRegularizer=wK(e.depthwiseRegularizer)}build(e){if((e=fU(e)).length<4)throw new FW(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new FW(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return xo((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return xo((()=>{null==r&&(r="channelsLast"),dV(r);let o=_K(e,r);if(4!==e.rank)throw new FW(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new FW(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return o=di(o,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(o=Ml(o,[0,3,1,2])),o}))}(e=pU(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=zV(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=fU(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=RK(t,this.kernelSize[0],this.padding,this.strides[0]),a=RK(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=uU(this.depthwiseInitializer),e.depthwiseRegularizer=vK(this.depthwiseRegularizer),e.depthwiseConstraint=GH(this.depthwiseRegularizer),e}}function KK(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new FW("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function qK(e,t,n,s=!1,r,a,o=!1,i=!1){return xo((()=>{const l=t.shape.length;if(l<3)throw new FW(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(NV(2,l));if(t=Ml(t,u),null!=a)throw new DW("The rnn() functoin of the deeplearn.js backend does not support constants yet.");o&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=Da(Da(r,"bool"),"float32")).rank===l-1&&(r=bi(r,-1)),r=Ml(r,u)),s&&(t=pl(t,0),null!=r&&(r=pl(r,0)));const c=[];let h,d=n;const p=t.shape[0],f=Al(t);let m,g;null!=r&&(m=Al(r));for(let t=0;t<p;++t){const n=f[t],s=xo((()=>e(n,d)));if(null==r)h=s[0],d=s[1];else{const e=xo((()=>{const e=m[t],n=Ri(sl(e),e);return{output:So(Ei(s[0],e),Ei(d[0],n)),newStates:d.map(((t,r)=>So(Ei(s[1][r],e),Ei(t,n))))}}));h=e.output,d=e.newStates}i&&c.push(h)}return i&&(g=Cl(c,1)),[h,g,d]}))}jK.className="DepthwiseConv2D",fo(jK);class XK extends SU{constructor(e){let t;if(super(e),null==e.cell)throw new FW("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new sq({cells:e.cell}):e.cell,null==t.stateSize)throw new FW("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new vU({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?NV(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){hU(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return xo((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new DW("Constants support is not implemented in RNN yet.");hU(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new vU({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!G(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new FW(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new vU({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){xo((()=>{if(!this.stateful)throw new AW("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new FW("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>tl([n,e]))):this.states_=[tl([n,this.cell.stateSize])];else if(null==e)bo(this.states_),null!=this.keptStates&&(bo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>tl([n,e]))):this.states_[0]=tl([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new FW(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):bo(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!G(s.shape,a))throw new FW(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>yo(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=KK(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],o=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new vU({shape:e.shape}));o=o.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof kU){const n=[e].concat(a),s=this.inputSpec.concat(o),r=this.inputSpec;this.inputSpec=s;const i=super.apply(n,t);return this.inputSpec=r,i}return super.apply(e,t)}call(e,t){return xo((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=pU(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new FW(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const o={training:s},i=qK(((e,t)=>{const n=this.cell.call([e].concat(t),o);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=i[0],u=i[1],c=i[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return xo((()=>{let t=tl(e.shape);return t=Ai(t,[1,2]),t=TV(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?DV(t,[1,e]):t)):this.cell.stateSize>1?[DV(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===XK.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const s=rj(t.cell,n);return new e(Object.assign(t,{cell:s}))}}XK.className="RNN",fo(XK);class YK extends SU{}class ZK extends YK{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,QW(this.units,"units"),this.activation=gK(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=cU(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cU(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cU(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=wK(e.kernelRegularizer),this.recurrentRegularizer=wK(e.recurrentRegularizer),this.biasRegularizer=wK(e.biasRegularizer),this.kernelConstraint=jH(e.kernelConstraint),this.recurrentConstraint=jH(e.recurrentConstraint),this.biasConstraint=jH(e.biasConstraint),this.dropout=wV([1,IV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=wV([1,IV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=fU(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return xo((()=>{if(2!==e.length)throw new FW(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=rq({ones:()=>sl(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=rq({ones:()=>sl(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;r=MV(null!=a?Ei(e,a):e,this.kernel.read()),null!=this.bias&&(r=zV(r,this.bias.read())),null!=o&&(n=Ei(n,o));let i=So(r,MV(n,this.recurrentKernel.read()));return null!=this.activation&&(i=this.activation.apply(i)),[i,i]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:fK(this.activation),useBias:this.useBias,kernelInitializer:uU(this.kernelInitializer),recurrentInitializer:uU(this.recurrentInitializer),biasInitializer:uU(this.biasInitializer),kernelRegularizer:vK(this.kernelRegularizer),recurrentRegularizer:vK(this.recurrentRegularizer),biasRegularizer:vK(this.biasRegularizer),activityRegularizer:vK(this.activityRegularizer),kernelConstraint:GH(this.kernelConstraint),recurrentConstraint:GH(this.recurrentConstraint),biasConstraint:GH(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}ZK.className="SimpleRNNCell",fo(ZK);class JK extends XK{constructor(e){e.cell=new ZK(e),super(e)}call(e,t){return xo((()=>{null!=this.cell.dropoutMask&&(bo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(bo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}JK.className="SimpleRNN",fo(JK);class QK extends YK{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new FW("GRUCell does not support reset_after parameter set to true.");this.units=e.units,QW(this.units,"units"),this.activation=gK(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=gK(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=cU(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cU(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cU(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=wK(e.kernelRegularizer),this.recurrentRegularizer=wK(e.recurrentRegularizer),this.biasRegularizer=wK(e.biasRegularizer),this.kernelConstraint=jH(e.kernelConstraint),this.recurrentConstraint=jH(e.recurrentConstraint),this.biasConstraint=jH(e.biasConstraint),this.dropout=wV([1,IV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=wV([1,IV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=fU(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return xo((()=>{if(2!==e.length)throw new FW(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=rq({ones:()=>sl(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=rq({ones:()=>sl(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let o,i,l;0<this.dropout&&this.dropout<1&&(e=Ei(e,r[0]));let u=MV(e,this.kernel.read());this.useBias&&(u=zV(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Ei(s,a[0]));const c=this.recurrentKernel.read(),[h,d]=Nl(c,[2*this.units,this.units],c.rank-1),p=MV(s,h),[f,m,g]=Nl(u,3,u.rank-1),[x,b]=Nl(p,2,p.rank-1);o=this.recurrentActivation.apply(So(f,x)),i=this.recurrentActivation.apply(So(m,b));const y=MV(Ei(i,s),d);l=this.activation.apply(So(g,y));const v=So(Ei(o,s),Ei(So(1,Ji(o)),l));return[v,v]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:fK(this.activation),recurrentActivation:fK(this.recurrentActivation),useBias:this.useBias,kernelInitializer:uU(this.kernelInitializer),recurrentInitializer:uU(this.recurrentInitializer),biasInitializer:uU(this.biasInitializer),kernelRegularizer:vK(this.kernelRegularizer),recurrentRegularizer:vK(this.recurrentRegularizer),biasRegularizer:vK(this.biasRegularizer),activityRegularizer:vK(this.activityRegularizer),kernelConstraint:GH(this.kernelConstraint),recurrentConstraint:GH(this.recurrentConstraint),biasConstraint:GH(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}QK.className="GRUCell",fo(QK);class eq extends XK{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new QK(e),super(e)}call(e,t){return xo((()=>{null!=this.cell.dropoutMask&&(bo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(bo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}eq.className="GRU",fo(eq);class tq extends YK{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,QW(this.units,"units"),this.activation=gK(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=gK(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=cU(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=cU(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=cU(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=wK(e.kernelRegularizer),this.recurrentRegularizer=wK(e.recurrentRegularizer),this.biasRegularizer=wK(e.biasRegularizer),this.kernelConstraint=jH(e.kernelConstraint),this.recurrentConstraint=jH(e.recurrentConstraint),this.biasConstraint=jH(e.biasConstraint),this.dropout=wV([1,IV([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=wV([1,IV([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=fU(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends HV{apply(t,s){const r=e.apply([n]),a=(new KV).apply([n]),o=e.apply([2*n]);return FV(FV(r,a),o)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return xo((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new FW(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=rq({ones:()=>sl(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=rq({ones:()=>sl(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,o=this.recurrentDropoutMask;let i,l,u,c;0<this.dropout&&this.dropout<1&&(e=Ei(e,a[0]));let h=MV(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Ei(s,o[0])),h=So(h,MV(s,this.recurrentKernel.read())),this.useBias&&(h=zV(h,this.bias.read()));const[d,p,f,m]=Nl(h,4,h.rank-1);i=this.recurrentActivation.apply(d),l=this.recurrentActivation.apply(p),u=So(Ei(l,r),Ei(i,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Ei(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:fK(this.activation),recurrentActivation:fK(this.recurrentActivation),useBias:this.useBias,kernelInitializer:uU(this.kernelInitializer),recurrentInitializer:uU(this.recurrentInitializer),biasInitializer:uU(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:vK(this.kernelRegularizer),recurrentRegularizer:vK(this.recurrentRegularizer),biasRegularizer:vK(this.biasRegularizer),activityRegularizer:vK(this.activityRegularizer),kernelConstraint:GH(this.kernelConstraint),recurrentConstraint:GH(this.recurrentConstraint),biasConstraint:GH(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}tq.className="LSTMCell",fo(tq);class nq extends XK{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new tq(e),super(e)}call(e,t){return xo((()=>{null!=this.cell.dropoutMask&&(bo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(bo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}nq.className="LSTM",fo(nq);class sq extends YK{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return xo((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let o=0;o<this.cells.length;++o){const i=this.cells[o];n=s[o],a=0===o?[e[0]].concat(n):[a[0]].concat(n),a=i.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;hU(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{gV(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(rj(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return bU(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}yU(t)}}function rq(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,o=()=>null!=a?a(t(),n):WV(t(),n),i=()=>VV(o,t,s);return!r||r<=1?yo(i().clone()):Array(r).fill(void 0).map(i).map((e=>yo(e.clone())))}sq.className="StackedRNNCells",fo(sq);class aq extends XK{constructor(e){if(e.unroll)throw new DW("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new DW("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new vU({ndim:5})]}call(e,t){return xo((()=>{if(null!=this.cell.dropoutMask&&(bo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(bo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new FW("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return xo((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=tl([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){xo((()=>{if(!this.stateful)throw new AW("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new FW("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>tl(r))):this.states_=[tl(r)];else if(null==e)bo(this.states_),null!=this.keptStates&&(bo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>tl(r))):this.states_[0]=tl(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new FW(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):bo(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!G(n.shape,s))throw new FW(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>yo(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:o}=this.cell,i="channelsFirst"===t,l=e[i?3:2],u=e[i?4:3],c=RK(l,s[0],r,a[0],o[0]),h=RK(u,s[1],r,a[1],o[1]);return[...e.slice(0,2),...i?[n,c,h]:[c,h,n]]}}aq.className="ConvRNN2D";class oq extends tq{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:o}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,QW(this.filters,"filters"),this.kernelSize=EK(n,2,"kernelSize"),this.kernelSize.forEach((e=>QW(e,"kernelSize"))),this.strides=EK(s||1,2,"strides"),this.strides.forEach((e=>QW(e,"strides"))),this.padding=r||"valid",pV(this.padding),this.dataFormat=a||"channelsLast",dV(this.dataFormat),this.dilationRate=EK(o||1,2,"dilationRate"),this.dilationRate.forEach((e=>QW(e,"dilationRate")))}build(e){var t;e=fU(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new FW(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends HV{apply(e,t){return _V([n.apply([s]),nl([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return xo((()=>{if(3!==e.length)throw new FW(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=rq({ones:()=>sl(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const o=this.dropoutMask,i=(e,t,n)=>t&&t[n]?Ei(t[n],e):e;let l=i(s,o,0),u=i(s,o,1),c=i(s,o,2),h=i(s,o,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=rq({ones:()=>sl(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const d=this.recurrentDropoutMask;let p=i(r,d,0),f=i(r,d,1),m=i(r,d,2),g=i(r,d,3);const[x,b,y,v]=Nl(this.kernel.read(),4,3),[k,w,I,N]=this.useBias?Nl(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,x,k,this.padding),u=this.inputConv(u,b,w,this.padding),c=this.inputConv(c,y,I,this.padding),h=this.inputConv(h,v,N,this.padding);const[S,$,C,T]=Nl(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,S),f=this.recurrentConv(f,$),m=this.recurrentConv(m,C),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(So(l,p)),R=this.recurrentActivation.apply(So(u,f)),A=So(Ei(R,a),Ei(E,this.activation.apply(So(c,m)))),_=Ei(this.recurrentActivation.apply(So(h,g)),this.activation.apply(A));return[_,_,A]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),s)}inputConv(e,t,n,s){const r=ri(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?zV(r,n,this.dataFormat):r}recurrentConv(e,t){return ri(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}oq.className="ConvLSTM2DCell",fo(oq);class iq extends aq{constructor(e){const t=new oq(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}iq.className="ConvLSTM2D",fo(iq);class lq extends SU{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return xo((()=>{this.invokeCallHook(e,t);const n=pU(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return VV((()=>WV(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}lq.className="Dropout",fo(lq);class uq extends lq{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}uq.className="SpatialDropout1D",fo(uq);class cq extends SU{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,QW(this.units,"units"),this.activation=gK(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=cU(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=cU(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=jH(e.kernelConstraint),this.biasConstraint=jH(e.biasConstraint),this.kernelRegularizer=wK(e.kernelRegularizer),this.biasRegularizer=wK(e.biasRegularizer),this.activityRegularizer=wK(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=fU(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=fU(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return xo((()=>{this.invokeCallHook(e,t);const n=pU(e),s=tV(this.activation.getClassName());let r;return null!=s?r=MV(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=MV(n,this.kernel.read()),null!=this.bias&&(r=zV(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:fK(this.activation),useBias:this.useBias,kernelInitializer:uU(this.kernelInitializer),biasInitializer:uU(this.biasInitializer),kernelRegularizer:vK(this.kernelRegularizer),biasRegularizer:vK(this.biasRegularizer),activityRegularizer:vK(this.activityRegularizer),kernelConstraint:GH(this.kernelConstraint),biasConstraint:GH(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}cq.className="Dense",fo(cq);class hq extends SU{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=fU(e);for(const t of e.slice(1))if(null==t)throw new FW(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],kV(e,1)]}call(e,t){return xo((()=>{this.invokeCallHook(e,t);let n=pU(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Ml(n,e)}return function(e){if(e.rank<=1)throw new FW(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],kV(e.shape,1)];return Uo(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}hq.className="Flatten",fo(hq);class dq extends SU{constructor(e){super(e),this.supportsMasking=!0,this.activation=gK(e.activation)}call(e,t){return xo((()=>{this.invokeCallHook(e,t);const n=pU(e);return this.activation.apply(n)}))}getConfig(){const e={activation:fK(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}dq.className="Activation",fo(dq);class pq extends SU{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return xo((()=>{return e=pU(e),t=e,n=this.n,xo((()=>{if(2!==t.shape.length)throw new FW(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return DV(TV(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}pq.className="RepeatVector",fo(pq);class fq extends SU{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new FW("Can only specifiy one unknown dimension.");a=e}else r*=t}const o=kV(e);if(null!==a){if(0===r||o%r!=0)throw new FW(n);s[a]=o/r}else if(o!==r)throw new FW(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return xo((()=>{this.invokeCallHook(e,t);const n=pU(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return Uo(n,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}fq.className="Reshape",fo(fq);class mq extends SU{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=NV(1,e.dims.length+1);if(!G(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new vU({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=fU(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return Ml(pU(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}mq.className="Permute",fo(mq);class gq extends SU{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=pU(e);return Co(Qi(n,this.maskValue),-1)}call(e,t){return xo((()=>{this.invokeCallHook(e,t);const n=pU(e),s=Co(Qi(n,this.maskValue),-1,!0);return Ei(n,Da(s,n.dtype))}))}}gq.className="Masking",fo(gq);class xq extends SU{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(WW(e.inputLength))}this.inputDim=e.inputDim,QW(this.inputDim,"inputDim"),this.outputDim=e.outputDim,QW(this.outputDim,"outputDim"),this.embeddingsInitializer=cU(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=wK(e.embeddingsRegularizer),this.activityRegularizer=wK(e.activityRegularizer),this.embeddingsConstraint=jH(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return xo((()=>this.maskZero?(e=pU(e),Qi(e,Fl(e))):null))}computeOutputShape(e){if(e=fU(e),null==this.inputLength)return[...e,this.outputDim];const t=WW(this.inputLength);if(t.length!==e.length-1)throw new FW(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new FW(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return xo((()=>{this.invokeCallHook(e,t);let n=pU(e);"int32"!==n.dtype&&(n=CV(n,"int32"));const s=LV(this.embeddings.read(),Uo(n,[n.size]));return Uo(s,fU(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:uU(this.embeddingsInitializer),embeddingsRegularizer:vK(this.embeddingsRegularizer),activityRegularizer:vK(this.activityRegularizer),embeddingsConstraint:GH(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}xq.className="Embedding",fo(xq);class bq extends SU{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new DW}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new FW("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[fU(e)]),e.length<2)throw new FW(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=XW(t),t.length>1)throw new FW(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===XW(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return xo((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=IV(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=TV(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let o=Uo(s,[r].concat(kV(e.slice(1))));o=Ml(o,[1,0]),o=Uo(o,a),t.push(o),n=!0}else if(e>1){const r=NV(1,e).concat([0]);t.push(Ml(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=Uo(Ml(Uo(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(NV(0,r-1));s=Ml(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=XW(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return xo((()=>{if(null==t)return null;if(!Array.isArray(t))throw new FW("`mask` should be an Array");if(!Array.isArray(e))throw new FW("`inputs` should be an Array");if(t.length!==e.length)throw new FW(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:bi(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Vi(n,t[e]);return n}))}}class yq extends bq{constructor(e){super(e)}mergeFunction(e){return xo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=So(t,e[n]);return t}))}}yq.className="Add",fo(yq);class vq extends bq{constructor(e){super(e)}mergeFunction(e){return xo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Ei(t,e[n]);return t}))}}vq.className="Multiply",fo(vq);class kq extends bq{constructor(e){super(e)}mergeFunction(e){return xo((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=So(t,e[n]);return Ei(1/e.length,t)}))}}kq.className="Average",fo(kq);class wq extends bq{constructor(e){super(e)}mergeFunction(e){return xo((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=ji(t,e[n]);return t}))}}wq.className="Maximum",fo(wq);class Iq extends bq{constructor(e){super(e)}mergeFunction(e){return xo((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Xi(t,e[n]);return t}))}}Iq.className="Minimum",fo(Iq);class Nq extends bq{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new FW("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(G(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new FW("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return xo((()=>_V(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new FW("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new FW("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new FW("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new FW(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return xo((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(Da(sl(e[n]),"bool")):t[n].rank<e[n].rank?s.push(bi(t[n],-1)):s.push(t[n]);const r=Qo(s,this.axis);return $o(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Sq(e,t){for(;e<0;)e+=t;return e}Nq.className="Concatenate",fo(Nq);class $q extends bq{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){P(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new DW("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new FW(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new FW(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>Sq(t,e[n].shape.length))):[Sq(this.axes,n.shape.length),Sq(this.axes,s.shape.length)],this.normalize&&(n=aj(n,t[0]),s=aj(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new DW("batchDot is not implemented for tensors of 4D or higher rank yet");if(P(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),P(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new DW("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return xo((()=>{let n,o;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=Uo(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=Uo(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)o=a[0]===a[1]?Ai(Ei(e,t),a[0]):Ai(Ei(Ml(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;o=Ui(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);o=$l(o,t)}return 1===o.shape.length&&(o=bi(o,1)),o}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[Sq(this.axes,e.length),Sq(this.axes,t.length)],n}computeOutputShape(e){P(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new DW("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}$q.className="Dot",fo($q);class Cq extends SU{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return xo((()=>{this.invokeCallHook(e,t);const n=pU(e);return VV((()=>So(OV(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}Cq.className="GaussianNoise",fo(Cq);class Tq extends SU{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return xo((()=>{this.invokeCallHook(e,t);const n=pU(e);return this.rate>0&&this.rate<1?VV((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Ei(n,OV(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}Tq.className="GaussianDropout",fo(Tq);class Eq extends SU{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||pU(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return xo((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return VV((()=>{const t=pU(e),s=-1.7580993408473766;let r=Ni(cl(n),this.rate);r=CV(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,o=-a*s*this.rate,i=So(Ei(t,r),Ei(So(r,-1),s));return So(Ei(i,a),o)}),(()=>pU(e)),t.training||!1)}return e}))}}function Rq(e,t,n,s,r,a=.001){let o;if(2===e.rank)o=Ko(e,t,n,s,r,a);else if(3===e.rank)o=qo(e,t,n,s,r,a);else{if(4!==e.rank)throw new DW(`batchNormalization is not implemented for array of rank ${e.rank} yet`);o=Xo(e,t,n,s,r,a)}return o}Eq.className="AlphaDropout",fo(Eq);class Aq extends SU{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=cU(e.betaInitializer||"zeros"),this.gammaInitializer=cU(e.gammaInitializer||"ones"),this.movingMeanInitializer=cU(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=cU(e.movingVarianceInitializer||"ones"),this.betaConstraint=jH(e.betaConstraint),this.gammaConstraint=jH(e.gammaConstraint),this.betaRegularizer=wK(e.betaRegularizer),this.gammaRegularizer=wK(e.gammaRegularizer)}build(e){e=fU(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new FW(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new vU({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return xo((()=>{const n=null!=t.training&&t.training,s=pU(e),r=s.shape,a=r.length,o=NV(0,a),i=this.axis>=0?this.axis:this.axis+a;o.splice(i,1);const l=LW(1,a);l[i]=r[i];const u=o.slice();u.sort();const c=!G(u,NV(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=Uo(this.movingMean.read(),l),t=Uo(this.movingVariance.read(),l),n=this.center?Uo(this.beta.read(),l):null,r=this.scale?Uo(this.gamma.read(),l):null;return Rq(s,e,t,n,r,this.epsilon)}return Rq(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=function(e,t,n,s,r=.001){return G(s.slice().sort(),NV(0,e.rank-1))?function(e,t,n,s,r=.001){return xo((()=>{const a=Zi(e,s),o=a.mean,i=a.variance;return[Rq(e,o,i,n,t,r),o,i]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return xo((()=>{const a=Zi(e,s),o=a.mean,i=a.variance,l=[];for(const t of NV(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=Uo(o,l),c=Uo(i,l),h=null==t?null:Uo(t,l),d=null==n?null:Uo(n,l);return[Rq(e,u,c,d,h,r),o,i]}))}(e,t,n,s,r)}(s,this.gamma.read(),this.beta.read(),o,this.epsilon),f=(e,t,n)=>{xo((()=>{const s=1-n,r=e.read(),a=Ei(Ri(r,t),s);e.write(Ri(r,a))}))};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:uU(this.betaInitializer),gammaInitializer:uU(this.gammaInitializer),movingMeanInitializer:uU(this.movingMeanInitializer),movingVarianceInitializer:uU(this.movingVarianceInitializer),betaRegularizer:vK(this.betaRegularizer),gammaRegularizer:vK(this.gammaRegularizer),betaConstraint:GH(this.betaConstraint),gammaConstraint:GH(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Aq.className="BatchNormalization",fo(Aq);class _q extends SU{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=cU(e.betaInitializer||"zeros"),this.gammaInitializer=cU(e.gammaInitializer||"ones"),this.betaRegularizer=wK(e.betaRegularizer),this.gammaRegularizer=wK(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=fU(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==XW(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const n=pU(e),s=n.shape,r=s.length;return xo((()=>{let{mean:e,variance:t}=Zi(n,this.axis,!0);const a=LW(1,r);for(const e of this.axis)a[e]=s[e];const o=e=>null!=e&&e.shape.length!==r?Uo(e,a):e;let i=this.scale?o(this.gamma.read()):null,l=this.center?o(this.beta.read()):null;const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=yi(e,u),t=yi(t,u),null!=i&&(i=yi(i,c)),null!=l&&(l=yi(l,c)),Rq(n,e,t,l,i,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:uU(this.betaInitializer),gammaInitializer:uU(this.gammaInitializer),betaRegularizer:vK(this.betaRegularizer),gammaRegularizer:vK(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}_q.className="LayerNormalization",fo(_q);class Fq extends SU{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new FW(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new FW(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new FW(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new vU({ndim:4})]}computeOutputShape(e){let t,n;return e=fU(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return xo((()=>{return t=pU(e),n=this.padding,s=this.dataFormat,xo((()=>{if(4!==t.rank)throw new FW(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new FW("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new FW(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],rl(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Dq(e,t,n,s,r,a){return xo((()=>{let o;dV(r),fV(a),pV(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=_K(e,r);const i="same"===s?"same":"valid";return o="max"===a?Gi(e,t,n,i):Go(e,t,n,i),"channelsFirst"===r&&(o=Ml(o,[0,3,1,2])),o}))}function Oq(e,t,n,s,r,a){return xo((()=>{let o;dV(r),fV(a),pV(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=FK(e,r);const i="same"===s?"same":"valid";return o="max"===a?Hi(e,t,n,i):Ho(e,t,n,i),"channelsFirst"===r&&(o=Ml(o,[0,4,1,2,3])),o}))}Fq.className="ZeroPadding2D",fo(Fq);class Mq extends SU{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new FW(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(QW(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new FW(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}QW(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,pV(this.padding),this.inputSpec=[new vU({ndim:3})]}computeOutputShape(e){const t=RK((e=fU(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return xo((()=>{this.invokeCallHook(e,t),e=TV(pU(e),2);const n=this.poolingFunction(pU(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return $l(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Lq extends Mq{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dV(r),pV(s),Dq(e,t,n,s,r,"max")}}Lq.className="MaxPooling1D",fo(Lq);class Bq extends Mq{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dV(r),pV(s),Dq(e,t,n,s,r,"avg")}}Bq.className="AveragePooling1D",fo(Bq);class Pq extends SU{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new FW(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];QW(this.poolSize,"poolSize"),QW(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dV(this.dataFormat),pV(this.padding),this.inputSpec=[new vU({ndim:4})]}computeOutputShape(e){e=fU(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=RK(t,this.poolSize[0],this.padding,this.strides[0]),n=RK(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return xo((()=>(this.invokeCallHook(e,t),this.poolingFunction(pU(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class zq extends Pq{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dV(r),pV(s),Dq(e,t,n,s,r,"max")}}zq.className="MaxPooling2D",fo(zq);class Wq extends Pq{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dV(r),pV(s),Dq(e,t,n,s,r,"avg")}}Wq.className="AveragePooling2D",fo(Wq);class Vq extends SU{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new FW(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];QW(this.poolSize,"poolSize"),QW(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dV(this.dataFormat),pV(this.padding),this.inputSpec=[new vU({ndim:5})]}computeOutputShape(e){e=fU(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=RK(t,this.poolSize[0],this.padding,this.strides[0]),n=RK(n,this.poolSize[1],this.padding,this.strides[1]),s=RK(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return xo((()=>(this.invokeCallHook(e,t),this.poolingFunction(pU(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Uq extends Vq{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dV(r),pV(s),Oq(e,t,n,s,r,"max")}}Uq.className="MaxPooling3D",fo(Uq);class Gq extends Vq{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return dV(r),pV(s),Oq(e,t,n,s,r,"avg")}}Gq.className="AveragePooling3D",fo(Gq);class Hq extends SU{constructor(e){super(e),this.inputSpec=[new vU({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new DW}}class jq extends Hq{constructor(e){super(e||{})}call(e,t){return xo((()=>{const t=pU(e);return Ki(t,1)}))}}jq.className="GlobalAveragePooling1D",fo(jq);class Kq extends Hq{constructor(e){super(e||{})}call(e,t){return xo((()=>{const t=pU(e);return Ti(t,1)}))}}Kq.className="GlobalMaxPooling1D",fo(Kq);class qq extends SU{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,dV(this.dataFormat),this.inputSpec=[new vU({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new DW}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Xq extends qq{call(e,t){return xo((()=>{const t=pU(e);return"channelsLast"===this.dataFormat?Ki(t,[1,2]):Ki(t,[2,3])}))}}Xq.className="GlobalAveragePooling2D",fo(Xq);class Yq extends qq{call(e,t){return xo((()=>{const t=pU(e);return"channelsLast"===this.dataFormat?Ti(t,[1,2]):Ti(t,[2,3])}))}}Yq.className="GlobalMaxPooling2D",fo(Yq);class Zq extends SU{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=rj(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class Jq extends Zq{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=fU(e)).length<3)throw new FW(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=fU(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return xo((()=>qK(((e,n)=>[pU(this.layer.call(e,t)),[]]),e=pU(e),[],!1,null,null,!1,!0)[1]))}}Jq.className="TimeDistributed",fo(Jq);class Qq extends Zq{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=rj(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=rj(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,ZW(cV,"BidirectionalMergeMode",r),e.weights)throw new DW("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):zW(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=KK(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],o=[];if(null!=n){const e=n.length;if(e%2>0)throw new FW("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new vU({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),o.push(...s)}if(null!=s)throw new DW("Support for constants in Bidirectional layers is not implemented yet.");const i=a[0]instanceof kU;for(const e of a)if(e instanceof kU!==i)throw new FW("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(i){const n=[e].concat(a),s=this.inputSpec.concat(o),r=this.inputSpec;this.inputSpec=s;const i=super.apply(n,t);return this.inputSpec=r,i}return super.apply(e,t)}call(e,t){return xo((()=>{const n=t.initialState;let s,r,a,o;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),o=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:o}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=pl(r,1)),"concat"===this.mergeMode?o=_V([s,r]):"sum"===this.mergeMode?o=So(s,r):"ave"===this.mergeMode?o=Ei(.5,So(s,r)):"mul"===this.mergeMode?o=Ei(s,r):null==this.mergeMode&&(o=[s,r]),this.returnState?null==this.mergeMode?o.concat(a):[o].concat(a):o}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){gV(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),gV(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=rj(t.layer);if(delete t.layer,null!=t.numConstants)throw new DW("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}Qq.className="Bidirectional",fo(Qq);class eX extends SU{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return xo((()=>("float32"!==(e=pU(e)).dtype&&(e=CV(e,"float32")),So(Ei(e,this.scale),this.offset))))}}eX.className="Rescaling",fo(eX);const{resizeBilinear:tX,cropAndResize:nX}=Mu;class sX extends SU{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,s,r,a,o,i){return xo((()=>{let l,u=!1;const c=[t/a,n/o,(s+t)/a,(r+n)/o],h=[];3===e.rank?(u=!0,l=Cl([e])):l=e;for(let e=0;e<l.shape[0];e++)h.push(c);const d=ea(h,[h.length,4]),p=hl(0,h.length,1,"int32"),f=nX(l,d,p,[s,r],"nearest");return CV(u?pU(Al(f)):f,i)}))}upsize(e,t,n,s){return xo((()=>CV(tX(e,[t,n]),s)))}call(e,t){return xo((()=>{const t=pU(e),n=t.dtype,s=t.shape,r=s[s.length-3],a=s[s.length-2];let o=0;r!==this.height&&(o=Math.floor((r-this.height)/2));let i=0;return a!==this.width&&(i=Math.floor((a-this.width)/2),0===i&&(i=1)),o>=0&&i>=0?this.centerCrop(t,o,i,this.height,this.width,r,a,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=fU(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}sX.className="CenterCrop",fo(sX);class rX extends SU{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=fU(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return xo((()=>{let n;if("int32"!==(e=pU(e)).dtype&&(e=CV(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new FW(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=pU(t.countWeights)}const s=Ti(e),r=qi(e),a=Ii(this.numTokens,s).bufferSync().get(0),o=Ni(r,0).bufferSync().get(0);if(!a||!o)throw new FW(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,s){let r=pU(e);if("int32"!==r.dtype&&(r=CV(r,"int32")),"int"===t)return r;const a=r.shape;if(0===r.rank&&(r=bi(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=bi(r,-1)),r.rank>2)throw new FW(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${r.rank}.`);const o=["multiHot","oneHot"].includes(t);let i;if(i=hi(r,void 0!==s&&"count"===t?s:[],n,o),"tfIdf"!==t)return i;if(s)return Ei(i,s);throw new FW("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}rX.className="CategoryEncoding",fo(rX);const aX=new Set(["bilinear","nearest"]);class oX extends SU{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!aX.has(e.interpolation))throw new FW(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=fU(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return xo((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return Mu.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Mu.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...aX]} are supported`)}))}}oX.className="Resizing",fo(oX);class iX{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}iX.className="RandomSeed";class lX extends SU{constructor(e){super(e),this.randomGenerator=new iX(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}lX.className="BaseRandomLayer";const uX=new Set(["bilinear","nearest"]);class cX extends lX{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new FW(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new FW(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new FW(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!uX.has(n))throw new FW(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=fU(e))[2];return[this.imgHeight,-1,t]}call(e,t){return xo((()=>{const t=pU(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=cl([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let s=this.widthFactor.dataSync()[0]*n;s=Math.round(s);const r=[this.imgHeight,s];switch(this.interpolation){case"bilinear":return Mu.resizeBilinear(e,r);case"nearest":return Mu.resizeNearestNeighbor(e,r);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...uX]} are supported`)}}))}}var hX,dX;cX.className="RandomWidth",fo(cX),V$().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(hX||(hX={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(dX||(dX={}));const pX={};function fX(e){return pX[e]}function mX(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd,i=e<0?t.inputNames.length+e:e;if("tensor"===a.type)return gX(t.inputNames[i],n,s,r);if("tensors"===a.type){const a=t.inputs.slice(e,o);return t.inputNames.slice(e,o).filter(((e,t)=>{var n;return"NoOp"!==(null===(n=a[t])||void 0===n?void 0:n.op)})).map((e=>gX(e,n,s,r)))}const l=gX(t.inputNames[i],n,s,r),u=l.dataSync();return"number"===a.type?u[0]:A$(l.shape,u)}const o=t.attrParams[e];return o&&o.value}function gX(e,t,n,s){const[r,a]=vX(e,n);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[yX(r,e)]));return void 0!==o?t[yX(r,o)][a]:void 0}function xX(e,t,n){return t[yX(e,n.currentContextId)]}function bX(e,t){const[n,s,r]=vX(e,t);return[yX(n,t&&t.currentContextId),s,r]}function yX(e,t){return t?`${e}-${t}`:e}function vX(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const s=e.split(":");let r;if(1===s.length)r=[e,0,void 0];else{const e=s[0],t=3===s.length?s[1]:void 0;r=[e,Number(s[s.length-1]),t]}return n&&t.parseNodeNameCache.set(e,r),r}function kX(e,t,n){let s=mX("pad",e,t,n);if("explicit"===s){s=mX("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function wX(e){return e.kept?e:R_(e)}const IX=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],NX=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],SX=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],$X=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],CX=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],TX=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],EX=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],RX=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],AX=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],_X=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],FX=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],DX=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],OX=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],MX=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],LX=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],BX=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],PX=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],zX=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],WX=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class VX{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[h,d,p,f,m,g,x,b,y,v,k,w,I,N,S,$,C,T,E].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(o);h.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[s,,r]=bX(e),a=o[s];if(null!=a.outputs){const e=a.outputs.indexOf(r);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=o[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=bX(e),n=o[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=bX(e),n=o[t];n&&(n.signatureKey=u[e],i.push(n))})):i=s;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const p={nodes:o,inputs:i,outputs:l,weights:r,placeholders:s,signature:t,functions:d};return a.length>0&&(p.initNodes=a),p}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=fX(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=GX(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=GX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=eY(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=eY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=jX(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=jX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=QX(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=QX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=HX(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=HX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=nY(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=nY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=JX(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=JX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=tY(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=tY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=XX(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=XX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=YX(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=YX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=qX(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=qX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=bX(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:KX(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=bX(e),o=s[r];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=bX(o[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const i=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function UX(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=V$().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function GX(e,t,n,s=!1){const r=e[t];return null!=r?UX(r.s,s):n}function HX(e,t,n){const s=e[t];return s?s.b:n}function jX(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function KX(e){switch("string"==typeof e&&(e=hX[e]),e){case hX.DT_FLOAT:case hX.DT_HALF:return"float32";case hX.DT_INT32:case hX.DT_INT64:case hX.DT_INT8:case hX.DT_UINT8:return"int32";case hX.DT_BOOL:return"bool";case hX.DT_DOUBLE:return"float32";case hX.DT_STRING:return"string";default:return null}}function qX(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function XX(e,t,n){const s=e[t];return s&&s.type?KX(s.type):n}function YX(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>KX(e))):n}function ZX(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function JX(e,t,n){const s=e[t];return s&&s.shape?ZX(s.shape):n}function QX(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function eY(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>UX(e,s))):n}function tY(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>ZX(e))):n}function nY(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class sY{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return gX(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return gX(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return jX(this.node.rawAttrs,e,t);if(null!=n.s)return GX(this.node.rawAttrs,e,t);if(null!=n.b)return HX(this.node.rawAttrs,e,t);if(null!=n.shape)return JX(this.node.rawAttrs,e,t);if(null!=n.type)return XX(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return QX(this.node.rawAttrs,e,t);if(null!=n.list.s)return eY(this.node.rawAttrs,e,t);if(null!=n.list.shape)return tY(this.node.rawAttrs,e,t);if(null!=n.list.b)return nY(this.node.rawAttrs,e,t);if(null!=n.list.type)return YX(this.node.rawAttrs,e,t)}return t}}function rY(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){u$(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];u$(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function aY(e){return"number"!=typeof e&&!e.some((e=>e<0))}function oY(e,t,n){let s=iY(e,n);const r=!aY(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=iY(e.shape,s)})),!aY(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function iY(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class lY{constructor(e,t,n,s,r,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=H_(0),O_(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),rY(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,O_(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return EA([],[0].concat(this.elementShape));const n=this.readMany(e);return rY(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),IL(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return EA([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return rY(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),$D(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,zL(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];F_((()=>{t=ID(t,[1,n,r]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:s[n-1],0],i=[1,e[n],r];a[n]=ID(ED(t,o,i),this.elementShape)}return a}));const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class uY{get id(){return this.idTensor.id}constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);rY(t,e.shape,"TensorList shape mismatch: "),O_(e)})),this.idTensor=H_(0),this.maxNumElements=s,O_(this.idTensor)}copy(){return new uY([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);rY(e,this.elementShape,"TensorList shape mismatch: ");const s=oY(this.elementShape,this.tensors,e);return F_((()=>{const e=this.tensors.map((e=>ID(e,s)));return IL(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=oY(this.elementShape,this.tensors,e),s=this.tensors.pop();return s.kept=!1,rY(s.shape,e,"TensorList shape mismatch: "),ID(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(rY(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");O_(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new uY([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);rY(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=oY(this.elementShape,this.tensors,t);return ID(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);rY(this.elementShape,t.shape,"TensorList shape mismatch: "),O_(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);rY(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=oY(this.elementShape,this.tensors,n);return 0===e.length?EA([],[0].concat(s)):F_((()=>{const t=e.map((e=>ID(this.tensors[e],s)));return IL(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);rY(this.elementShape,t,"TensorList shape mismatch: ");const n=oY(this.elementShape,this.tensors,t);return 0===this.size()?EA([],[0].concat(n)):F_((()=>{const e=this.tensors.map((e=>ID(e,n)));return $D(e,0)}))}}function cY(e,t,n){const[s,r]=mX("fusedOps",e,t,n),a="biasadd"===s,o=!a,i="prelu"===r,l="fusedbatchnorm"===s,u=mX("numArgs",e,t,n);if(a){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=mX("strides",e,t,n),h=kX(e,t,n),d=mX("dataFormat",e,t,n).toUpperCase(),p=mX("dilations",e,t,n);let[f,m]=mX("args",e,t,n);return o&&(m=f,f=void 0),{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:mX("leakyreluAlpha",e,t,n)}}function hY(e,t,n){return{boxes:mX("boxes",e,t,n),scores:mX("scores",e,t,n),maxOutputSize:mX("maxOutputSize",e,t,n),iouThreshold:mX("iouThreshold",e,t,n),scoreThreshold:mX("scoreThreshold",e,t,n),softNmsSigma:mX("softNmsSigma",e,t,n)}}class dY{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=H_(0),this.tensorMap=new Map,O_(this.handle)}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return H_(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),F_((()=>{const e=zL(t),s=n.length,r=e.length;u$(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];O_(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return F_((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return IL(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function pY(e,t,n,s,r=F_){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(mX("a",e,t,n),mX("b",e,t,n))];case"AddN":return[s.addN(mX("tensors",e,t,n))];case"FloorMod":case"Mod":return[s.mod(mX("a",e,t,n),mX("b",e,t,n))];case"Mul":return[s.mul(mX("a",e,t,n),mX("b",e,t,n))];case"RealDiv":case"Div":return[s.div(mX("a",e,t,n),mX("b",e,t,n))];case"DivNoNan":return[s.divNoNan(mX("a",e,t,n),mX("b",e,t,n))];case"FloorDiv":return[s.floorDiv(mX("a",e,t,n),mX("b",e,t,n))];case"Sub":return[s.sub(mX("a",e,t,n),mX("b",e,t,n))];case"Minimum":return[s.minimum(mX("a",e,t,n),mX("b",e,t,n))];case"Maximum":return[s.maximum(mX("a",e,t,n),mX("b",e,t,n))];case"Pow":return[s.pow(mX("a",e,t,n),mX("b",e,t,n))];case"SquaredDifference":return[s.squaredDifference(mX("a",e,t,n),mX("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"Abs":case"ComplexAbs":return[s.abs(mX("x",e,t,n))];case"Acos":return[s.acos(mX("x",e,t,n))];case"Acosh":return[s.acosh(mX("x",e,t,n))];case"Asin":return[s.asin(mX("x",e,t,n))];case"Asinh":return[s.asinh(mX("x",e,t,n))];case"Atan":return[s.atan(mX("x",e,t,n))];case"Atan2":return[s.atan2(mX("x",e,t,n),mX("y",e,t,n))];case"Atanh":return[s.atanh(mX("x",e,t,n))];case"Ceil":return[s.ceil(mX("x",e,t,n))];case"Complex":return[s.complex(mX("real",e,t,n),mX("imag",e,t,n))];case"Cos":return[s.cos(mX("x",e,t,n))];case"Cosh":return[s.cosh(mX("x",e,t,n))];case"Elu":return[s.elu(mX("x",e,t,n))];case"Erf":return[s.erf(mX("x",e,t,n))];case"Exp":return[s.exp(mX("x",e,t,n))];case"Expm1":return[s.expm1(mX("x",e,t,n))];case"Floor":return[s.floor(mX("x",e,t,n))];case"Log":return[s.log(mX("x",e,t,n))];case"Log1p":return[s.log1p(mX("x",e,t,n))];case"Imag":return[s.imag(mX("x",e,t,n))];case"Neg":return[s.neg(mX("x",e,t,n))];case"Reciprocal":return[s.reciprocal(mX("x",e,t,n))];case"Real":return[s.real(mX("x",e,t,n))];case"Relu":return[s.relu(mX("x",e,t,n))];case"Round":return[s.round(mX("x",e,t,n))];case"Selu":return[s.selu(mX("x",e,t,n))];case"Sigmoid":return[s.sigmoid(mX("x",e,t,n))];case"Sin":return[s.sin(mX("x",e,t,n))];case"Sign":return[s.sign(mX("x",e,t,n))];case"Sinh":return[s.sinh(mX("x",e,t,n))];case"Softplus":return[s.softplus(mX("x",e,t,n))];case"Sqrt":return[s.sqrt(mX("x",e,t,n))];case"Square":return[s.square(mX("x",e,t,n))];case"Tanh":return[s.tanh(mX("x",e,t,n))];case"Tan":return[s.tan(mX("x",e,t,n))];case"ClipByValue":return[s.clipByValue(mX("x",e,t,n),mX("clipValueMin",e,t,n),mX("clipValueMax",e,t,n))];case"Relu6":return[s.relu6(mX("x",e,t,n))];case"Rsqrt":return[s.rsqrt(gX(e.inputNames[0],t,n))];case"LeakyRelu":return[s.leakyRelu(mX("x",e,t,n),mX("alpha",e,t,n))];case"Prelu":return[s.prelu(mX("x",e,t,n),mX("alpha",e,t,n))];case"IsNan":return[s.isNaN(gX(e.inputNames[0],t,n))];case"IsInf":return[s.isInf(gX(e.inputNames[0],t,n))];case"IsFinite":return[s.isFinite(gX(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=mX("thenBranch",e,t,n),r=mX("elseBranch",e,t,n),a=mX("cond",e,t,n),o=mX("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=mX("body",e,t,n),r=mX("cond",e,t,n),a=mX("args",e,t,n),o=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let l=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[wX(mX("pred",e,t,n))];case"Switch":{const s=mX("pred",e,t,n);let r=mX("data",e,t,n);return r.kept||(r=wX(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==gX(e,t,n)));return s?[wX(gX(s,t,n))]:void 0}case"Enter":{const s=mX("frameName",e,t,n),r=mX("tensor",e,t,n);return n.enterFrame(s),[wX(r)]}case"Exit":{const s=mX("tensor",e,t,n);return n.exitFrame(),[wX(s)]}case"NextIteration":{const s=mX("tensor",e,t,n);return n.nextIteration(),[wX(s)]}case"TensorArrayV3":{const s=mX("size",e,t,n),r=mX("dtype",e,t,n),a=mX("elementShape",e,t,n),o=mX("dynamicSize",e,t,n),i=mX("clearAfterRead",e,t,n),l=mX("identicalElementShapes",e,t,n),u=mX("name",e,t,n),c=new lY(u,r,s,a,l,o,i);return n.addTensorArray(c),[c.idTensor,H_(1)]}case"TensorArrayWriteV3":{const s=mX("tensorArrayId",e,t,n),r=mX("index",e,t,n),a=mX("tensor",e,t,n),o=n.getTensorArray(s.id);return o.write(r,a),[o.idTensor]}case"TensorArrayReadV3":{const s=mX("tensorArrayId",e,t,n),r=mX("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=mX("tensorArrayId",e,t,n),r=mX("indices",e,t,n),a=mX("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=mX("tensorArrayId",e,t,n),r=mX("indices",e,t,n),a=mX("tensor",e,t,n),o=n.getTensorArray(s.id);return o.scatter(r,a),[o.idTensor]}case"TensorArrayConcatV3":{const s=mX("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=mX("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=mX("tensorArrayId",e,t,n),r=mX("tensor",e,t,n),a=mX("lengths",e,t,n),o=n.getTensorArray(s.id);return o.split(a,r),[o.idTensor]}case"TensorArraySizeV3":{const s=mX("tensorArrayId",e,t,n);return[H_(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=mX("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=mX("tensorListId",e,t,n),r=mX("index",e,t,n),a=mX("tensor",e,t,n),o=n.getTensorList(s.id);return o.setItem(r,a),[o.idTensor]}case"TensorListGetItem":{const s=mX("tensorListId",e,t,n),r=mX("index",e,t,n),a=mX("elementShape",e,t,n),o=mX("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const s=mX("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new uY([],n,e.dtype,s),o=zL(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}(mX("tensor",e,t,n),s,mX("elementShape",e,t,n),mX("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=mX("elementShape",e,t,n),r=mX("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=mX(a,e,t,n),i=function(e,t,n,s){return new uY([],e,t,s)}(s,r,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=mX("tensorListId",e,t,n),r=mX("indices",e,t,n),a=mX("elementShape",e,t,n),o=mX("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,o,a)]}case"TensorListStack":{const s=mX("tensorListId",e,t,n),r=mX("elementShape",e,t,n),a=mX("elementDType",e,t,n),o=mX("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,o)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);rY(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=zL(e);return new uY(r,t,s)}(mX("tensor",e,t,n),mX("elementShape",e,t,n),mX("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=mX("tensorListId",e,t,n),r=n.getTensorList(s.id),a=mX("dtype",e,t,n),o=mX("elementShape",e,t,n);return[r.concat(a,o)]}case"TensorListPushBack":{const s=mX("tensorListId",e,t,n),r=mX("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=mX("tensorListId",e,t,n),r=mX("elementShape",e,t,n),a=mX("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=mX("tensor",e,t,n),r=mX("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=iY(e.shape.slice(1),n),o=0===s?0:e.size/s,i=F_((()=>{const n=[];e=ID(e,[1,s,o]);for(let s=0;s<t.length;++s){const i=[0,0===s?0:r[s-1],0],l=[1,t[s],o];n[s]=ID(ED(e,i,l),a)}return e.dispose(),n})),l=new uY([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)l.setItem(e,i[e]);return l}(s,mX("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const s=mX("tensorListId",e,t,n);return[H_(n.getTensorList(s.id).size(),"int32")]}case"TensorListResize":{const s=mX("tensorListId",e,t,n),r=mX("size",e,t,n),a=n.getTensorList(s.id).resize(r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"Conv1D":{const r=mX("stride",e,t,n),a=mX("pad",e,t,n),o=mX("dataFormat",e,t,n).toUpperCase(),i=mX("dilation",e,t,n);return[s.conv1d(mX("x",e,t,n),mX("filter",e,t,n),r,a,o,i)]}case"Conv2D":{const r=mX("strides",e,t,n),a=kX(e,t,n),o=mX("dataFormat",e,t,n).toUpperCase(),i=mX("dilations",e,t,n);return[s.conv2d(mX("x",e,t,n),mX("filter",e,t,n),[r[1],r[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=cY(e,t,n);return[s.fused.conv2d({x:mX("x",e,t,n),filter:mX("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:o,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=cY(e,t,n);return[s.fused.depthwiseConv2d({x:mX("x",e,t,n),filter:mX("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=mX("outputShape",e,t,n),a=mX("strides",e,t,n),o=kX(e,t,n);return[s.conv2dTranspose(mX("x",e,t,n),mX("filter",e,t,n),r,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=mX("strides",e,t,n),a=kX(e,t,n),o=mX("dilations",e,t,n),i=mX("dataFormat",e,t,n).toUpperCase();return[s.depthwiseConv2d(mX("input",e,t,n),mX("filter",e,t,n),[r[1],r[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const r=mX("strides",e,t,n),a=mX("pad",e,t,n),o=mX("dataFormat",e,t,n).toUpperCase(),i=mX("dilations",e,t,n);return[s.conv3d(mX("x",e,t,n),mX("filter",e,t,n),[r[1],r[2],r[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const r=mX("strides",e,t,n),a=mX("pad",e,t,n),o=mX("kernelSize",e,t,n);return[s.avgPool(mX("x",e,t,n),[o[1],o[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=mX("strides",e,t,n),a=mX("pad",e,t,n),o=mX("kernelSize",e,t,n);return[s.maxPool(mX("x",e,t,n),[o[1],o[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=mX("strides",e,t,n),a=mX("pad",e,t,n),o=mX("kernelSize",e,t,n),i=mX("includeBatchInIndex",e,t,n),{result:l,indexes:u}=s.maxPoolWithArgmax(mX("x",e,t,n),[o[1],o[2]],[r[1],r[2]],a,i);return[l,u]}case"AvgPool3D":{const r=mX("strides",e,t,n),a=mX("pad",e,t,n),o=mX("kernelSize",e,t,n);return[s.avgPool3d(mX("x",e,t,n),[o[1],o[2],o[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=mX("strides",e,t,n),a=mX("pad",e,t,n),o=mX("kernelSize",e,t,n);return[s.maxPool3d(mX("x",e,t,n),[o[1],o[2],o[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=mX("strides",e,t,n),a=mX("pad",e,t,n),o=mX("dilations",e,t,n),i=r[1],l=r[2],u=o[1],c=o[2];return[s.dilation2d(mX("x",e,t,n),mX("filter",e,t,n),[i,l],a,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"Fill":{const r=mX("shape",e,t,n),a=mX("dtype",e,t,n),o=mX("value",e,t,n);return[s.fill(r,o,a)]}case"LinSpace":{const r=mX("start",e,t,n),a=mX("stop",e,t,n),o=mX("num",e,t,n);return[s.linspace(r,a,o)]}case"Multinomial":{const r=mX("logits",e,t,n),a=mX("numSamples",e,t,n),o=mX("seed",e,t,n);return[s.multinomial(r,a,o)]}case"OneHot":{const r=mX("indices",e,t,n),a=mX("depth",e,t,n),o=mX("onValue",e,t,n),i=mX("offValue",e,t,n),l=mX("dtype",e,t,n);return[s.oneHot(r,a,o,i,l)]}case"Ones":return[s.ones(mX("shape",e,t,n),mX("dtype",e,t,n))];case"OnesLike":return[s.onesLike(mX("x",e,t,n))];case"RandomStandardNormal":return[s.randomStandardNormal(mX("shape",e,t,n),mX("dtype",e,t,n),mX("seed",e,t,n))];case"RandomUniform":return[s.randomUniform(mX("shape",e,t,n),mX("minval",e,t,n),mX("maxval",e,t,n),mX("dtype",e,t,n))];case"RandomUniformInt":return[s.randomUniformInt(mX("shape",e,t,n),mX("minval",e,t,n),mX("maxval",e,t,n),mX("seed",e,t,n))];case"Range":{const r=mX("start",e,t,n),a=mX("stop",e,t,n),o=mX("step",e,t,n);return[s.range(r,a,o,mX("dtype",e,t,n))]}case"TruncatedNormal":{const r=mX("shape",e,t,n),a=mX("mean",e,t,n),o=mX("stdDev",e,t,n),i=mX("seed",e,t,n);return[s.truncatedNormal(r,a,o,mX("dtype",e,t,n),i)]}case"Zeros":return[s.zeros(mX("shape",e,t,n),mX("dtype",e,t,n))];case"ZerosLike":return[s.zerosLike(mX("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,s,r=R)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=hY(e,t,n),c=await r.image.nonMaxSuppressionWithScoreAsync(s,a,o,i,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=hY(e,t,n),u=mX("padToMaxOutputSize",e,t,n),c=await r.image.nonMaxSuppressionPaddedAsync(s,a,o,i,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=hY(e,t,n);return[await r.image.nonMaxSuppressionAsync(s,a,o,i,l)]}case"Where":{const s=r.cast(mX("condition",e,t,n),"bool"),a=[await r.whereAsync(s)];return s.dispose(),a}case"ListDiff":return r.setdiff1dAsync(mX("x",e,t,n),mX("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"LowerBound":{const r=mX("sortedSequence",e,t,n),a=mX("values",e,t,n);return[s.lowerBound(r,a)]}case"TopKV2":{const r=mX("x",e,t,n),a=mX("k",e,t,n),o=mX("sorted",e,t,n),i=s.topk(r,a,o);return[i.values,i.indices]}case"UpperBound":{const r=mX("sortedSequence",e,t,n),a=mX("values",e,t,n);return[s.upperBound(r,a)]}case"Unique":{const r=mX("x",e,t,n),a=s.unique(r);return[a.values,a.indices]}case"UniqueV2":{const r=mX("x",e,t,n),a=mX("axis",e,t,n),o=s.unique(r,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"ResizeBilinear":{const r=mX("images",e,t,n),a=mX("size",e,t,n),o=mX("alignCorners",e,t,n),i=mX("halfPixelCenters",e,t,n);return[s.image.resizeBilinear(r,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const r=mX("images",e,t,n),a=mX("size",e,t,n),o=mX("alignCorners",e,t,n),i=mX("halfPixelCenters",e,t,n);return[s.image.resizeNearestNeighbor(r,[a[0],a[1]],o,i)]}case"CropAndResize":{const r=mX("image",e,t,n),a=mX("boxes",e,t,n),o=mX("boxInd",e,t,n),i=mX("cropSize",e,t,n),l=mX("method",e,t,n),u=mX("extrapolationValue",e,t,n);return[s.image.cropAndResize(r,a,o,i,l,u)]}case"ImageProjectiveTransformV3":{const r=mX("images",e,t,n),a=mX("transforms",e,t,n),o=mX("outputShape",e,t,n),i=mX("fillValue",e,t,n),l=mX("interpolation",e,t,n),u=mX("fillMode",e,t,n);return[s.image.transform(r,a,l.toLowerCase(),u.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=mX("default",e,t,n);return[gX(e.name,t,n)||r];case"Placeholder":return[gX(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[wX(mX("x",e,t,n))];case"IdentityN":return mX("x",e,t,n).map((e=>wX(e)));case"Shape":return[s.tensor1d(mX("x",e,t,n).shape,"int32")];case"ShapeN":return mX("x",e,t,n).map((e=>s.tensor1d(e.shape)));case"Size":return[s.scalar(mX("x",e,t,n).size,"int32")];case"Rank":return[s.scalar(mX("x",e,t,n).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=mX("x",e,t,n),o=mX("data",e,t,n),i=mX("message",e,t,n),l=mX("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,l));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"Equal":return[s.equal(mX("a",e,t,n),mX("b",e,t,n))];case"NotEqual":return[s.notEqual(mX("a",e,t,n),mX("b",e,t,n))];case"Greater":return[s.greater(mX("a",e,t,n),mX("b",e,t,n))];case"GreaterEqual":return[s.greaterEqual(mX("a",e,t,n),mX("b",e,t,n))];case"Less":return[s.less(mX("a",e,t,n),mX("b",e,t,n))];case"LessEqual":return[s.lessEqual(mX("a",e,t,n),mX("b",e,t,n))];case"LogicalAnd":return[s.logicalAnd(mX("a",e,t,n),mX("b",e,t,n))];case"LogicalNot":return[s.logicalNot(mX("a",e,t,n))];case"LogicalOr":return[s.logicalOr(mX("a",e,t,n),mX("b",e,t,n))];case"Select":case"SelectV2":return[s.where(mX("condition",e,t,n),mX("a",e,t,n),mX("b",e,t,n))];case"BitwiseAnd":return[s.bitwiseAnd(mX("a",e,t,n),mX("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(mX("a",e,t,n),mX("b",e,t,n),mX("transposeA",e,t,n),mX("transposeB",e,t,n))];case"Einsum":return[s.einsum(mX("equation",e,t,n),...mX("tensors",e,t,n))];case"Transpose":return[s.transpose(mX("x",e,t,n),mX("perm",e,t,n))];case"_FusedMatMul":const[r,a]=mX("fusedOps",e,t,n),o="biasadd"===r,i="prelu"===a,l=mX("numArgs",e,t,n),u=mX("leakyreluAlpha",e,t,n);if(o){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=mX("args",e,t,n);return[s.fused.matMul({a:mX("a",e,t,n),b:mX("b",e,t,n),transposeA:mX("transposeA",e,t,n),transposeB:mX("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(mX("a",e,t,n),mX("numLower",e,t,n),mX("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"EuclideanNorm":return[s.euclideanNorm(mX("x",e,t,n),mX("axis",e,t,n),mX("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(mX("x",e,t,n),mX("mean",e,t,n),mX("variance",e,t,n),mX("offset",e,t,n),mX("scale",e,t,n),mX("epsilon",e,t,n))];case"LRN":return[s.localResponseNormalization(mX("x",e,t,n),mX("radius",e,t,n),mX("bias",e,t,n),mX("alpha",e,t,n),mX("beta",e,t,n))];case"Softmax":return[s.softmax(mX("x",e,t,n))];case"LogSoftmax":return[s.logSoftmax(mX("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:a}=s.raggedGather(mX("paramsNestedSplits",e,t,n),mX("paramsDenseValues",e,t,n),mX("indices",e,t,n),mX("outputRaggedRank",e,t,n));return r.concat(a)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:a}=s.raggedRange(mX("starts",e,t,n),mX("limits",e,t,n),mX("splits",e,t,n));return[r,a]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(mX("shape",e,t,n),mX("values",e,t,n),mX("defaultValue",e,t,n),mX("rowPartitionTensors",e,t,n),mX("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"Max":{const r=mX("axis",e,t,n),a=mX("keepDims",e,t,n);return[s.max(mX("x",e,t,n),r,a)]}case"Mean":{const r=mX("axis",e,t,n),a=mX("keepDims",e,t,n);return[s.mean(mX("x",e,t,n),r,a)]}case"Min":{const r=mX("axis",e,t,n),a=mX("keepDims",e,t,n);return[s.min(mX("x",e,t,n),r,a)]}case"Sum":{const r=mX("axis",e,t,n),a=mX("keepDims",e,t,n);return[s.sum(mX("x",e,t,n),r,a)]}case"All":{const r=mX("axis",e,t,n),a=mX("keepDims",e,t,n);return[s.all(mX("x",e,t,n),r,a)]}case"Any":{const r=mX("axis",e,t,n),a=mX("keepDims",e,t,n);return[s.any(mX("x",e,t,n),r,a)]}case"ArgMax":{const r=mX("axis",e,t,n);return[s.argMax(mX("x",e,t,n),r)]}case"ArgMin":{const r=mX("axis",e,t,n);return[s.argMin(mX("x",e,t,n),r)]}case"Prod":{const r=mX("axis",e,t,n),a=mX("keepDims",e,t,n);return[s.prod(mX("x",e,t,n),r,a)]}case"Cumprod":{const r=mX("axis",e,t,n),a=mX("exclusive",e,t,n),o=mX("reverse",e,t,n);return[s.cumprod(mX("x",e,t,n),r,a,o)]}case"Cumsum":{const r=mX("axis",e,t,n),a=mX("exclusive",e,t,n),o=mX("reverse",e,t,n);return[s.cumsum(mX("x",e,t,n),r,a,o)]}case"Bincount":const r=mX("x",e,t,n),a=mX("weights",e,t,n),o=mX("size",e,t,n);return[s.bincount(r,a,o)];case"DenseBincount":{const r=mX("x",e,t,n),a=mX("weights",e,t,n),o=mX("size",e,t,n),i=mX("binaryOutput",e,t,n);return[s.denseBincount(r,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=mX("n",e,t,n),a=mX("axis",e,t,n);let o=mX("tensors",e,t,n);return o=o.slice(0,r),[s.concat(o,a)]}case"Gather":{const r=mX("x",e,t,n),a=mX("indices",e,t,n);return[s.gather(r,s.cast(a,"int32"),0)]}case"GatherV2":{const r=mX("axis",e,t,n),a=mX("batchDims",e,t,n),o=mX("x",e,t,n),i=mX("indices",e,t,n);return[s.gather(o,s.cast(i,"int32"),r,a)]}case"Reverse":{const r=mX("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);const o=mX("x",e,t,n);return[s.reverse(o,a)]}case"ReverseV2":{const r=mX("axis",e,t,n),a=mX("x",e,t,n);return[s.reverse(a,r)]}case"Slice":{const r=mX("begin",e,t,n),a=mX("size",e,t,n);return[s.slice(mX("x",e,t,n),r,a)]}case"StridedSlice":{const r=mX("begin",e,t,n),a=mX("end",e,t,n),o=mX("strides",e,t,n),i=mX("beginMask",e,t,n),l=mX("endMask",e,t,n),u=mX("ellipsisMask",e,t,n),c=mX("newAxisMask",e,t,n),h=mX("shrinkAxisMask",e,t,n),d=mX("x",e,t,n);return[s.stridedSlice(d,r,a,o,i,l,u,c,h)]}case"Pack":return F_((()=>{const r=mX("axis",e,t,n),a=mX("tensors",e,t,n),o=a[0].shape,i=s.squeeze(a[0]).shape,l=a.map((e=>{const t=p$(e.shape,o);if(!t&&!p$(s.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:s.reshape(e,o)}));return[s.stack(l,r)]}));case"Unpack":{const r=mX("axis",e,t,n),a=mX("tensor",e,t,n);return s.unstack(a,r)}case"Tile":{const r=mX("reps",e,t,n);return[s.tile(mX("x",e,t,n),r)]}case"Split":case"SplitV":{const r=mX("axis",e,t,n),a=mX("numOrSizeSplits",e,t,n),o=mX("x",e,t,n);return s.split(o,a,r)}case"ScatterNd":{const r=mX("indices",e,t,n),a=mX("values",e,t,n),o=mX("shape",e,t,n);return[s.scatterND(r,a,o)]}case"GatherNd":{const r=mX("x",e,t,n),a=mX("indices",e,t,n);return[s.gatherND(r,a)]}case"SparseToDense":{const r=mX("sparseIndices",e,t,n),a=mX("outputShape",e,t,n),o=mX("sparseValues",e,t,n),i=mX("defaultValue",e,t,n);return[s.sparseToDense(r,o,a,o.dtype===i.dtype?i:s.cast(i,o.dtype))]}case"TensorScatterUpdate":{const r=mX("indices",e,t,n),a=mX("values",e,t,n),o=mX("tensor",e,t,n);return[s.tensorScatterUpdate(o,r,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=s.sparse.sparseFillEmptyRows(mX("indices",e,t,n),mX("values",e,t,n),mX("denseShape",e,t,n),mX("defaultValue",e,t,n));return[r,a,o,i]}case"SparseReshape":{const{outputIndices:r,outputShape:a}=s.sparse.sparseReshape(mX("inputIndices",e,t,n),mX("inputShape",e,t,n),mX("newShape",e,t,n));return[r,a]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(mX("data",e,t,n),mX("indices",e,t,n),mX("segmentIds",e,t,n))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(mX("data",e,t,n),mX("indices",e,t,n),mX("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"FFT":return[s.fft(mX("x",e,t,n))];case"IFFT":return[s.ifft(mX("x",e,t,n))];case"RFFT":return[s.rfft(mX("x",e,t,n))];case"IRFFT":return[s.irfft(mX("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(mX("input",e,t,n),mX("pattern",e,t,n),mX("rewrite",e,t,n),mX("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:r,nGramsSplits:a}=s.string.stringNGrams(mX("data",e,t,n),mX("dataSplits",e,t,n),mX("separator",e,t,n),mX("nGramWidths",e,t,n),mX("leftPad",e,t,n),mX("rightPad",e,t,n),mX("padWidth",e,t,n),mX("preserveShortSequences",e,t,n));return[r,a]}case"StringSplit":{const{indices:r,values:a,shape:o}=s.string.stringSplit(mX("input",e,t,n),mX("delimiter",e,t,n),mX("skipEmpty",e,t,n));return[r,a,o]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(mX("input",e,t,n),mX("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return r((()=>((e,t,n,s=R)=>{switch(e.op){case"Cast":return[s.cast(mX("x",e,t,n),mX("dtype",e,t,n))];case"ExpandDims":{const r=mX("axis",e,t,n);return[s.expandDims(mX("x",e,t,n),r)]}case"Squeeze":{const r=mX("axis",e,t,n);return[s.squeeze(mX("x",e,t,n),r)]}case"Reshape":return[s.reshape(mX("x",e,t,n),mX("shape",e,t,n))];case"EnsureShape":return[s.ensureShape(mX("x",e,t,n),mX("shape",e,t,n))];case"MirrorPad":return[s.mirrorPad(mX("x",e,t,n),mX("padding",e,t,n),mX("mode",e,t,n))];case"PadV2":case"Pad":return[s.pad(mX("x",e,t,n),mX("padding",e,t,n),mX("constantValue",e,t,n))];case"SpaceToBatchND":{const r=mX("blockShape",e,t,n),a=mX("paddings",e,t,n);return[s.spaceToBatchND(mX("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=mX("blockShape",e,t,n),a=mX("crops",e,t,n);return[s.batchToSpaceND(mX("x",e,t,n),r,a)]}case"DepthToSpace":{const r=mX("blockSize",e,t,n),a=mX("dataFormat",e,t,n).toUpperCase();return[s.depthToSpace(mX("x",e,t,n),r,a)]}case"BroadcastTo":return[s.broadcastTo(mX("x",e,t,n),mX("shape",e,t,n))];case"BroadcastArgs":return[s.broadcastArgs(mX("s0",e,t,n),mX("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=s.getHashTableHandleByName(e.name);if(null!=r)return[r];{const r=mX("keyDType",e,t,n),a=mX("valueDType",e,t,n),o=new dY(r,a);return s.addHashTable(e.name,o),[o.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const r=mX("tableHandle",e,t,n,s),a=mX("keys",e,t,n),o=mX("values",e,t,n),i=s.getHashTableById(r.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const r=mX("tableHandle",e,t,n,s),a=mX("keys",e,t,n),o=mX("defaultValue",e,t,n),i=s.getHashTableById(r.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=mX("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const a=fX(e.op);if(a&&a.customExecutor)return a.customExecutor(new sY(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return B$(a)?a.then((e=>[].concat(e))):[].concat(a)}class fY{constructor(e={},t={},n={},s={},r){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.parseNodeNameCache=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function mY(e,t,n,s){const r=new Set,a=[];let o=null,i=null;const l=new Set,u=new Set(Object.keys(e).map((e=>vX(e)[0])));s=s||[];const c=new Set(s.map((e=>vX(e.name)[0]))),h=[...t];for(;h.length>0;){const e=h.pop();(vY(e)||kY(e)||wY(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(u.has(e.name)||c.has(e.name)||(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:o,syncInputs:i}}class gY extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const xY=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),bY=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),yY=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function vY(e){return xY.has(e.op)}function kY(e){return bY.has(e.op)}function wY(e){return yY.has(e.op)}class IY{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new IY(e.functions[t],this)}))}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPARATOR)+"--"+s.join(this.SEPARATOR)}compile(e,t){const n=mY(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}const o=function(e,t){const{usedNodes:n,inputs:s}=t,r=Object.keys(s).map((e=>vX(e)[0])).map((t=>e.nodes[t])),a=e.initNodes||[],o=e=>n.has("string"==typeof e?e:e.name);function i(e){return[...new Map(e.map((e=>[e.name,e]))).values()]}const l=i([...r,...e.weights,...a]).filter(o),u=i([...l,...Object.values(e.nodes)]).filter(o),c=new Map(u.map((e=>[e.name,e]))),h={};for(const e of u){h[e.name]=h[e.name]||0;for(const t of e.children)o(t)||(h[t.name]=Number.POSITIVE_INFINITY),h[t.name]=(h[t.name]||0)+1}const d=Object.entries(h).filter((([,e])=>0===e)).map((([e])=>e)),p=[...d];for(;d.length>0;){const e=d.pop(),t=c.get(e);for(const e of t.children.filter(o))0==--h[e.name]&&(p.push(e.name),d.push(e.name))}const f=function(e,t){const n=new Map(e.map((e=>[e.name,e]))),s=t.map((e=>e.name)),r=new Set(s);for(;s.length>0;){const e=s.pop(),t=n.get(e);for(const e of t.children)n.has(e.name)&&!r.has(e.name)&&(r.add(e.name),s.push(e.name))}return e.filter((e=>r.has(e.name)))}(p.map((e=>c.get(e))),l);return function(e,t){const n=new Map(e.map(((e,t)=>[e.name,t]))),s=new Set(t.map((e=>e.name))),r=e=>s.has("string"==typeof e?e:e.name),a=new Set(e.map((e=>e.name))),o=e=>a.has("string"==typeof e?e:e.name);for(const t of e){for(const e of t.children.filter(o)){if(!n.has(e.name))throw new gY(`Child ${e.name} of node ${t.name} is unreachable.`);if(n.get(t.name)>n.get(e.name))throw new gY(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!r(t))for(const e of t.inputs){if(!n.has(e.name))throw new gY(`Input ${e.name} of node ${t.name} is unreachable.`);if(n.get(e.name)>n.get(t.name))throw new gY(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}(this.graph,n),i=function(e){const t=new Map(e.map(((e,t)=>[e.name,t]))),n=Number.MAX_SAFE_INTEGER,s=e.map(((e,t)=>vY(e)?n:t)),r=e=>{const n=s[t.get(e.name)];return null==n?-1:n},a=e.map(((e,t)=>e.children.map(r).reduce(((e,t)=>Math.max(e,t)),s[t]))),o=new Map;for(let t=0;t<e.length;++t){const s=a[t];if(s===n)continue;const r=e[t],i=e[s];o.has(i.name)||o.set(i.name,[]),o.get(i.name).push(r)}return o}(o);return{orderedNodes:o,nodeLiveUntilMap:i}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return O_(t),t}cloneTensorList(e){return e?e.map((e=>this.cloneAndKeepTensor(e))):null}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[vX(e)[0]])),r=t.map((e=>vX(e)[0])),a=new Set(r);let o=r.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const i=this.getCompilationKey(s,o);let l=this.compiledMap.get(i);null==l&&(l=this.compile(e,o),this.compiledMap.set(i,l));try{this.keepIntermediateTensors=V$().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const u={},c={};return F_((()=>{const n=new fY(this.weightMap,u,c,this.functionExecutorMap,this.parseNodeNameCache),s=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[r,a]=vX(t,n),o=[];o[a]=e[t],s[r]=o,this.keepIntermediateTensors&&(this.clonedTensorsMap[r]=this.cloneTensorList(o))}));const r=this.getFrozenTensorIds(s),{orderedNodes:o,nodeLiveUntilMap:i}=l;for(const e of o){if(s[e.name])continue;const t=pY(e,s,n,this._resourceManager);if(B$(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);s[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,s,n,r,a,i.get(e.name))}return null==this.parent&&n.dispose(r),t.map((e=>gX(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,o){if(!vY(t)&&!a.has(e)){for(const s of n[e])null!=s&&(o[s.id]=(o[s.id]||0)+t.children.length);for(const e of t.inputs){if(vY(e))continue;const t=xX(e.name,n,s);if(null!=t)for(const e of t){if(!e||e.kept||r.has(e.id))continue;const t=o[e.id];1===t?(e.dispose(),delete o[e.id]):null!=t&&o[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,s,r,a){function o(e){return vY(e)||r.has(e.name)}if(!vY(e)&&null!=a)for(const e of a){if(o(e))continue;const r=xX(e.name,t,n);for(const e of r)!e||e.kept||s.has(e.id)||e.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,s={},r={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=V$().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const a=new fY(this.weightMap,s,r,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const o=await this.executeWithControlFlow(e,a,t,n),i=t.map((e=>gX(e,o,a))),l=i.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.values(o).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),i}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[vX(e)[0]])),o=n.map((e=>vX(e)[0])),i=new Set(o);let l=o.map((e=>this.graph.nodes[e]));0===l.length&&(l=this._outputs);const{usedNodes:u,missingInputs:c,dynamicNode:h,syncInputs:d}=mY(e,l,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=vX(t),r=[];r[s]=e[t],f[n]=r}));const m={},g=this.getFrozenTensorIds(f),x={};for(;p.length>0;){const e=this.processStack(a,p,t,f,x,g,i,m,u);await Promise.all(e)}null!=h||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=l.filter((e=>!vY(e)&&!gX(e.name,f,t))).map((e=>e.name));if(b.length>0){let e="";throw null!=h&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${r}]. Consider providing the following inputs: [${c}]. ${e}`)}return f}processStack(e,t,n,s,r,a,o,i,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&mX("isConstant",e.node,s,n)&&([c]=bX(e.node.name,n)),null==s[e.node.name]){const h=pY(e.node,s,n,this._resourceManager);c||([c]=bX(e.node.name,n));const d=n.currentContext;B$(h)?u.push(h.then((u=>(s[c]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(u)),n.currentContext=d,this.checkTensorForDisposal(c,e.node,s,n,a,o,i),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(h)),this.checkTensorForDisposal(c,e.node,s,n,a,o,i),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[o]=bX(e.name,n);!r[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!gX(e,s,n)))&&(r[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!gX(e,s,n)))&&(r[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=vX(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;u$(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&u$(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const s={};for(const r in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[r];null!=a?s[a.name]=e[r]:s[r]=e[r]}return s}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=vX(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const s=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=s?s.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=vX(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class NY{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class SY{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=o){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new NY}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return B$(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new IY(VX.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=VX.Instance.transformGraph(e.modelInitializer);this.initializer=new IY(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t={};return(e instanceof XR?[e]:e).forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof XR||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const s=n[t];null!=s.resourceId&&(e[t]=this.resourceIdToCapturedInput[s.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let s=0;return this.inputNodes.reduce(((t,n)=>{var r,a,o;const i=null===(o=null===(a=null===(r=this.signature)||void 0===r?void 0:r.inputs)||void 0===a?void 0:a[n])||void 0===o?void 0:o.resourceId;return t[n]=null!=i?this.resourceIdToCapturedInput[i]:e[s++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let s=0;s<n.length;s++){const r=t[n[s]];this.resourceIdToCapturedInput[r.resourceId]=e[s]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&D_(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}function $Y(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(RY(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const o=$Y(e[a],t,n,s);r[a]=o}return s.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function CY(e,t=EY){return TY(e,t)}function TY(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(RY(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=TY(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function EY(e){return null===e?null:RY(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function RY(e){let t=!1;if(ke().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:s}=n(4977);t=e instanceof s}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof Ir)&&!(e instanceof Promise)&&!t)}function AY(e){return $Y(e,_Y)}function _Y(e){return e instanceof Ir?{value:e.clone(),recurse:!1}:RY(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class FY{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class DY extends FY{constructor(){super(DY.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}DY.INITIAL_CAPACITY=32;class OY{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new GY(this,e)}filter(e){return new VY(this,e)}map(e){return new UY(this,e)}mapAsync(e){return new HY(this,e)}serialMapAsync(e){return new HY(this,e).serial()}flatmap(e){return new KY(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new WY(this,e,t)}columnMajorBatch(e,t=!0,n=EY){return this.rowMajorBatch(e,t).map((e=>CY(e,n)))}concatenate(e,t){return new qY(new MY([this,e]),t)}take(e){return e<0||null==e?this:new zY(this,e)}skip(e){return e<0||null==e?this:new PY(this,e)}prefetch(e){return new ZY(this,e)}shuffle(e,t){return new JY(this,e,t)}serial(){return new BY(this)}}class MY extends OY{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:AY(e),done:!1}}}class LY extends OY{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class BY extends OY{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class PY extends OY{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;bo(e.value)}return this.upstream.next()}}class zY extends OY{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class WY extends OY{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class VY extends OY{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;bo(e.value)}}}class UY extends OY{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Or(e.value),n=this.transform(e.value),s=Or(n);for(const e of t)Dr(e,s)||e.dispose();return{value:n,done:!1}}}class GY extends OY{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class HY extends OY{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Or(e.value),n=await this.transform(e.value),s=Or(n);for(const e of t)Dr(e,s)||e.dispose();return{value:n,done:!1}}}class jY extends OY{constructor(){super(),this.outputQueue=new DY,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class KY extends jY{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Or(e.value),n=this.transform(e.value),s=Or(n);this.outputQueue.pushAll(n);for(const e of t)Dr(e,s)||e.dispose();return!0}}class qY extends OY{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var XY,YY;(YY=XY||(XY={}))[YY.FAIL=0]="FAIL",YY[YY.SHORTEST=1]="SHORTEST",YY[YY.LONGEST=2]="LONGEST";class ZY extends OY{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new FY(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class JY extends ZY{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=ol.alea(n||ar().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class QY{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return P(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),eZ((async()=>(await n.iterator()).columnMajorBatch(e,t,tZ)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,eZ((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,eZ((async()=>(await t.iterator()).filter((t=>xo((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return eZ((async()=>(await t.iterator()).map((t=>xo((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return eZ((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return eZ((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,eZ((async()=>{return n=(r=async()=>({value:await t.iterator(),done:!1}),new LY(r)).take(e),new qY(n,s);var n,s,r}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,eZ((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=ol.alea(t||ar().toString());return eZ((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,eZ((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function eZ(e,t=null){return new class extends QY{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function tZ(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof Ir||te(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof Ir?Cl(e):ea(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}function nZ(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&u$("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}QY.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const sZ=UL;class rZ extends r${nextDataId(){return rZ.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new s$(this,__())}write(e,t,n){this.firstUse&&(this.firstUse=!1,V$().get("IS_NODE")&&sR("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&S$(n[0])){const r=n.map((e=>RR(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?DP(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):function(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>AR(e)));return T_(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return T_(e.shape,e.dtype,t)}makeOutput(e,t,n){return __().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=ER();return e(),{kernelMs:ER()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){nZ([e],"where");const t=this.readSync(e.dataId);return sZ(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function aZ(e){return(t,n,s)=>{const r=w$(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}function oZ(e,t,n){return iZ(e,aZ(t),n)}function iZ(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:o}=s;nZ(o,e);const i=a,l=i.data.get(o.dataId).values;let u;if("string"===o.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=fz(l)}else u=l;const c=n||o.dtype,h=t(u,c,r);return i.makeTensorInfo(o.shape,c,h)}}rZ.nextDataId=0,M_("cpu",(()=>new rZ),1);const lZ=oZ(GC,(e=>e>=0?e:Math.exp(e)-1)),uZ={kernelName:GC,backendName:"cpu",kernelFunc:lZ};function cZ(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const hZ={kernelName:iT,backendName:"cpu",kernelFunc:cZ};function dZ(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;nZ([r],"leakyRelu");const o=d$(r.shape),i=n.data.get(r.dataId).values,l=k$("float32",o);for(let e=0;e<i.length;e++)l[e]=i[e]<0?a*i[e]:i[e];return n.makeTensorInfo(r.shape,"float32",l)}const pZ={kernelName:pT,backendName:"cpu",kernelFunc:dZ};function fZ(e){return(t,n,s,r,a)=>{const o=rF(t,n),i=o.length,l=E$(o),u=k$(a,d$(o)),c=t.length,h=n.length,d=E$(t),p=E$(n),f=nF(t,o),m=nF(n,o);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=L$(t,i,l),a=n.slice(-c);f.forEach((e=>a[e]=0));const o=M$(a,c,d),g=n.slice(-h);m.forEach((e=>g[e]=0));const x=M$(g,h,p);u[t]=e(s[o],r[x])}return[u,o]}}const mZ=fZ(((e,t)=>e<0?t*e:e));function gZ(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;nZ([s,r],"prelu");const a=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,[i,l]=mZ(s.shape,r.shape,a,o,"float32");return n.makeTensorInfo(l,"float32",i)}const xZ={kernelName:qT,backendName:"cpu",kernelFunc:gZ},bZ=oZ(nE,(e=>Math.max(0,e))),yZ={kernelName:nE,backendName:"cpu",kernelFunc:bZ},vZ=oZ(lE,(e=>Math.min(Math.max(0,e),6))),kZ={kernelName:lE,backendName:"cpu",kernelFunc:vZ},wZ=aZ((e=>1/(1+Math.exp(-e)))),IZ=oZ(kE,(e=>1/(1+Math.exp(-e)))),NZ={kernelName:kE,backendName:"cpu",kernelFunc:IZ};function SZ(e,t,n,s,r){if("linear"===n)return cZ({inputs:{x:t},backend:e});if("relu"===n)return bZ({inputs:{x:t},backend:e});if("elu"===n)return lZ({inputs:{x:t},backend:e});if("relu6"===n)return vZ({inputs:{x:t},backend:e});if("prelu"===n)return gZ({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return dZ({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return IZ({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function $Z(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,i=n.makeTensorInfo(s.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",o)},i}const CZ={kernelName:yC,backendName:"cpu",kernelFunc:$Z};function TZ(e,t,n="float32"){if("complex64"===n)return $Z({inputs:{real:TZ(e,t,"float32"),imag:TZ(e,t,"float32")},backend:e});const s=F$(d$(t),n);return e.makeTensorInfo(t,n,s)}function EZ(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const RZ={kernelName:eE,backendName:"cpu",kernelFunc:EZ};function AZ(e,t,n,s){if("int32"===s)return[t,"int32",Int32Array.from(e)];if("bool"===s){const s=TR([0],n),[r,a]=fZ(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[a,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function _Z(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return cZ({inputs:{x:r},backend:n});const e=TZ(n,r.shape,r.dtype),t=_Z({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=$Z({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=EZ({inputs:{input:r},backend:n}),t=_Z({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!I$(r.dtype,a)){const e=cZ({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const o=n.data.get(r.dataId).values,[i,l,u]=AZ(o,r.shape,r.dtype,a);return n.makeTensorInfo(i,l,u)}const FZ={kernelName:gC,backendName:"cpu",kernelFunc:_Z};function DZ(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a,b:o}=n,i=r;nZ([a,o],e);const l=i.data.get(a.dataId).values,u=i.data.get(o.dataId).values,c="string"===a.dtype?fz(l):l,h="string"===a.dtype?fz(u):u,d=s||a.dtype,[p,f]=t(a.shape,o.shape,c,h,d);return i.makeTensorInfo(f,d,p)}:({inputs:e,backend:r})=>{const{a,b:o}=e,i=r;if("complex64"===a.dtype||"complex64"===o.dtype){const e=_Z({inputs:{x:a},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=i.data.get(s.dataId).values,u=i.data.get(r.dataId).values,c=_Z({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),h=i.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=i.data.get(d.dataId).values,m=i.data.get(p.dataId).values,[g,x,b]=n(a.shape,o.shape,l,u,f,m),y=i.makeTensorInfo(b,"float32",g),v=i.makeTensorInfo(b,"float32",x),k=$Z({inputs:{real:y,imag:v},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(c),i.disposeIntermediateTensorInfo(y),i.disposeIntermediateTensorInfo(v),k}{const e=i.data.get(a.dataId).values,n=i.data.get(o.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,o.shape,e,n,r);return i.makeTensorInfo(u,r,l)}}}function OZ(e){return(t,n,s,r,a,o)=>{const i=rF(t,n),l=d$(i),u=i.length,c=E$(i),h=k$("float32",l),d=k$("float32",l),p=nF(t,i),f=nF(n,i),m=DP(s,r),g=DP(a,o),x=t.length,b=E$(t),y=n.length,v=E$(n);if(p.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,d[t]=r.imag}else for(let t=0;t<h.length;t++){const n=L$(t,u,c),s=n.slice(-x);p.forEach((e=>s[e]=0));const r=M$(s,x,b),a=n.slice(-y);f.forEach((e=>a[e]=0));const o=M$(a,y,v),i=e(m[2*r],m[2*r+1],g[2*o],g[2*o+1]);h[t]=i.real,d[t]=i.imag}return[h,d,i]}}const MZ=fZ(((e,t)=>e+t)),LZ=OZ(((e,t,n,s)=>({real:e+n,imag:t+s}))),BZ=DZ(Y$,MZ,LZ),PZ={kernelName:Y$,backendName:"cpu",kernelFunc:BZ};function zZ(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,o=d$(r.shape),i=b$(a,o),l=d$(i);u$(o===l,(()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const WZ={kernelName:sE,backendName:"cpu",kernelFunc:zZ};function VZ(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:o,transposeB:i}=s;nZ([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=o?r.shape[l-2]:r.shape[l-1],h=i?a.shape[u-1]:a.shape[u-2],d=o?r.shape[l-1]:r.shape[l-2],p=i?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=d$(f),x=d$(m),b=rF(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([d,p]);u$(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${o} and transposeB=${i} must match.`));const y=i?[x,p,h]:[x,h,p],v=zZ({inputs:{x:r},backend:n,attrs:{shape:o?[g,c,d]:[g,d,c]}}),k=zZ({inputs:{x:a},backend:n,attrs:{shape:y}}),w=o?v.shape[1]:v.shape[2],I=o?v.shape[2]:v.shape[1],N=i?k.shape[1]:k.shape[2],S=Math.max(g,x),$=n.data.get(v.dataId).values,C=n.data.get(k.dataId).values,T=E$(v.shape),E=E$(k.shape),[R,A,_]=o?[T[0],1,T[1]]:[T[0],T[1],1],[F,D,O]=i?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*N,L=T_([S,I,N],v.dtype),B=L.values,P=n.blockSize;for(let e=0;e<S;e++){const t=e%g,n=e%x;for(let s=0;s<I;s+=P){const r=Math.min(s+P,I);for(let a=0;a<N;a+=P){const o=Math.min(a+P,N);for(let i=0;i<w;i+=P){const l=Math.min(i+P,w);for(let u=s;u<r;u++)for(let s=a;s<o;s++){let r=0;for(let e=i;e<l;e++)r+=$[t*R+u*A+e*_]*C[e*F+s*D+n*O];B[e*M+(u*N+s)]+=r}}}}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const UZ={kernelName:hC,backendName:"cpu",kernelFunc:VZ},GZ={kernelName:eR,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const m=[];d=VZ({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),o&&(p=BZ({inputs:{a:d,b:o},backend:n}),m.push(d),d=p),c&&(f=SZ(n,d,c,i,h),m.push(d),d=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return d}};function HZ(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const jZ={kernelName:K$,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;nZ(t,"abs");let s=new Float32Array(d$(t.shape));return s=HZ(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},KZ=oZ(q$,(e=>Math.acos(e))),qZ={kernelName:q$,backendName:"cpu",kernelFunc:KZ},XZ=oZ(X$,(e=>Math.acosh(e))),YZ={kernelName:X$,backendName:"cpu",kernelFunc:XZ},ZZ={kernelName:Z$,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;nZ(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=T_(s[0].shape,s[0].dtype),o=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function JZ(e,t,n,s,r){const a=t.length,o=d$(t),i=E$(t),l=E$(r),u=k$(n,d$(r));for(let t=0;t<o;++t){const n=L$(t,a,i),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[M$(r,a,l)]=e[t]}return u}function QZ(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;nZ(r,"transpose");const o=r.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=r.shape[a[e]];const l=JZ(s.data.get(r.dataId).values,r.shape,r.dtype,a,i);return{dataId:s.write(l,i,r.dtype),shape:i,dtype:r.dtype}}const eJ={kernelName:jE,backendName:"cpu",kernelFunc:QZ},tJ={kernelName:J$,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;nZ(r,"all");const i=y$(a,r.shape);let l=i;const u=wO(l,r.shape.length);let c=r;null!=u&&(c=QZ({inputs:{x:r},backend:n,attrs:{perm:u}}),l=NO(l.length,r.shape.length)),kO("all",l,c.shape.length);const[h,d]=yO(c.shape,l),p=d$(d),f=F$(d$(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=zZ({inputs:{x:g},backend:n,attrs:{shape:vO(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},nJ={kernelName:Q$,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;nZ(r,"any");const i=y$(a,r.shape);let l=i;const u=wO(l,r.shape.length);let c=r;null!=u&&(c=QZ({inputs:{x:r},backend:n,attrs:{perm:u}}),l=NO(l.length,r.shape.length)),kO("any",l,c.shape.length);const[h,d]=yO(c.shape,l),p=d$(d),f=F$(d$(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=zZ({inputs:{x:g},backend:n,attrs:{shape:vO(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},sJ={kernelName:eC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;nZ(r,"argMax");let o=y$(a,r.shape);const i=wO(o,r.shape.length);let l=r;const u=[];null!=i&&(l=QZ({inputs:{x:r},backend:n,attrs:{perm:i}}),u.push(l),o=NO(o.length,l.shape.length)),o=[o[0]],kO("argMax",o,l.shape.length);const[c,h]=yO(l.shape,o),d=F$(d$(c),"int32"),p=d$(h),f=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*p;let n=f[t],s=0;for(let e=0;e<p;++e){const r=f[t+e];r>n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},rJ={kernelName:tC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;nZ(r,"argMin");let o=y$(a,r.shape);const i=wO(o,r.shape.length);let l=r;const u=[];null!=i&&(l=QZ({inputs:{x:r},backend:n,attrs:{perm:i}}),u.push(l),o=NO(o.length,l.shape.length)),o=[o[0]],kO("argMin",o,l.shape.length);const[c,h]=yO(l.shape,o),d=F$(d$(c),"int32"),p=d$(h),f=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*p;let n=f[t],s=0;for(let e=0;e<p;++e){const r=f[t+e];r<n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},aJ=oZ(nC,(e=>Math.asin(e))),oJ={kernelName:nC,backendName:"cpu",kernelFunc:aJ},iJ=oZ(sC,(e=>Math.asinh(e))),lJ={kernelName:sC,backendName:"cpu",kernelFunc:iJ},uJ=oZ(rC,(e=>Math.atan(e))),cJ={kernelName:rC,backendName:"cpu",kernelFunc:uJ},hJ=fZ(((e,t)=>Math.atan2(e,t))),dJ=DZ(oC,hJ),pJ={kernelName:oC,backendName:"cpu",kernelFunc:dJ},fJ=oZ(aC,(e=>Math.atanh(e))),mJ={kernelName:aC,backendName:"cpu",kernelFunc:fJ};function gJ(e,t,n,s,r,a){const o=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=T_(r.outShape,n),g=m.values,x=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],y=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*x,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let x=0;x<r.outHeight;++x){const v=x*o-d,k=Math.max(0,v),w=Math.min(r.inHeight,c+v),I=n+x*b;for(let n=0;n<r.outWidth;++n){const o=n*i-p,c=Math.max(0,o),d=Math.min(r.inWidth,h+o);let x=f,b=0,v=0;for(let n=k;n<w;n+=l){const r=m+n*s[1];for(let n=c;n<d;n+=u){const o=e[r+n*s[2]+t];"max"===a&&o>x?x=o:"avg"===a&&(b+=o,v++)}if(isNaN(x))break}g[I+n*y+t]="avg"===a?b/v:x}}}return m}function xJ(e,t,n,s,r=!1,a=!1){const o=T_(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,m=T_(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*i-p;let x=g;for(;x<0;)x+=u;const b=Math.min(s.inHeight,h+g);for(let i=0;i<s.outWidth;++i){const h=i*l-f;let p=h;for(;p<0;)p+=c;const y=Math.min(s.inWidth,d+h);let v=Number.NEGATIVE_INFINITY,k=-1;for(let n=x;n<b;n+=u){const o=n-g;for(let i=p;i<y;i+=c){const l=i-h,u=m.get(e,n,i,t);u>v&&(v=u,k=r?a?((e*s.inHeight+n)*s.inWidth+i)*s.inChannels+t:(n*s.inWidth+i)*s.inChannels+t:o*d+l)}}o.set(k,e,n,i,t)}}return o}function bJ(e,t,n,s,r,a){const o=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,x=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,y=T_(r.outShape,n),v=y.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],w=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,y=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const S=k*o-m;let $=S;for(;$<0;)$+=u;const C=Math.min(r.inDepth,d+S),T=n+k*w;for(let n=0;n<r.outHeight;++n){const o=n*i-g;let d=o;for(;d<0;)d+=c;const m=Math.min(r.inHeight,p+o),k=T+n*I;for(let n=0;n<r.outWidth;++n){const o=n*l-x;let i=o;for(;i<0;)i+=h;const p=Math.min(r.inWidth,f+o),g=k+n*N;let w=b,I=0,S=0;for(let n=$;n<C;n+=u){const r=y+n*s[1];for(let n=d;n<m;n+=c){const o=r+n*s[2];for(let n=i;n<p;n+=h){const r=e[o+n*s[3]+t];if("max"===a&&r>w?w=r:"avg"===a&&(I+=r,S++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}v[g+t]="avg"===a?I/Math.max(S,1):w}}}}return y}const yJ={kernelName:iC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;nZ(r,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;u$(yD(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=uD(r.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&p$(u.inShape,u.outShape))c=cZ({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=E$(r.shape),s=gJ(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},vJ={kernelName:uC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;nZ(r,"avgPool3d");const c=cD(r.shape,a,o,1,i,l,u),h=bJ(n.data.get(r.dataId).values,r.shape,r.dtype,E$(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},kJ={kernelName:cC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;nZ([r,a],"avgPool3DGrad");const c=cD(a.shape,o,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,x=c.dilationDepth,b=c.dilationHeight,y=c.dilationWidth,v=c.effectiveFilterDepth,k=c.effectiveFilterHeight,w=c.effectiveFilterWidth,I=v-1-c.padInfo.front,N=w-1-c.padInfo.left,S=k-1-c.padInfo.top,$=T_(a.shape,"float32"),C=1/(f*m*g),T=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-I,o=s-S,i=r-N;let l=0;for(let n=0;n<v;n+=x){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const r=(o+n)/d;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<w;n+=y){const a=(i+n)/p;a<0||a>=c.outWidth||Math.floor(a)!==a||(l+=T.get(e,s,r,a,t))}}}$.set(l*C,e,n,s,r,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},wJ={kernelName:lC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,o=a;nZ([r,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=uD(o.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,x=c.effectiveFilterHeight,b=c.effectiveFilterWidth,y=b-1-c.padInfo.left,v=x-1-c.padInfo.top,k=T_(o.shape,"float32"),w=1/(p*f),I=n.data.get(r.dataId).values,N=T_(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-v,a=s-y;let o=0;for(let n=0;n<x;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/d;r<0||r>=c.outWidth||Math.floor(r)!==r||(o+=N.get(e,s,r,t))}}k.set(o*w,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},IJ={kernelName:nT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:o,mean:i,variance:l}=t;u$(i.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),u$(null==o||i.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),u$(null==a||i.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),nZ([r,i,l,a,o],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(i.dataId).values,d=n.data.get(l.dataId).values,p=a?n.data.get(a.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,x=p.length,b=d.length,y=h.length;let v=0,k=0,w=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[v++]+(c[e]-h[k++])*p[w++]/Math.sqrt(d[I++]+u),v>=g&&(v=0),k>=y&&(k=0),w>=x&&(w=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function NJ(e,t,n,s,r){const a=HF(s,t,n),o=d$(n),i=E$(s);if(a){const n=jF(t,i);return"string"===r?e.slice(n,n+o):e.subarray(n,n+o)}const l=T_(s,r,"string"===r?fz(e):e),u=T_(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?mz(u.values):u.values}function SJ(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:o}=s;nZ(r,"slice");const[i,l]=KF(r,a,o);FF(r,i,l);const u=NJ(n.data.get(r.dataId).values,i,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const $J={kernelName:xE,backendName:"cpu",kernelFunc:SJ},CJ={kernelName:dC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:o}=s;nZ([r],"batchToSpaceND");const i=a.reduce(((e,t)=>e*t)),l=vP(r.shape,a,i),u=kP(l.length,a.length),c=wP(r.shape,a,i),h=IP(o,a.length),d=NP(c,o,a.length),p=zZ({inputs:{x:r},backend:n,attrs:{shape:l}}),f=QZ({inputs:{x:p},backend:n,attrs:{perm:u}}),m=zZ({inputs:{x:f},backend:n,attrs:{shape:c}}),g=SJ({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function TJ(e,t,n,s,r){const a=d$(s),o=F$(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(o[s]+=a>0?t[n]:1)}return o}function EJ(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],o=T_([r,n],t.dtype);for(let i=0;i<r;i++)for(let r=0;r<a;r++){const a=e.get(i,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?o.set(1,i,a):t.size>0?o.set(o.get(i,a)+t.get(i,r),i,a):o.set(o.get(i,a)+1,i,a))}return o}const RJ={kernelName:pC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:o}=s,i=TJ(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,i)}},AJ=fZ(((e,t)=>e&t)),_J=DZ(fC,AJ),FJ={kernelName:fC,backendName:"cpu",kernelFunc:_J},DJ={kernelName:mC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,i=rF(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},OJ=aZ((e=>Math.ceil(e))),MJ=iZ(xC,OJ),LJ={kernelName:xC,backendName:"cpu",kernelFunc:MJ},BJ=oZ(bC,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),PJ={kernelName:bC,backendName:"cpu",kernelFunc:BJ},zJ={kernelName:vC,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(d$(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,o=r.complexTensorInfos.imag,i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function WJ(e,t,n,s){const r=w$(n,d$(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=d$(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?fz(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[i+t]=a[o++]}s+=e.shape[1]}))}return r}function VJ(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const UJ={kernelName:uT,backendName:"cpu",kernelFunc:VJ};function GJ(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=y$(r,t[0].shape)[0];cP(t.map((e=>e.shape)),a);let o=hP(t.map((e=>e.shape)),a);if(0===d$(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>d$(e.shape)>0));if(1===i.length)return cZ({inputs:{x:i[0]},backend:n});if("complex64"===i[0].dtype){const e=i.map((e=>EZ({inputs:{input:e},backend:n}))),t=i.map((e=>VJ({inputs:{input:e},backend:n}))),s=GJ({inputs:e,backend:n,attrs:{axis:a}}),r=GJ({inputs:t,backend:n,attrs:{axis:a}}),o=$Z({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),o}const l=i.map((e=>{const t=d$(e.shape.slice(a));return zZ({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=hP(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=WJ(u,o,t[0].dtype,c),d=hP(i.map((e=>e.shape)),a),p=n.makeTensorInfo(d,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}const HJ={kernelName:kC,backendName:"cpu",kernelFunc:GJ};function jJ(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;nZ([r,a],"conv2d");const h=kD(l),d=hD(r.shape,a.shape,o,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,x=d.padInfo.left,b=d.padInfo.top,y="channelsLast"===d.dataFormat,v=new HR(d.outShape,r.dtype),k=E$(r.shape),w=E$(a.shape),I=k[0],N=y?k[1]:k[2],S=y?k[2]:1,$=y?1:k[1],C=v.strides[0],T=y?v.strides[1]:v.strides[2],E=y?v.strides[2]:1,R=y?1:v.strides[1],A=n.data.get(r.dataId).values,_=n.data.get(a.dataId).values,F=v.values;for(let e=0;e<d.batchSize;++e){const t=e*I,n=e*C;for(let e=0;e<d.outHeight;++e){const s=n+e*T,r=e*d.strideHeight-b;for(let e=0;e<p;++e){const n=r+e*m;if(n<0||n>=d.inHeight)continue;const a=e*w[0],o=t+n*N;for(let e=0;e<d.outWidth;++e){const t=s+e*E,n=e*d.strideWidth-x;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=d.inWidth)continue;const r=o+s*S;let i=a+e*w[1];for(let e=0;e<d.inChannels;++e){const n=A[r+e*$];for(let e=0;e<d.outChannels;++e)F[t+e*R]+=n*_[i+e];i+=d.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,F)}const KJ={kernelName:wC,backendName:"cpu",kernelFunc:jJ},qJ={kernelName:IC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;nZ([r,a],"conv2dBackpropFilter");const h=kD(l),d=hD(r.shape,c,o,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,x="channelsLast"===d.dataFormat,b=new HR(d.filterShape,"float32"),y=d.padInfo.left,v=d.padInfo.top,k=n.data.get(r.dataId).values,w=n.data.get(a.dataId).values,I=new HR(r.shape,r.dtype,k),N=new HR(a.shape,a.dtype,w);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((v-e)/p)),n=Math.min(d.outHeight,(d.inHeight+v-e)/p);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((y-s)/f)),a=Math.min(d.outWidth,(d.inWidth+y-s)/f);for(let o=0;o<d.inChannels;++o)for(let i=0;i<d.outChannels;++i){let l=0;for(let u=0;u<d.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*p-v;for(let e=r;e<a;++e){const n=s+e*f-y;l+=x?I.get(u,t,n,o)*N.get(u,c,e,i):I.get(u,o,t,n)*N.get(u,i,c,e)}}b.set(l,e,s,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},XJ={kernelName:NC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;nZ([r,a],"conv2dBackpropInput");const h=E$(a.shape),d=E$(r.shape);let p=kD(u);const f=hD(o,a.shape,i,1,l,c,!1,p),m=new HR(f.inShape,"float32"),g=m.values,x=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[y,v,k]=h,{batchSize:w,filterHeight:I,filterWidth:N,inChannels:S,inHeight:$,inWidth:C,outChannels:T,outHeight:E,outWidth:R,strideHeight:A,strideWidth:_}=f;p=f.dataFormat;const F=I-1-f.padInfo.top,D=N-1-f.padInfo.left,O="channelsLast"===p,M=m.strides[0],L=O?m.strides[1]:m.strides[2],B=O?m.strides[2]:1,P=O?1:m.strides[1],z=d[0],W=O?d[1]:d[2],V=O?d[2]:1,U=O?1:d[1];for(let e=0;e<w;++e)for(let t=0;t<S;++t)for(let n=0;n<$;++n){const s=n-F,r=Math.max(0,Math.ceil(s/A)),a=Math.min(E,(I+s)/A);for(let o=0;o<C;++o){const i=o-D,l=Math.max(0,Math.ceil(i/_)),u=Math.min(R,(N+i)/_);let c=0;for(let n=r;n<a;++n){const r=n*A-s;for(let s=l;s<u;++s){const a=z*e+W*n+V*s,o=y*(I-1-r)+v*(N-1-(s*_-i))+k*t;for(let e=0;e<T;++e)c+=x[a+U*e]*b[o+e]}}g[M*e+L*n+B*o+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},YJ={kernelName:SC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s;nZ([r,a],"conv3d");const u=dD(r.shape,a.shape,o,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=u,x=g.front,b=g.left,y=g.top,v=new HR(u.outShape,r.dtype),k=n.data.get(r.dataId).values,w=n.data.get(a.dataId).values,I=v.values,N=E$(r.shape),S=E$(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*v.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*v.strides[1],r=e*u.strideDepth-x;for(let e=0;e<c;++e){const n=r+e*p;if(n<0||n>=u.inDepth)continue;const a=e*S[0],o=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*v.strides[2],n=e*u.strideHeight-y;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*S[1],i=o+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<d;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*S[2],o=i+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[o+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*w[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},ZJ={kernelName:$C,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,pad:i,filterShape:l}=s;nZ([r,a],"conv3dBackpropFilterV2");const u=E$(r.shape),c=E$(a.shape),h=dD(r.shape,l,o,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,x=h.filterWidth,b=new HR(h.filterShape,"float32"),y=b.values,[v,k,w,I]=b.strides,N=n.data.get(a.dataId).values,[S,$,C,T]=c,E=n.data.get(r.dataId).values,[R,A,_,F]=u,D=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((D-e)/d)),n=Math.min(h.outDepth,(h.inDepth+D-e)/d),s=e*v;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/p)),o=Math.min(h.outHeight,(h.inHeight+M-r)/p),i=r*k+s;for(let s=0;s<x;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*w+i;for(let i=0;i<h.inChannels;++i){const m=i*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*R,x=m*S;for(let m=t;m<n;++m){const t=(e+m*d-D)*A+h,n=m*$+x;for(let e=a;e<o;++e){const a=(r+e*p-M)*_+t,o=e*C+n;for(let e=l;e<u;++e){const t=e*T+o;g+=E[(s+e*f-O)*F+a+i]*N[t+c]}}}}y[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},JJ={kernelName:CC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:o,strides:i,inputShape:l}=s;nZ([r],"conv3dBackpropInputV2");const u=E$(r.shape),c=E$(a.shape),h=dD(l,a.shape,i,1,o),d=new HR(h.inShape,"float32"),p=d.values,[f,m,g,x]=d.strides,b=n.data.get(r.dataId).values,[y,v,k,w]=u,I=n.data.get(a.dataId).values,[N,S,$,C]=c,{batchSize:T,filterDepth:E,filterHeight:R,filterWidth:A,inChannels:_,inDepth:F,inHeight:D,inWidth:O,outChannels:M,outDepth:L,outHeight:B,outWidth:P,strideDepth:z,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=R-1-h.padInfo.top,H=A-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<_;++t)for(let n=0;n<F;++n){const s=n-U,r=Math.max(0,Math.ceil(s/z)),a=Math.min(L,(E+s)/z);for(let o=0;o<D;++o){const i=o-G,l=Math.max(0,Math.ceil(i/W)),u=Math.min(B,(R+i)/W);for(let c=0;c<O;++c){const h=c-H,d=Math.max(0,Math.ceil(h/V)),T=Math.min(P,(A+h)/V);let _=0;for(let n=r;n<a;++n){const r=n*z-s;for(let s=l;s<u;++s){const a=s*W-i;for(let o=d;o<T;++o){const i=y*e+v*n+k*s+w*o,l=N*(E-1-r)+S*(R-1-a)+$*(A-1-(o*V-h))+C*t;for(let e=0;e<M;++e)_+=b[i+e]*I[l+e]}}}p[f*e+m*n+g*o+x*c+t]=_}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},QJ=oZ(TC,(e=>Math.cos(e))),eQ={kernelName:TC,backendName:"cpu",kernelFunc:QJ},tQ=oZ(EC,(e=>Math.cosh(e))),nQ={kernelName:EC,backendName:"cpu",kernelFunc:tQ},sQ={kernelName:_C,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=a.shape[0],[m,g]=i,x=T_([f,m,g,p],"float32"),b=n.data.get(a.dataId).values,y=n.data.get(o.dataId).values,v=n.data.get(r.dataId).values,k=E$(r.shape),w=E$(x.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],o=y[e];if(o>=c)continue;const i=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(d-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*i:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<p;s++){const r=s+n*w[2]+t*w[1]+e*w[0];x.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),i=c-n;for(let l=0;l<g;l++){const c=g>1?s*(d-1)+l*f:.5*(s+a)*(d-1);if(c<0||c>d-1){for(let n=0;n<p;n++){const s=n+l*w[2]+t*w[1]+e*w[0];x.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<p;s++){let a=s+h*k[2]+n*k[1]+o*k[0];const u=v[a];a=s+m*k[2]+n*k[1]+o*k[0];const c=v[a];a=s+h*k[2]+r*k[1]+o*k[0];const d=v[a];a=s+m*k[2]+r*k[1]+o*k[0];const p=u+(c-u)*b,f=d+(v[a]-d)*b;a=s+l*w[2]+t*w[1]+e*w[0],x.values[a]=p+(f-p)*i}}}else for(let n=0;n<g;++n){const r=g>1?s*(d-1)+n*f:.5*(s+a)*(d-1);if(r<0||r>d-1){for(let s=0;s<p;s++){const r=s+n*w[2]+t*w[1]+e*w[0];x.values[r]=u}continue}const i=Math.round(r),l=Math.round(c);for(let s=0;s<p;s++){const r=s+i*k[2]+l*k[1]+o*k[0],a=s+n*w[2]+t*w[1]+e*w[0];x.values[a]=v[r]}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},rQ={kernelName:RC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;nZ(r,"cumprod");const l=wO([a],r.shape.length);let u=r;null!=l&&(u=QZ({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=NO(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=rA(u.dtype,"int32"),d=_$(d$(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<p.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=o?1:p[n];else{const s=m(e,t-1);d[n]=o?p[s]*d[s]:p[n]*d[s]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=QZ({inputs:{x:g},backend:n,attrs:{perm:IO(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},aQ={kernelName:AC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;nZ(r,"cumsum");const l=wO([a],r.shape.length);let u=r;null!=l&&(u=QZ({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=NO(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=rA(u.dtype,"int32"),d=F$(d$(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<p.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=o?0:p[n];else{const s=m(e,t-1);d[n]=o?p[s]+d[s]:p[n]+d[s]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const e=QZ({inputs:{x:g},backend:n,attrs:{perm:IO(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},oQ={kernelName:FC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:o,binaryOutput:i}=s;if(1===r.shape.length){const e=TJ(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,e)}if(2===r.shape.length){const e=EJ(n.bufferSync(r),n.bufferSync(a),o,i);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},iQ={kernelName:DC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:o}=s;u$("NHWC"===o,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`));const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,d=u*a,p=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(i*h*d*p);let g=0;for(let e=0;e<i;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<d;++t){const r=Math.floor(t/a),o=(s*a+t%a)*p;for(let t=0;t<p;++t){const s=t+o+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([i,h,d,p],r.dtype,m)}};function lQ(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;nZ([r,a],"depthwiseConv2DNative");const c=E$(r.shape),h=E$(a.shape);let d=l;null==d&&(d=[1,1]),u$(yD(o,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`));const p=hD(r.shape,a.shape,o,d,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:x,padInfo:b}=p,y=b.left,v=b.top,k=p.outChannels/p.inChannels,w=new HR(p.outShape,r.dtype),I=n.data.get(r.dataId).values,N=n.data.get(a.dataId).values,S=w.values;for(let e=0;e<p.batchSize;++e){const t=e*c[0],n=e*w.strides[0];for(let e=0;e<p.outHeight;++e){const s=n+e*w.strides[1],r=e*p.strideHeight-v;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=p.inHeight)continue;const a=e*h[0],o=t+n*c[1];for(let e=0;e<p.outWidth;++e){const t=s+e*w.strides[2],n=e*p.strideWidth-y;for(let e=0;e<m;++e){const s=n+e*x;if(s<0||s>=p.inWidth)continue;const r=a+e*h[1],i=o+s*p.inChannels;let l=t,u=r;for(let e=0;e<p.inChannels;++e){const t=I[i+e];for(let e=0;e<k;++e)S[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}const uQ={kernelName:OC,backendName:"cpu",kernelFunc:lQ},cQ={kernelName:MC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;nZ([r,a],"depthwiseConv2dNativeBackpropFilter");const h=hD(r.shape,c,o,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new HR(h.filterShape,"float32"),x=h.padInfo.left,b=h.padInfo.top,y=h.outChannels/h.inChannels,v=n.data.get(r.dataId).values,k=new HR(r.shape,r.dtype,v),w=n.data.get(a.dataId).values,I=new HR(a.shape,a.dtype,w);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/d)),n=Math.min(h.outHeight,(h.inHeight+b-e)/d);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((x-s)/p)),a=Math.min(h.outWidth,(h.inWidth+x-s)/p);for(let o=0;o<h.outChannels;++o){const i=Math.trunc(o/y),l=o%y;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*d-b;for(let e=r;e<a;++e){const n=s+e*p-x;u+=k.get(l,t,n,i)*I.get(l,c,e,o)}}g.set(u,e,s,i,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},hQ={kernelName:LC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;nZ([r,a],"depthwiseConv2DNativeBackpropInput");const h=E$(r.shape),d=E$(a.shape),p=hD(c,a.shape,o,i,l,u,!0),f=new HR(p.inShape,"float32"),m=f.values,[g,x,b]=f.strides,y=n.data.get(r.dataId).values,[v,k,w]=h,I=n.data.get(a.dataId).values,[N,S,$]=d,{batchSize:C,filterHeight:T,filterWidth:E,inChannels:R,inHeight:A,inWidth:_,outChannels:F,outHeight:D,outWidth:O,strideHeight:M,strideWidth:L}=p,B=T-1-p.padInfo.top,P=E-1-p.padInfo.left,z=F/R;for(let e=0;e<C;++e)for(let t=0;t<R;++t)for(let n=0;n<A;++n){const s=n-B,r=Math.max(0,Math.ceil(s/M)),a=Math.min(D,(T+s)/M);for(let o=0;o<_;++o){const i=o-P,l=Math.max(0,Math.ceil(i/L)),u=Math.min(O,(E+i)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=v*e+k*n+w*s,o=N*(T-1-r)+S*(E-1-(s*L-i))+$*t;for(let e=0;e<z;++e)c+=y[a+(t*z+e)]*I[o+e]}}m[g*e+x*n+b*o+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},dQ={kernelName:BC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=d$(s.shape),a=n.data.get(s.dataId).values,o=T_([r,r],s.dtype),i=o.values;for(let e=0;e<a.length;e++)i[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,o.dtype,o.values)}},pQ={kernelName:PC,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:o,dilations:i}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:x,outWidth:b,padInfo:y,strideHeight:v,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:$}=lD(s.shape,r.shape,a,o,"NHWC",i),C=d$($),T=$.length,E=w$(s.dtype,C);for(let e=0;e<p;++e)for(let t=0;t<x;++t){const n=t*v-y.top;for(let a=0;a<b;++a){const o=a*k-y.left;for(let i=0;i<g;++i){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<w;++t){const a=n+t*N;if(a>=0&&a<f)for(let n=0;n<I;++n){const p=o+n*S;if(p>=0&&p<m){const o=M$([e,a,p,i],c,E$(s.shape)),f=M$([t,n,i],d,E$(r.shape)),m=u[o]+h[f];m>l&&(l=m)}}}E[M$([e,t,a,i],T,E$($))]=l}}}return{dataId:l.write(TR(E,s.dtype),$,s.dtype),shape:$,dtype:s.dtype}}},fQ={kernelName:WC,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=A$(s.shape,u.data.get(s.dataId).values),h=A$(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:x,padInfo:b,strideHeight:y,strideWidth:v,filterHeight:k,filterWidth:w,dilationHeight:I,dilationWidth:N,outShape:S}=lD(s.shape,r.shape,o,i,"NHWC",l);u$(a.rank===S.length,(()=>`Error in ${WC}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const $=A$(S,u.data.get(a.dataId).values),C=D$(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*y-b.top;for(let s=0;s<x;++s){const r=s*v-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=0,l=0;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<p)for(let n=0;n<w;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>o&&(o=r,i=t,l=n)}}}C[i][l][a]+=$[e][t][s][a]}}}return{dataId:u.write(TR(C,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},mQ={kernelName:zC,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:o,pad:i,dilations:l}=n,u=t,c=A$(s.shape,u.data.get(s.dataId).values),h=A$(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:x,padInfo:b,strideHeight:y,strideWidth:v,filterHeight:k,filterWidth:w,dilationHeight:I,dilationWidth:N,outShape:S}=lD(s.shape,r.shape,o,i,"NHWC",l);u$(a.rank===S.length,(()=>`Error in ${zC}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const $=A$(S,u.data.get(a.dataId).values),C=D$(s.shape,s.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*y-b.top;for(let s=0;s<x;++s){const r=s*v-b.left;for(let a=0;a<m;++a){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,l=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<p)for(let n=0;n<w;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>o&&(o=r,i=s,l=u)}}}C[e][i][l][a]+=$[e][t][s][a]}}}return{dataId:u.write(TR(C,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},gQ={kernelName:"Draw",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r}=t,{canvas:a,options:o}=s,{contextOptions:i,imageOptions:l}=o||{},u=(null==l?void 0:l.alpha)||1,c=(null==i?void 0:i.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);const h=a.getContext(c,(null==i?void 0:i.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],m=n.data.get(r.dataId).values,g="float32"===r.dtype?255:1,x=new Uint8ClampedArray(p*d*4);for(let e=0;e<d*p;++e){const t=[0,0,0,255*u];for(let n=0;n<f;n++){const s=m[e*f+n];if("float32"===r.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if("int32"===r.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===f?(t[0]=s*g,t[1]=s*g,t[2]=s*g):t[n]=s*g}const n=4*e;x[n+0]=Math.round(t[0]),x[n+1]=Math.round(t[1]),x[n+2]=Math.round(t[2]),x[n+3]=Math.round(t[3])}a.width=p,a.height=d;const b=new ImageData(x,p,d);return h.putImageData(b,0,0),r}},xQ=fZ(((e,t)=>e*t)),bQ=OZ(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),yQ=DZ(LT,xQ,bQ),vQ={kernelName:LT,backendName:"cpu",kernelFunc:yQ};function kQ(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;let i;nZ(r,"sum"),i="bool"===r.dtype?_Z({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):cZ({inputs:{x:r},backend:n});const l=i.shape.length,u=y$(a,i.shape),c=wO(u,l);let h=u,d=i;null!=c&&(d=QZ({inputs:{x:i},backend:n,attrs:{perm:c}}),h=NO(h.length,l)),kO("sum",h,d.shape.length);const[p,f]=yO(d.shape,h);let m=TZ(n,p,rA(d.dtype,"int32"));const g=d$(f),x=n.data.get(m.dataId).values,b=n.data.get(d.dataId).values;for(let e=0;e<x.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];x[e]=n}if(o){const e=m;m=zZ({inputs:{x:m},backend:n,attrs:{shape:vO(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=c&&n.disposeIntermediateTensorInfo(d),m}const wQ={kernelName:NE,backendName:"cpu",kernelFunc:kQ},IQ={kernelName:UC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:o,summedDims:i,idDims:l}=jP(r,a.length);qP(o.length,l,a);const{path:u,steps:c}=XP(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=KP(p,l[t]);let r;YP(e)?r=a[t]:(r=QZ({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const o=r.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);p$(r.shape,o)||(r=zZ({inputs:{x:r},backend:n,attrs:{shape:o}}),f.push(r)),null===d?d=r:(d=yQ({inputs:{a:r,b:d},backend:n}),f.push(d))}e<h-1&&(u[e]>=0&&(d=kQ({inputs:{x:d},backend:n,attrs:{axis:u[e]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},NQ={kernelName:HC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;nZ([s,r],"eluGrad");const a=new Float32Array(d$(r.shape)),o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];a[e]=t>=0?i[e]:i[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},SQ=fZ(((e,t)=>e===t?1:0)),$Q=DZ(KC,SQ,null,"bool"),CQ={kernelName:KC,backendName:"cpu",kernelFunc:$Q},TQ=TP,EQ=EP,RQ=RP,AQ=AP,_Q=_P,FQ=FP,DQ=oZ(jC,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+TQ*n);return t*(1-((((FQ*s+_Q)*s+AQ)*s+RQ)*s+EQ)*s*Math.exp(-n*n))})),OQ={kernelName:jC,backendName:"cpu",kernelFunc:DQ},MQ=aZ((e=>Math.exp(e))),LQ=iZ(qC,MQ,"float32"),BQ={kernelName:qC,backendName:"cpu",kernelFunc:LQ};function PQ(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,o=r.shape.length,i=r.shape.slice();let l=a;return a<0&&(u$(-(o+1)<=a,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+a+1),i.splice(l,0,1),zZ({inputs:{x:r},backend:n,attrs:{shape:i}})}const zQ={kernelName:XC,backendName:"cpu",kernelFunc:PQ},WQ=aZ((e=>Math.expm1(e))),VQ=iZ(YC,WQ),UQ={kernelName:YC,backendName:"cpu",kernelFunc:VQ},GQ=fZ(((e,t)=>e/t)),HQ=DZ(VC,GQ),jQ={kernelName:VC,backendName:"cpu",kernelFunc:HQ},KQ=fZ(((e,t)=>e-t)),qQ=OZ(((e,t,n,s)=>({real:e-n,imag:t-s}))),XQ=DZ(zE,KQ,qQ),YQ={kernelName:zE,backendName:"cpu",kernelFunc:XQ};function ZQ(e,t,n){const s=e.shape,r=s[0],a=s[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,l=o.complexTensorInfos.imag,u=[r,a],c=d$(u),h=k$("float32",c),d=k$("float32",c);for(let e=0;e<r;e++){const s=SJ({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=SJ({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),o=$Z({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=JQ(o,t,n),p=DP(u,c);for(let t=0;t<a;t++){const n=BP(p,t);h[e*a+t]=n.real,d[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(o)}const p=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",d),m=$Z({inputs:{real:p,imag:f},backend:n});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}function JQ(e,t,n){const s=d$(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,o=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((i=s)&i-1)){const r=QQ(a,o,s,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",r.real),t=n.makeTensorInfo(i,"float32",r.imag),a=n.makeTensorInfo([],"float32",CR(s,"float32")),o=cZ({inputs:{x:a},backend:n}),l=jQ.kernelFunc({inputs:{a:e,b:a},backend:n}),u=jQ.kernelFunc({inputs:{a:t,b:o},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,o=0;for(let s=0;s<t;s++){const i=WP(r*s,t,n),l=BP(e,s);a+=l.real*i.real-l.imag*i.imag,o+=l.real*i.imag+l.imag*i.real}n&&(a/=t,o/=t),PP(s,a,o,r)}return s}(DP(a,o),s,t);return OP(e)}var i}function QQ(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=DP(e,t),o=n/2,i=MP(a),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=$Z({inputs:{real:h,imag:d},backend:r}),f=LP(a),m=f.real,g=f.imag,x=[m.length],b=r.makeTensorInfo(x,"float32",m),y=r.makeTensorInfo(x,"float32",g),v=$Z({inputs:{real:b,imag:y},backend:r}),k=QQ(l,u,o,s,r),w=k.real,I=k.imag,N=[w.length],S=r.makeTensorInfo(N,"float32",w),$=r.makeTensorInfo(N,"float32",I),C=$Z({inputs:{real:S,imag:$},backend:r}),T=QQ(m,g,o,s,r),E=T.real,R=T.imag,A=[E.length],_=r.makeTensorInfo(A,"float32",E),F=r.makeTensorInfo(A,"float32",R),D=$Z({inputs:{real:_,imag:F},backend:r}),O=zP(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),B=r.makeTensorInfo(M,"float32",O.imag),P=$Z({inputs:{real:L,imag:B},backend:r}),z=yQ({inputs:{a:P,b:D},backend:r}),W=BZ({inputs:{a:C,b:z},backend:r}),V=XQ({inputs:{a:C,b:z},backend:r}),U=EZ({inputs:{input:W},backend:r}),G=EZ({inputs:{input:V},backend:r}),H=VJ({inputs:{input:W},backend:r}),j=VJ({inputs:{input:V},backend:r}),K=GJ({inputs:[U,G],backend:r,attrs:{axis:0}}),q=GJ({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(K.dataId).values,Y=r.data.get(q.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(y),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(q),{real:X,imag:Y}}const e0={kernelName:ZC,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=d$(s.shape),a=s.shape[s.shape.length-1],o=zZ({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),i=ZQ(o,!1,n),l=zZ({inputs:{x:i},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}};function t0(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,o=a||$$(r),i=w$(o,d$(s));return function(e,t,n){e.fill(t)}(i,r),t.makeTensorInfo(s,o,i)}const n0={kernelName:JC,backendName:"cpu",kernelFunc:t0},s0={kernelName:QC,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=k$(s.dtype,d$(s.shape)),[o,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<o;e++){const t=e*l*i*u;for(let e=0;e<i;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let r=0;r<u;r++){const o=Math.round(l-e-1),i=t+n+s+r;let h=c[i];o>=0&&o<l&&(h=c[t+n+o*u+r]),a[i]=h}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},r0=aZ((e=>Math.floor(e))),a0=iZ(eT,r0),o0={kernelName:eT,backendName:"cpu",kernelFunc:a0},i0=fZ(((e,t)=>Math.floor(e/t))),l0=DZ(tT,i0,null,"int32"),u0={kernelName:tT,backendName:"cpu",kernelFunc:l0},c0={kernelName:tR,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=jJ({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const e=m;if("NCHW"===c&&1===o.shape.length&&1!==o.shape[0]){const e=zZ({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=BZ({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=BZ({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(p){const e=m;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const e=zZ({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=SZ(n,m,p,e,f),n.disposeIntermediateTensorInfo(e)}else m=SZ(n,m,p,i,f);n.disposeIntermediateTensorInfo(e)}return m}},h0={kernelName:nR,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=lQ({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(o){const e=m;m=BZ({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(p){const e=m;m=SZ(n,m,p,i,f),n.disposeIntermediateTensorInfo(e)}return m}};function d0(e,t,n,s,r,a,o,i,l){const u=T_([s,a],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<r;t++){const a=e[n*r+t];c+=a*o[t],s.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${s} does not index into ${i}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}const p0={kernelName:rT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=d$(s.shape),o=r.shape,i=o[o.length-1],[l,u,c,h]=SP(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const d=d0(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,i,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,d.values)}};function f0(e,t,n){const s=T_(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],o=r[2],i=t.locToIndex([a,o]);r[2]=t.values[i];const l=e.locToIndex(r);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const m0={kernelName:sT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:o,batchDims:i}=s;nZ([r,a],"gatherV2");const l=y$(o,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let e=0;e<u.length;++e){const t=u[e];u$(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=i;null==i&&(h=0);const d=d$(a.shape),p=pz(r,a,l,h),f=zZ({inputs:{x:r},backend:n,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),m=zZ({inputs:{x:a},backend:n,attrs:{shape:[p.batchSize,d/p.batchSize]}}),g=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],x=n.bufferSync(m),b=f0(n.bufferSync(f),x,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(p.outputShape,b.dtype,b.values)}},g0=fZ(((e,t)=>e>t?1:0)),x0=DZ(aT,g0,null,"bool"),b0={kernelName:aT,backendName:"cpu",kernelFunc:x0},y0=fZ(((e,t)=>e>=t?1:0)),v0=DZ(oT,y0,null,"bool"),k0={kernelName:oT,backendName:"cpu",kernelFunc:v0},w0={kernelName:lT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=d$(s.shape),a=s.shape[s.shape.length-1],o=zZ({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),i=ZQ(o,!0,n),l=zZ({inputs:{x:i},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),l}},I0=oZ(cT,(e=>Number.isFinite(e)?1:0),"bool"),N0={kernelName:cT,backendName:"cpu",kernelFunc:I0},S0=oZ(hT,(e=>Math.abs(e)===1/0?1:0),"bool"),$0={kernelName:hT,backendName:"cpu",kernelFunc:S0},C0=oZ(dT,(e=>Number.isNaN(e)?1:0),"bool"),T0={kernelName:dT,backendName:"cpu",kernelFunc:C0},E0=fZ(((e,t)=>e<t?1:0)),R0=DZ(fT,E0,null,"bool"),A0={kernelName:fT,backendName:"cpu",kernelFunc:R0},_0=fZ(((e,t)=>e<=t?1:0)),F0=DZ(mT,_0,null,"bool"),D0={kernelName:mT,backendName:"cpu",kernelFunc:F0};function O0(e,t,n){const s=(t-e)/(n-1),r=F$(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const M0={kernelName:gT,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,o=O0(s,r,a);return t.makeTensorInfo([o.length],"float32",o)}},L0=aZ((e=>Math.log(e))),B0=iZ(xT,L0),P0={kernelName:xT,backendName:"cpu",kernelFunc:B0},z0=oZ(bT,(e=>Math.log1p(e))),W0={kernelName:bT,backendName:"cpu",kernelFunc:z0},V0=fZ(((e,t)=>e&&t)),U0=DZ(yT,V0,null,"bool"),G0={kernelName:yT,backendName:"cpu",kernelFunc:U0},H0=oZ(vT,(e=>e?0:1),"bool"),j0={kernelName:vT,backendName:"cpu",kernelFunc:H0},K0=fZ(((e,t)=>e||t)),q0=DZ(kT,K0,null,"bool"),X0={kernelName:kT,backendName:"cpu",kernelFunc:q0},Y0={kernelName:wT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=s;nZ(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,d=d$(r.shape),p=new Float32Array(d);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<d;e++){const t=f(e),n=h[e]*Math.pow(o+i*t,-l);p[e]=n}return n.makeTensorInfo(r.shape,r.dtype,p)}},Z0={kernelName:IT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;nZ(o,"LRNGrad");const h=d$(o.shape),d=o.shape[3],p=n.data.get(o.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),x=h;for(let e=0;e<x;e++){const t=e%d,n=e-t+Math.max(0,t-i),s=e-t+Math.min(d,t+i+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=p[e],g[t]+=n}}return n.makeTensorInfo(o.shape,r.dtype,g)}};function J0(e,t,n,s){const r=k$(s,d$(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>a)&&(a=t)}r[n]=a}return r}function Q0(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:o}=s,i=n;let l=r.shape;const u=l.length,c=y$(a,l);let h=c;const d=wO(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[d[t]];p=JZ(p,l,r.dtype,d,e),h=NO(h.length,u),l=e}nZ(r,"max"),kO("max",h,u);const[f,m]=yO(l,h),g=J0(p,d$(m),f,r.dtype),x=i.write(g,f,r.dtype);let b=f;return o&&(b=vO(f,c)),{dataId:x,shape:b,dtype:r.dtype}}const e1={kernelName:NT,backendName:"cpu",kernelFunc:Q0},t1=fZ(((e,t)=>Math.max(e,t))),n1=DZ(ST,t1),s1={kernelName:ST,backendName:"cpu",kernelFunc:n1},r1={kernelName:$T,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;nZ(r,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;u$(yD(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=uD(r.shape,a,o,1,i,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&p$(u.inShape,u.outShape))c=cZ({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=E$(r.shape),s=gJ(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},a1={kernelName:TT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s;nZ(r,"maxPool3d");const c=cD(r.shape,a,o,1,i,l,u),h=bJ(n.data.get(r.dataId).values,r.shape,r.dtype,E$(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},o1={kernelName:ET,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;nZ([r,a],"maxPool3DGrad");const c=cD(a.shape,o,i,1,l,u),h=function(e,t){const n=T_(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let x=0;x<t.outDepth;++x){const b=x*s-d;let y=b;for(;y<0;)y+=o;const v=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-p;let d=u;for(;d<0;)d+=i;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const p=r*a-f;let w=p;for(;w<0;)w+=l;const I=Math.min(t.inWidth,h+p);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=y;t<v;t+=o){const n=t-b;for(let s=d;s<k;s+=i){const r=s-u;for(let a=w;a<I;a+=l){const o=a-p,i=e.get(m,t,s,a,g);i>=N&&(N=i,S=n*c*h+r*c+o)}}}n.set(S,m,x,s,r,g)}}}return n}(n.bufferSync(a),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,y=c.effectiveFilterHeight,v=c.effectiveFilterWidth,k=b-1-c.padInfo.front,w=v-1-c.padInfo.left,I=y-1-c.padInfo.top,N=T_(a.shape,"float32"),S=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-k,o=s-I,i=r-w;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/d;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<y;r+=g){const a=(o+r)/p;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let o=0;o<v;o+=x){const u=(i+o)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const d=b*y*v-1-h.get(e,s,a,u,t)===n*y*v+r*v+o?1:0;0!==d&&(l+=S.get(e,s,a,u,t)*d)}}}N.set(l,e,n,s,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},i1={kernelName:CT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:o}=t,i=a;nZ([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=uD(i.shape,l,u,1,c,h),p=n.data.get(i.dataId).values,f=T_(d.outShape,i.dtype,xJ(p,i.shape,i.dtype,d).values),m=d.strideHeight,g=d.strideWidth,x=d.dilationHeight,b=d.dilationWidth,y=d.effectiveFilterHeight,v=d.effectiveFilterWidth,k=v-1-d.padInfo.left,w=y-1-d.padInfo.top,I=T_(i.shape,"float32"),N=n.data.get(r.dataId).values,S=T_(r.shape,"float32",N);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let s=0;s<d.inWidth;++s){const r=n-w,a=s-k;let o=0;for(let n=0;n<y;n+=x){const s=(r+n)/m;if(!(s<0||s>=d.outHeight||Math.floor(s)!==s))for(let r=0;r<v;r+=b){const i=(a+r)/g;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const l=y*v-1-f.get(e,s,i,t)===n*v+r?1:0;0!==l&&(o+=S.get(e,s,i,t)*l)}}I.set(o,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},l1={kernelName:RT,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;nZ(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=uD(s.shape,r,a,[1,1],o),[h,d]=function(e,t,n,s,r){const a=gJ(e,0,n,E$(t),r,"max"),o=xJ(e,t,n,r,!0,s);return[a.values,o.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},u1={kernelName:AT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=y$(a,r.shape),l=d$(yO(r.shape,i)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=_Z({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const d=HQ({inputs:{a:h,b:c},backend:n});u.push(d);const p=kQ({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:o}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},c1={kernelName:_T,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;nZ(r,"min");const i=y$(a,r.shape);let l=i;const u=wO(l,r.shape.length);let c=r;null!=u&&(c=QZ({inputs:{x:r},backend:n,attrs:{perm:u}}),l=NO(l.length,r.shape.length)),kO("min",l,c.shape.length);const[h,d]=yO(c.shape,l),p=d$(d),f=F$(d$(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*p;let n=m[t];for(let e=0;e<p;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(o){const e=zZ({inputs:{x:g},backend:n,attrs:{shape:vO(h,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},h1=fZ(((e,t)=>Math.min(e,t))),d1=DZ(FT,h1),p1={kernelName:FT,backendName:"cpu",kernelFunc:d1},f1={kernelName:DT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:o}=s;nZ(r,"mirrorPad");const i=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===o?0:1,h=n.data.get(r.dataId).values,d=r.shape.length,p=E$(r.shape),f=d$(i),m=i.length,g=E$(i),x=k$(r.dtype,f);for(let e=0;e<f;e++){let t=L$(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=M$(t,d,p);x[e]=h[n]}return{dataId:n.write(x,i,r.dtype),shape:i,dtype:r.dtype}}},m1=fZ(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),g1=DZ(OT,m1),x1={kernelName:OT,backendName:"cpu",kernelFunc:g1};function b1(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,o=r.shape.length;let i=a;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const l=y$([i],r.shape),u=Q0({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=vO(u.shape,l),h=zZ({inputs:{x:u},backend:n,attrs:{shape:c}}),d=XQ({inputs:{a:r,b:h},backend:n}),p=LQ({inputs:{x:d},backend:n}),f=kQ({inputs:{x:p},backend:n,attrs:{axis:l,keepDims:!1}}),m=zZ({inputs:{x:f},backend:n,attrs:{shape:c}}),g=HQ({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const y1={kernelName:CE,backendName:"cpu",kernelFunc:b1},v1={kernelName:MT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:o,normalized:i}=s;nZ(r,"multinomial");const l=i?r:b1({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,d=[u,a],p=F$(d$(d),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=ol.alea(o.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();p[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){p[r+e]=s;break}}}return i||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",p)}};function k1(e,t,n){const s=CR(-1,n);return xQ([],t,s,e,n)}const w1={kernelName:BT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;nZ(s,"neg");const r=n.data.get(s.dataId).values,[a,o]=k1(r,s.shape,s.dtype);return n.makeTensorInfo(o,s.dtype,a)}},I1=NB,N1={kernelName:zT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s;nZ(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=I1(u,c,o,i,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},S1=SB,$1={kernelName:WT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;nZ(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:d,validOutputs:p}=S1(c,h,o,i,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},C1=$B,T1={kernelName:VT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;nZ(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,d=o,p=i,f=l,m=u,{selectedIndices:g,selectedScores:x}=C1(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}},E1=fZ(((e,t)=>e!==t?1:0)),R1=DZ(PT,E1,null,"bool"),A1={kernelName:PT,backendName:"cpu",kernelFunc:R1},_1={kernelName:GT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:o,onValue:i,offValue:l}=s;nZ(r,"oneHot");const u=d$(r.shape),c=new Float32Array(u*o);c.fill(l);const h=n.data.get(r.dataId).values;for(let e=0;e<u;++e)h[e]>=0&&h[e]<o&&(c[e*o+h[e]]=i);return n.makeTensorInfo([...r.shape,o],a,c)}};function F1(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=EZ({inputs:{input:s},backend:n}),t=F1({inputs:{x:e},backend:n}),r=VJ({inputs:{input:s},backend:n}),a=F1({inputs:{x:r},backend:n}),o=$Z({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),o}return t0({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const D1={kernelName:YE,backendName:"cpu",kernelFunc:F1},O1={kernelName:UT,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=EZ({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=VJ({inputs:{input:r},backend:s}),o=F1({inputs:{x:a},backend:s}),i=$Z({inputs:{real:n,imag:o},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o),i}return t0({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function M1(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return PQ({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{c$(a,e.shape,"All tensors passed to stack must have matching shapes"),u$(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=GJ({inputs:t.map((e=>{const t=PQ({inputs:{input:e},backend:n,attrs:{dim:r}});return i.push(t),t})),backend:n,attrs:{axis:r}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const L1={kernelName:HT,backendName:"cpu",kernelFunc:M1},B1={kernelName:jT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:o}=s;nZ(r,"pad");const i=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=d$(r.shape),h=r.shape.length,d=E$(r.shape),p=d$(i),f=i.length,m=E$(i),g=k$(r.dtype,p);0!==o&&g.fill(o);for(let e=0;e<c;e++)g[M$(L$(e,h,d).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,i,r.dtype),shape:i,dtype:r.dtype}}},P1=fZ(((e,t)=>Math.pow(e,t))),z1=DZ(KT,P1),W1={kernelName:KT,backendName:"cpu",kernelFunc:z1};function V1(e,t,n,s){const[r,a]=yO(e,s),o=rA(t,"int32"),i=F$(d$(r),o),l=d$(a);for(let e=0;e<i.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];i[e]=s}return{outVals:i,outShape:r,outDtype:o}}const U1={kernelName:XT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;nZ(r,"prod");const i=r.shape.length,l=y$(a,r.shape),u=wO(l,i);let c=l,h=r;const d=[];null!=u&&(h=QZ({inputs:{x:r},backend:n,attrs:{perm:u}}),d.push(h),c=NO(c.length,i));const p=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=V1(h.shape,h.dtype,p,c);let x=m;return o&&(x=vO(m,l)),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(x,g,f)}};function G1(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function H1(e,t,n,s,r,a,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const r=L$(s,t.length,E$(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}}))}(a,o,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:h}=function(e,t,n,s){const r=[];let a=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],r=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)i[e].push(t*n)}for(let s=0;s<e.length;++s){let o=e[s],l=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],r=e+t.length-1;if(r>=0){const e=i[r],t=e[e.length-1]-s[o];for(let e=o;e<l;++e)i[r].push(s[e+1]+t)}o=s[o],l=s[l]}l!==o&&(r.push([o,l]),a+=l-o)}return{outSplits:i,valueSlices:r,numValues:a}}(a,o,e,l),d=function(e){const t=[];for(let n=0;n<e.length;++n){const s=w$("int32",e[n].length);t.push(s),e[n].forEach(((e,t)=>s[t]=e))}return t}(u),p=function(e,t,n,s,r){const a=t.slice();a[0]=r;const o=w$(n,d$(a)),i=e.length;return function(e,t,n,s,r,a){const o=G1(t,2)[1],i=G1(a,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)r[l*i+t]=e[n*o+t];++l}}(e,t,s,0===i?0:i/t[0],o,a),[o,a]}(n,s,r,c,h);return[d,p[0],p[1]]}const j1={kernelName:YT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=s,l=r.map((e=>n.data.get(e.dataId).values)),u=r.map((e=>e.shape)),c=n.data.get(a.dataId).values,h=n.data.get(o.dataId).values,[d,p,f]=H1(l,u,c,a.shape,a.dtype,h,o.shape),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}},K1=2147483647;function q1(e,t,n,s,r,a,o){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(o.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===r.length,u=0===o.length,c=[];i||c.push(t[0]),l||c.push(r[0]),u||c.push(o[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=w$("int32",h+1);d[0]=0;for(let t=0;t<h;++t){const n=i?e[0]:e[t],r=l?s[0]:s[t],o=u?a[0]:a[t];if(0===o)throw new Error("Requires delta != 0");let c;if(o>0&&r<n||o<0&&r>n)c=0;else if(c=Math.ceil(Math.abs((r-n)/o)),c>K1)throw new Error(`Requires ((limit - start) / delta) <= ${K1}`);d[t+1]=d[t]+c}const p=w$(n,d[h]);let f=0;for(let t=0;t<h;++t){const n=d[t+1]-d[t];let s=i?e[0]:e[t];const r=u?a[0]:a[t];for(let e=0;e<n;++e)p[f++]=s,s+=r}return[d,p]}const X1={kernelName:ZT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=q1(o,s.shape,s.dtype,i,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};var Y1=dP;class Z1{constructor(e,t,n,s,r,a,o,i,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=r,this.defaultValue=a,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=fP(u),this.raggedRank=mP(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Y1.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Y1.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Y1.VALUE_ROWIDS:return Z1.getMaxWidthValueRowID(t);case Y1.ROW_SPLITS:return Z1.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Y1[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],r=0;for(let a=1;a<t;++a){const t=e[a];t!==s&&(s=t,r=Math.max(a-n,r),n=a)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Q1(e,n)}calculateOutputSize(e){const t=this.valuesShape;gP(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),s=pP(this.raggedRank,n,t);s[0]<0&&(s[0]=e);for(let e=1;e<=this.raggedRank;++e)s[e]<0&&(s[e]=this.getMaxWidth(e));return s}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),r=[];let a=0;for(let e=0;e<s;++e,a+=t)r.push(a);for(let t=s;t<e;++t)r.push(-1);return u$(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,s){const r=e.length,a=[];for(let o=0;o<r-1;++o){const r=e[o+1]-e[o];let i=Math.min(s,r),l=t[o];-1===l&&(i=0);for(let e=0;e<i;++e)a.push(l),l+=n;for(let e=0;e<r-i;++e)a.push(-1)}if(r>0&&a.length!==e[r-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,s){const r=e.length,a=[];if(0===r)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let l=t[i];a.push(l);for(let u=1;u<r;++u){const r=e[u];if(r===i)l>=0&&(++o,o<s?l+=n:l=-1);else{if(o=0,i=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);l=t[r]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,s){const r=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case Y1.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,s);case Y1.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,s);default:throw new Error(`Unsupported partition type: ${Y1[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Y1.FIRST_DIM_SIZE:return e[0];case Y1.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Y1.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Y1[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const s=Q1(t,!1),r=w$(this.valuesDType,d$(s));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)a=this.calculateOutputIndex(e-1,a,n[e],t[e]);this.setOutput(this.raggedRank,a,r,s)}return[s,r]}setOutput(e,t,n,s){if(0===n.length)return;const r=this.values,a=n;let o=s.slice();o=o.slice(e+1);const i=d$(o),l=t.length;let u=this.defaultValue;if(u.length!==i&&1!==u.length){const e=this.defaultValueShape;F_((()=>{const t=ID(u,e),n=zD(t,o);u=n.dataSync()}))}let c=0,h=0,d=0;for(let e=0;e<=l;++e){let s=e<l?t[e]:-1;if(s!==d){if(h<d){const e=r.subarray(c*i);J1(a.subarray(h*i),e,(d-h)*i)}if(e>=l){const e=n.length;s=Math.floor(e/i)}if(s>d)if(1===this.defaultValue.length)a.subarray(d*i,s*i).fill(this.defaultValue[0]),d=s;else for(;s>d;)J1(a.slice(d*i),u,i),++d;s<0?(c=e+1,h=d):(c=e,h=d,d=h+1)}else++d}}}function J1(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function Q1(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function e2(e,t,n,s,r,a,o,i,l,u){return new Z1(e,t,n,s,r,a,o,i,l,u).compute()}const t2={kernelName:JT,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(o.dataId).values,d=i.map((e=>n.data.get(e.dataId).values)),p=i.map((e=>e.shape)),[f,m]=e2(u,r.shape,c,a.shape,a.dtype,h,o.shape,d,p,l);return n.makeTensorInfo(f,a.dtype,m)}};function n2(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return F$(0,s);const r=F$(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const s2={kernelName:QT,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:o}=n,i=n2(s,r,o,a);return t.makeTensorInfo([i.length],a,i)}},r2=oZ(tE,(e=>1/e)),a2={kernelName:tE,backendName:"cpu",kernelFunc:r2},o2={kernelName:oE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s;nZ(r,"resizeBilinear");const l=E$(r.shape),[u,c]=i,[h,d,p,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(d$([h,u,c,f])),x=[a&&u>1?d-1:d,a&&c>1?p-1:p],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let y=0;const v=x[0]/b[0],k=x[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=o?v*(t+.5)-.5:v*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(d-1,Math.ceil(n)),i=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=o?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(p-1,Math.ceil(t)),c=i+n*l[2],h=u+n*l[2],d=i+a*l[2],x=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[d+e]-t)*s,o=a+(n+(m[x+e]-n)*s-a)*r;g[y++]=o}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}},i2={kernelName:iE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:o}=s;nZ([a,r],"resizeBilinearGrad");const i=E$(r.shape),[l,u,c,h]=r.shape,[,d,p]=a.shape,f=new Float32Array(l*u*c*h),m=[o&&d>1?u-1:u,o&&p>1?c-1:c],g=[o&&d>1?d-1:d,o&&p>1?p-1:p],x=m[0]/g[0],b=m[1]/g[1],y=n.data.get(a.dataId).values;let v=0;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<d;e++){const n=e*x,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*i[1],o=t+r*i[1],l=n-s,d=1-l;for(let e=0;e<p;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,p=a+n*i[2],m=a+s*i[2],g=o+n*i[2],x=o+s*i[2],k=d*u,w=d*r,I=l*u,N=l*r;for(let e=0;e<h;e++){const t=y[v++];f[p+e]+=t*k,f[m+e]+=t*w,f[g+e]+=t*I,f[x+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},l2={kernelName:rE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s;nZ(r,"resizeNearestNeighbor");const l=E$(r.shape),[u,c]=i,[h,d,p,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),x=[a&&u>1?d-1:d,a&&c>1?p-1:p],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],y=x[0]/b[0],v=x[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=o?y*(e+.5):y*e;let s=Math.min(d-1,a?Math.round(n):Math.floor(n));o&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=o?v*(e+.5):v*e;let n=Math.min(p-1,a?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}},u2={kernelName:aE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:o}=s;nZ([a,r],"resizeNearestNeighborGrad");const i=E$(r.shape),l=E$(a.shape),[u,c,h,d]=r.shape,[,p,f]=a.shape,m=new Float32Array(u*c*h*d),g=n.data.get(a.dataId).values,x=[o&&p>1?c-1:c,o&&f>1?h-1:h],b=[o&&p>1?p-1:p,o&&f>1?f-1:f],y=x[0]/b[0],v=x[1]/b[1],k=1/y,w=1/v,I=2*Math.ceil(k)+2,N=2*Math.ceil(w)+2;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<c;e++){const n=t+e*i[1],s=Math.floor(e*k),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*i[2],u=Math.floor(s*w),x=Math.floor(u-N/2);for(let n=0;n<d;n++){let i=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=p)continue;const d=t+u*l[1],m=u*y;if(e===Math.min(c-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+x;if(t<0||t>=f)continue;const r=d+t*l[2],a=t*v;s===Math.min(h-1,o?Math.round(a):Math.floor(a))&&(i+=g[r+n])}}m[a+n]=i}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}},c2={kernelName:uE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;nZ(r,"reverse");const o=r.shape.length,i=y$(a,r.shape);if(0===o)return cZ({inputs:{x:r},backend:n});const l=new HR(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();i.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},h2={kernelName:QE,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:o}=t,i=n,l=k$(s.dtype,d$(s.shape)),[u,c,h,d]=s.shape,[p,f]=yP(o,c,h),m=Math.sin(r),g=Math.cos(r),x=i.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*d;for(let e=0;e<c;e++){const n=e*(h*d);for(let s=0;s<h;s++){const r=s*d;for(let o=0;o<d;o++){const i=[u,e,s,o],b=i[2],y=i[1];let v=(b-p)*g-(y-f)*m,k=(b-p)*m+(y-f)*g;v=Math.round(v+p),k=Math.round(k+f);let w=a;"number"!=typeof a&&(w=3===o?255:a[o]),v>=0&&v<h&&k>=0&&k<c&&(w=x[t+k*(h*d)+v*d+o]),l[t+n+r+o]=w}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},d2=oZ(cE,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),p2={kernelName:cE,backendName:"cpu",kernelFunc:d2},f2=aZ((e=>1/Math.sqrt(e))),m2=iZ(hE,f2),g2={kernelName:hE,backendName:"cpu",kernelFunc:m2};function x2(e,t,n,s,r,a,o,i,l,u){const c=[s/r,r],h=e.values,d=t.values;if(0===s)return T_(n,t.dtype);const p=l instanceof HR?l:T_(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<o;t++){const n=h[e*o+t];a.push(n),l+=n*i[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?p.values[l*r+n]+=d[e*r+n]:p.values[l*r+n]=0===t.rank?d[0]:d[e*r+n]}return p}const b2={kernelName:dE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=DL(0,r,o),d=x2(n.bufferSync(r),n.bufferSync(a),o,h,u,l,i,c,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}};function y2(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function v2(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const k2={kernelName:fE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:o}=s,i=function(e,t,n,s,r,a){const o=w$("int32",n*r);for(let i=0;i<n;++i){const n=e.slice(i*s,(i+1)*s),l=i*r;for(let e=0;e<r;++e)o[l+e]="left"===a?y2(n,t[e+l]):v2(n,t[e+l])}return o}(n.data.get(r.dataId).values,n.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],o);return n.makeTensorInfo(a.shape,"int32",i)}},w2={kernelName:mE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;nZ([s,r,a],"select");const o=s.shape.length,i=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=rA(r.dtype,a.dtype),h=F$(d$(r.shape),c);let d=0;const p=0===o||o>1||1===r.shape.length?1:d$(r.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<p;t++)1===i[e]?h[d++]=l[e]:h[d++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},I2=$P,N2=CP,S2=oZ(gE,(e=>e>=0?N2*e:I2*(Math.exp(e)-1))),$2={kernelName:gE,backendName:"cpu",kernelFunc:S2},C2=oZ(vE,(e=>e<0?-1:e>0?1:0)),T2={kernelName:vE,backendName:"cpu",kernelFunc:C2},E2=oZ(bE,(e=>Math.sin(e))),R2={kernelName:bE,backendName:"cpu",kernelFunc:E2},A2=oZ(yE,(e=>Math.sinh(e))),_2={kernelName:yE,backendName:"cpu",kernelFunc:A2},F2=Math.log(1.1920928955078125e-7)+2,D2=oZ(wE,(e=>{const t=e>-F2,n=e<F2,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),O2={kernelName:wE,backendName:"cpu",kernelFunc:D2},M2={kernelName:SE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:o}=s;nZ([r],"spaceToBatchND");const i=d$(a),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=B1.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=vP(u.shape,a,i,!1),h=kP(c.length,a.length,!1),d=wP(u.shape,a,i,!1),p=zZ({inputs:{x:u},backend:n,attrs:{shape:c}}),f=QZ({inputs:{x:p},backend:n,attrs:{perm:h}}),m=zZ({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};function L2(e,t,n,s,r,a,o){const i=t[0],l=a[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(QP(i));return[w$(n,0),[0,h],w$(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*h];if(n<0)throw new Error(ez(t,n));if(n>=l)throw new Error(tz(t,n,l));++f[n],d=d&&n>=p,p=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){const t=e,n=s;for(let e=0;e<i;++e)c[e]=e;return[t,[i,h],n,u,c]}{const t=f[l-1],a=w$(n,t*h),d=w$(r,t),p=new Array(l).fill(0);for(let t=0;t<i;++t){const n=e[t*h],r=p[n],o=(0===n?0:f[n-1])+r;p[n]++;for(let n=0;n<h;++n)a[o*h+n]=e[t*h+n];d[o]=s[t],c[t]=o}for(let e=0;e<l;++e)if(0===p[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;d[t]=o}return[a,[t,h],d,u,c]}}const B2={kernelName:TE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(o.dataId).values[0],[h,d,p,f,m]=L2(i,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function P2(e,t,n,s,r){const a=d$(s),o=t[0],i=r.length,l=[];let u=1,c=-1;for(let e=0;e<i;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(nz(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(sz(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(a/u);if(u*e!==a)throw new Error(az(s,l));l[c]=e}if(d$(l)!==a)throw new Error(oz(s,l));const h=s.length,d=[];if(h>0){d[h-1]=1;for(let e=h-2;e>=0;--e)d[e]=d[e+1]*s[e+1]}const p=[];if(i>0){p[i-1]=1;for(let e=i-2;e>=0;--e)p[e]=p[e+1]*l[e+1]}const f=w$(n,o*i);for(let t=0;t<o;++t){let n=0;for(let s=0;s<h;++s)n+=e[t*h+s]*d[s];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/p[e]),n%=p[e]}return[f,[o,i],l]}const z2={kernelName:EE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.data.get(r.dataId).values),i=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=P2(i,s.shape,s.dtype,o,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function W2(e,t,n,s,r,a=!1,o=0){const i=s.length,l=[t[0],e.length/t[0]],u=l[1],c=i>0?r[i-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const d=w$(n,h.reduce(((e,t)=>e*t),1));if(0===i)return c>0&&d.fill(o),[d,h];if(c<=0)throw new Error("segment ids must be >= 0");let p=0,f=1,m=0,g=r[p];for(;;){let t=0;if(f<i){if(t=r[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(uz(g,c));g>m&&d.fill(o,m*u,g*u);for(let t=p;t<f;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(cz(t,s[t],l[0]));for(let t=0;t<u;t++)d[g*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[g*u+e]/=f-p;if(p=f,++f,m=g+1,g=t,f>i)break}return m<c&&d.fill(o,m*u,c*u),[d,h]}const V2={kernelName:RE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=W2(o,s.shape,s.dtype,i,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},U2={kernelName:AE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=W2(o,s.shape,s.dtype,i,l);return n.makeTensorInfo(c,s.dtype,u)}},G2={kernelName:_E,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=DL(0,r,i),p=!1,f=n.bufferSync(r);let m;switch(a.dtype){case"bool":m=x2(f,n.bufferSync(a),i,d,c,u,l,h,Boolean(n.data.get(o.dataId).values[0]),p);break;case"float32":case"int32":m=x2(f,n.bufferSync(a),i,d,c,u,l,h,n.data.get(o.dataId).values[0],p);break;case"string":m=x2(f,n.bufferSync(a),i,d,c,u,l,h,AR(n.data.get(o.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}},H2={kernelName:$E,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:o}=s,i=y$(o,r.shape)[0],l=JP(r,a,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[i]=e;const s=SJ({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[i]+=e,s}))}},j2=aZ((e=>Math.sqrt(e))),K2=oZ(IE,(e=>Math.sqrt(e))),q2={kernelName:IE,backendName:"cpu",kernelFunc:K2},X2={kernelName:DE,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;nZ(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Y2=fZ(((e,t)=>{const n=e-t;return n*n})),Z2=DZ(FE,Y2),J2={kernelName:FE,backendName:"cpu",kernelFunc:Z2},Q2=aZ(((e,t)=>{const{pattern:n,replaceGlobal:s,rewrite:r}=t;return e.replace(new RegExp(n,s?"g":""),r)})),e3=iZ(OE,Q2),t3={kernelName:OE,backendName:"cpu",kernelFunc:e3},n3=oZ(ZE,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),s3={kernelName:ZE,backendName:"cpu",kernelFunc:n3};function r3(e,t,n,s){const r=T_(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),o=new Array(a.length);for(let e=0;e<o.length;e++)o[e]=a[e]*n[e]+s[e];r.set(t.get(...o),...a)}return r}const a3={kernelName:ME,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;nZ(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:x,begin:b,end:y,strides:v}=qF(r.shape,a,o,i,l,u,c,h,d);let k;if(m)k=zZ({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||x){u$(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=OF(b,y,v),t=SJ({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});k=zZ({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=r3(p,n.bufferSync(r),v,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class o3{constructor(e,t,n,s,r,a){this.separator=RR(e),this.nGramWidths=t,this.leftPad=RR(n),this.rightPad=RR(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let o=0;o<r;++o){const i=this.getPadWidth(a),l=Math.max(0,i-o),u=Math.max(0,i-(r-(o+1))),c=a-(l+u),h=t+(l>0?0:o-i);let d=0;d+=l*this.leftPad.length;for(let t=0;t<c;++t)d+=e[h+t].length;d+=u*this.rightPad.length,d+=(l+u+c-1)*this.separator.length,n[s+o]=new Uint8Array(d);const p=n[s+o];let f=0;const m=e=>e.forEach((e=>p[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=w$("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),a[e]=a[e-1]+s}const o=new Array(a[r]);for(let n=0;n<r;++n){const s=t[n];let r=a[n];if(this.nGramWidths.forEach((a=>{const i=t[n+1]-t[n],l=this.getNumNGrams(i,a);this.createNGrams(e,s,o,r,l,a),r+=l})),this.preserveShort&&r===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const i=a+2*this.padWidth,l=1;this.createNGrams(e,s,o,r,l,i)}}return[o,a]}}function i3(e,t,n,s,r,a,o,i){return new o3(n,s,r,a,o,i).compute(e,t)}const l3={kernelName:LE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,m]=i3(d,p,r,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function u3(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function c3(e,t,n){const s=e.length,r=[];let a=0,o=0;const i=new Array(s);for(let l=0;l<s;++l){const s=r.length;u3(e[l],t,n,r);const u=r.length-s;i[l]=u,a+=u,o=Math.max(o,u)}const l=w$("int32",2*a),u=new Array(a),c=[s,o];let h=0;for(let e=0;e<s;++e)for(let t=0;t<i[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=r[h],++h;return[l,u,c]}const h3={kernelName:BE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(a.dataId).values,l=n.data.get(o.dataId).values[0],[u,c,h]=c3(i,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function d3(e,t){const n=w$("int32",e.length);for(let s=0;s<e.length;++s)n[s]=$R(e[s]).modulo(t).getLowBitsUnsigned();return n}const p3={kernelName:PE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const o=d3(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",o)}},f3=oZ(WE,(e=>Math.tan(e))),m3={kernelName:WE,backendName:"cpu",kernelFunc:f3},g3=oZ(VE,(e=>Math.tanh(e)));function x3(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=T_(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const b3=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function y3(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,o=Math.log(r),i=.5*Math.exp(2*o/3),l=.5*Math.sqrt(o*i*(r-i)/r)*Math.sign(a-r/2);y3(e,t,Math.max(n,Math.floor(t-a*i/r+l)),Math.min(s,Math.floor(t+(r-a)*i/r+l)))}const r=e[t];let a=n,o=s;for(l$(e,n,t),b3(e[s],r)>0&&l$(e,n,s);a<o;){for(l$(e,a,o),a++,o--;b3(e[a],r)<0;)a+=1;for(;b3(e[o],r)>0;)o-=1}0===b3(e[n],r)?l$(e,n,o):(o+=1,l$(e,o,s)),o<=t&&(n=o+1),t<=o&&(s=o-1)}}function v3(e,t,n,s,r){const a=t[t.length-1],[o,i]=[e.length/a,a],l=k$(n,o*s),u=k$("int32",o*s);for(let t=0;t<o;t++){const n=t*i,a=e.subarray(n,n+i);let o=new Array(a.length);a.forEach(((e,t)=>o[t]={value:e,index:t})),s<o.length&&(y3(o,s),o=o.slice(0,s)),r&&o.sort(b3);const c=t*s,h=l.subarray(c,c+s),d=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=o[e].value,d[e]=o[e].index}const c=t.slice();return c[c.length-1]=s,[T_(c,n,l),T_(c,"int32",u)]}const k3={kernelName:HE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=n,[c,h,d,p]=r.shape,[f,m]=null!=u?u:[h,d],g=[c,f,m,p],x=E$(r.shape),b=x[0],y=x[1],v=x[2],k=E$(g),w=k[0],I=k[1],N=k[2],S=k$(r.dtype,d$(g));S.fill(l);const $=s.data.get(r.dataId).values,C=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let r=0;r<p;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,p=(t[3]*s+t[4]*n+t[5])/u,f=w3(c,d,i),m=w3(p,h,i);switch(o){case"nearest":a=N3($,h,d,b,y,v,e,m,f,r,l);break;case"bilinear":a=S3($,h,d,b,y,v,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}S[e*w+n*I+s*N+r]=a}return s.makeTensorInfo(g,r.dtype,S)}return{dataId:s.write(S,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function w3(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return o$(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return o$(0,n,t-1)}(e,t);case"nearest":return function(e,t){return o$(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function I3(e,t,n,s,r,a,o,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<n?e[o*s+i*r+l*a+u]:c}function N3(e,t,n,s,r,a,o,i,l,u,c){return I3(e,t,n,s,r,a,o,Math.round(i),Math.round(l),u,c)}function S3(e,t,n,s,r,a,o,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*I3(e,t,n,s,r,a,o,h,d,u,c)+(l-d)*I3(e,t,n,s,r,a,o,h,f,u,c))+(i-h)*((f-l)*I3(e,t,n,s,r,a,o,p,d,u,c)+(l-d)*I3(e,t,n,s,r,a,o,p,f,u,c))}function $3(e,t,n,s){const r=y$(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const o=new Map,i=new Int32Array(n[r]),l=new HR(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}const s=o.get(n);if(null!=s)i[t]=s;else{const e=o.size;o.set(n,e),i[t]=e,u.push(t)}}const h=a.slice();h[1]=o.size;const d=new HR(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)d.set(l.get(n,e,s),n,t,s)}));const p=n.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const C3={kernelName:XE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:o}=s;nZ(r,"unsortedSegmentSum");const i=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=PQ({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<o;++e){const t=CR(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=$Q({inputs:{a:s,b:c},backend:n}),o=_Z({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=yQ({inputs:{a:o,b:r},backend:n}),h=kQ({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});i.push(h),l.push(s),l.push(a),l.push(o),l.push(u),l.push(h)}const h=M1({inputs:i,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},T3=[GZ,jZ,qZ,YZ,PZ,ZZ,tJ,nJ,sJ,rJ,oJ,lJ,cJ,pJ,mJ,yJ,vJ,kJ,wJ,UZ,IJ,CJ,RJ,FJ,DJ,FZ,LJ,PJ,CZ,zJ,HJ,KJ,qJ,XJ,YJ,ZJ,JJ,eQ,nQ,sQ,rQ,aQ,oQ,iQ,uQ,cQ,hQ,dQ,pQ,fQ,mQ,gQ,IQ,uZ,NQ,CQ,OQ,BQ,zQ,UQ,e0,n0,s0,o0,u0,c0,h0,p0,m0,b0,k0,hZ,w0,UJ,N0,$0,T0,pZ,A0,D0,M0,P0,W0,G0,j0,X0,Y0,Z0,e1,s1,r1,a1,o1,i1,l1,u1,c1,p1,f1,x1,v1,vQ,w1,N1,$1,T1,A1,_1,O1,L1,B1,W1,xZ,U1,j1,X1,t2,s2,RZ,jQ,a2,yZ,kZ,WZ,o2,i2,l2,u2,c2,h2,p2,g2,b2,k2,w2,$2,NZ,T2,R2,_2,$J,y1,O2,M2,B2,z2,V2,U2,G2,H2,q2,X2,J2,t3,s3,a3,l3,h3,p3,YQ,wQ,m3,{kernelName:VE,backendName:"cpu",kernelFunc:g3},{kernelName:pE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:s,indices:r,updates:a}=t,{sliceRank:o,numUpdates:i,sliceSize:l,strides:u,outputSize:c}=DL(0,r,s.shape),h=n.bufferSync(r),d=n.bufferSync(a),p=n.bufferSync(s),f=x2(h,d,s.shape,c,l,i,o,u,p,!1);return n.makeTensorInfo(s.shape,f.dtype,f.values)}},{kernelName:UE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;nZ(r,"tile");const o=x3(n.bufferSync(r),a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:GE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:o}=s;nZ(r,"topk");const i=n.data.get(r.dataId).values,[l,u]=v3(i,r.shape,r.dtype,a,o);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},k3,eJ,{kernelName:KE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;nZ(a,"unique");const o=s.data.get(a.dataId).values,{outputValues:i,outputShape:l,indices:u}=$3(o,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:qE,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const o=r.shape.length,i=r.shape[a],l=new Array(o-1);let u=0;for(let e=0;e<o;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(o).fill(0),h=r.shape.slice();h[a]=1;const d=new Array(i);for(let e=0;e<d.length;e++){c[a]=e;const t=SJ({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});d[e]=zZ({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return d}},C3,D1];for(const e of T3)cR(e);const E3={},R3={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function A3(e,t){if(!(e in E3)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(V$().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete E3[e]}),!1),V$().getBool("SOFTWARE_WEBGL_ENABLED")&&(R3.failIfMajorPerformanceCaveat=!1),1===e?n.getContext("webgl",R3)||n.getContext("experimental-webgl",R3):n.getContext("webgl2",R3)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;E3[e]=n}const n=E3[e];return null==n||n.isContextLost()?(delete E3[e],A3(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),E3[e])}var _3,F3,D3;function O3(e,t){return[t,e]}function M3(e){const t=d$(e);return m$(Math.ceil(t/4))}function L3(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function B3(e,t){const n=e;let s,r,a,o,i,l,u,c,h,d;return 2===V$().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,o=n.RGBA32F,i=n.RED,u=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,o=n.RGBA,i=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:o,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function P3(e,t){const n=t();return V$().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function z3(e){return!!(V$().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function W3(e,t){return Y3(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(_3||(_3={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(F3||(F3={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(D3||(D3={}));const V3=/ERROR: [0-9]+:([0-9]+):/g;function U3(e,t){const n=V3.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,o=r.map(((e,t)=>g$((t+1).toString(),a)+e));let i=0;for(let e=0;e<o.length;e++)i=Math.max(o[e].length,i);const l=o.slice(0,s-1),u=o.slice(s-1,s),c=o.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${g$(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function G3(e,t){if(P3(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function H3(e,t,n,s,r,a,o){const i=e.getAttribLocation(t,n);return-1!==i&&(P3(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),P3(e,(()=>e.vertexAttribPointer(i,r,e.FLOAT,!1,a,o))),P3(e,(()=>e.enableVertexAttribArray(i))),!0)}function j3(e,t,n,s){P3(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),P3(e,(()=>e.activeTexture(e.TEXTURE0+n))),P3(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),P3(e,(()=>e.uniform1i(n,s)))}function K3(e,t,n){P3(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),P3(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function q3(e,t){P3(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),P3(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function X3(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function Y3(e,t,n){const s=P3(e,(()=>t()));if(null==s)throw new Error(n);return s}function Z3(e,t=2){return d$(e.slice(0,e.length-t))}function J3(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Q3(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[Z3(e),...J3(e)]),t}function e4(e){return e%2==0}function t4(e,t){if(p$(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],s=t[t.length-1];if(n===s)return!0;if(e4(n)&&e4(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&e4(e[0])&&e4(t[0])}let n4,s4;function r4(e,t){return null!=e.getExtension(t)}function a4(e){try{if(null!=A3(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function o4(e){const t=B3(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function i4(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&u$("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const l4=V$();function u4(){let e,t,n,s,r,a,o,i,l,u;return 2===V$().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",o="out vec4 outputColor;",i=V$().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",o="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:o,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function c4(e,t,n="index"){const s=E$(t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function h4(e,t,n="index"){const s=E$(t);return s.map(((t,r)=>`int ${e[r]} = ${n} / outShapeStrides[${r}]; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function d4(e){const t=E$(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}l4.registerFlag("HAS_WEBGL",(()=>l4.getNumber("WEBGL_VERSION")>0)),l4.registerFlag("WEBGL_VERSION",(()=>a4(2)?2:a4(1)?1:0)),l4.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),l4.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===l4.get("WEBGL_VERSION"))),l4.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),l4.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),l4.registerFlag("WEBGL_PACK",(()=>l4.getBool("HAS_WEBGL"))),l4.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_PACK_CLIP",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_PACK_REDUCE",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_LAZILY_UNPACK",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_CONV_IM2COL",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",(()=>l4.getBool("WEBGL_PACK"))),l4.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==n4){const t=A3(e);n4=t.getParameter(t.MAX_TEXTURE_SIZE)}return n4}(l4.getNumber("WEBGL_VERSION")))),l4.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==s4){const t=A3(e);s4=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,s4)}(l4.getNumber("WEBGL_VERSION")))),l4.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=l4.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=A3(e);return t=r4(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:r4(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),l4.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>l4.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!xA())),l4.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=A3(e);if(1===e){if(!r4(t,"OES_texture_float"))return!1}else if(!r4(t,"EXT_color_buffer_float"))return!1;return o4(t)}(l4.getNumber("WEBGL_VERSION")))),l4.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!l4.getBool("WEBGL_FORCE_F16_TEXTURES")&&l4.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),l4.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=A3(e);if(1!==e){if(r4(t,"EXT_color_buffer_float"))return o4(t);const e="EXT_color_buffer_half_float";if(r4(t,e)){const n=t.getExtension(e);return function(e,t){const n=B3(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!r4(t,"OES_texture_float")&&!!r4(t,"WEBGL_color_buffer_float")&&o4(t)}(l4.getNumber("WEBGL_VERSION")))),l4.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=l4.getNumber("WEBGL_VERSION"))&&null!=A3(e).fenceSync;var e})),l4.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>l4.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),l4.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),l4.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>xA()?1:-1),(e=>{if("number"!=typeof e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${e}.`);if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),l4.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),l4.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),l4.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),l4.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),l4.registerFlag("WEBGL_EXP_CONV",(()=>!1)),l4.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>l4.getBool("IS_TEST"))),l4.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),l4.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),l4.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),l4.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const p4="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:f4}=c;function m4(e,t,n){const s=[];if(e.forEach((e=>{const t=d$(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=S4(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=s.join("\n"),a=e.map((e=>function(e,t,n=!1,s){let r="";r+=n?x4(e,s):g4(e,s);const a=e.shapeInfo.logicalShape,o=t.logicalShape;return a.length<=o.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,o=t.logicalShape.length,i=f4(e.shapeInfo.logicalShape,t.logicalShape),l=N4(o),u=o-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":o<2&&i.length>=1?"coords = 0;":i.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let d="";d=o<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let p="return outputValue;";const f=1===d$(e.shapeInfo.logicalShape),m=1===d$(t.logicalShape);if(1!==a||f||m){if(f&&!m)p=1===o?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const e=a-2,t=a-1;i.indexOf(e)>-1&&i.indexOf(t)>-1?p="return vec4(outputValue.x);":i.indexOf(e)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(t)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,o=e.shapeInfo.texShape,i=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&i===l&&null==e.shapeInfo.flatOffset&&p$(o,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=N4(l),c=f4(e.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${p[e+h]} = 0;`)).join("\n");let f="";return f=l<2&&i>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+h]}`)).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(e,t)),r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),o=t.texShape,i=u4(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${b4}\n    ${y4}\n    ${v4}\n  `}(i);return t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(p$(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let o=a,i="",l="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(i)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return p$(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${h4(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=c4(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${h4(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=c4(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=c4(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=c4(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,o,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),n.packedInputs&&(h+=k4),[h,l,c,r,u,a,n.userCode].join("\n")}function g4(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=w4(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${I4(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],o=r[1];if(1===o&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=w4(n);return 1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&p$(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:o,keptDims:i}=v$(n),l=o;if(l.length<n.length){const n=["row","col"];return`\n      ${g4($4(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${C4(n,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${I4(e)}\n      }\n    `;const u=a[0],c=a[1],h=w4(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],o=n[2],{newShape:i,keptDims:l}=v$(n),u=i;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${g4($4(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${C4(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${o}, 1)));\n        ${I4(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],d=c[1],p=e.shapeInfo.flatOffset;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${o}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=w4(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${o} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],o=n[2]*a,i=n[1]*o,{newShape:l,keptDims:u}=v$(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${g4($4(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${C4(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${o}, ${a}, 1)));\n        ${I4(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const x=w4(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${x});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${x});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,o=t[2]*a,i=t[1]*o,{newShape:l,keptDims:u}=v$(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${g4($4(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${C4(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${o}, ${a}, ${r})) +\n          depth3;\n        ${I4(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${o}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${o} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${w4(n)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=v$(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${g4($4(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${C4(t,a)});\n      }\n    `}const o=t[5],i=t[4]*o,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${o}, 1)));\n        ${I4(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${o})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===o&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${o} + depth4 + ${w4(n)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function x4(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${u4().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=u4();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,o=a[0],i=a[1],l=u4();if(null!=a&&p$(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${o}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${x4($4(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${C4(a,s)});\n        }\n      `}const i=u4();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=o[0],u=o[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=u4();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,o=a.length,i=e.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[o-1]/2);let d=h*Math.ceil(a[o-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<o-1;e++)p=`int b${e}, `+p,d*=a[o-e-1],f=`b${e} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const b4="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",y4="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",v4="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",k4="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function w4(e){return`offset${e}`}function I4(e){const t=e.name,n=d$(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function N4(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function S4(e,t,n){const{newShape:s,keptDims:r}=v$(t),a=t.length,o=e&&3===a&&1===t[0],i=o?t.slice(1):s,l=!e&&a>1&&!p$(t,n)&&s.length<a||o;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function $4(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function C4(e,t){return t.map((t=>e[t])).join(", ")}function T4(e,t,n){const s=[],r=[];let a,o,i,l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===V$().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const r of t.variableNames){const a={name:r,uniform:e.getUniformLocation(n,r,c),offset:e.getUniformLocation(n,`offset${r}`,c)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(n,`${r}Shape`,c),a.texShape=e.getUniformLocation(n,`${r}TexShape`,c)),s.push(a)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),i=e.getUniformLocation(n,"outShapeStrides",c),o=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const s of t.customUniforms)r.push(e.getUniformLocation(n,s.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}}function E4(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!p$(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const o=e.texShape,i=r.isUniform?null:r.texData.texShape;if(!p$(o,i))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${o} and ${i} must match`)}))}function R4(e){return V$().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class A4{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=_3.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=u4();this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?h4(["r","c","d"],e):c4(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class _4{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=_3.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=u4();this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?h4(["r","c","d"],e):c4(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class F4{constructor(e){this.variableNames=["A"],this.outTexUsage=F3.DOWNLOAD;const t=u4();this.outputShape=e,this.userCode=`\n      ${p4}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class D4{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=F3.DOWNLOAD;const t=u4();this.outputShape=e,this.userCode=`\n      ${p4}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const O4={R:0,G:1,B:2,A:3};class M4{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=u4();this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${O4[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":d4(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${a}\n        }\n        ${s.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class L4{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=u4();this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const a=2*t+r;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":d4(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function B4(e,t,n,s,r,a){!function(e,t){const n=V$().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const o=function(e){return Y3(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),i=e.TEXTURE_2D;return P3(e,(()=>e.bindTexture(i,o))),P3(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),P3(e,(()=>e.texParameteri(i,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),P3(e,(()=>e.texParameteri(i,e.TEXTURE_MIN_FILTER,e.NEAREST))),P3(e,(()=>e.texParameteri(i,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===V$().getNumber("WEBGL_VERSION")?P3(e,(()=>e.texImage2D(i,0,s,t,n,0,r,a,null))):P3(e,(()=>e.texStorage2D(i,1,s,t,n))),P3(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:o,texShape:[n,t]}}function P4(e){return e.internalFormatFloat}function z4(e){return e.internalFormatHalfFloat}function W4(e){return e.downloadTextureFormat}function V4(e){return e.internalFormatPackedFloat}function U4(e){return e.internalFormatPackedHalfFloat}class G4{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=V$().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){E3[e]=t}(t,e)):this.gl=A3(t),e=this.gl,2===V$().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>P3(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>P3(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>P3(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>P3(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>P3(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>P3(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>P3(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>P3(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===V$().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=W3(this.gl,e),r4(this.gl,t))this.textureHalfFloatExtension=W3(this.gl,t);else if(V$().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),r4(this.gl,s))this.colorBufferHalfFloatExtension=W3(this.gl,s);else if(V$().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",r4(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!r4(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=Y3(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return P3(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),P3(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=Y3(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return P3(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),P3(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return Y3(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=B3(this.gl,this.textureHalfFloatExtension)}get debug(){return V$().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;P3(e,(()=>e.finish())),P3(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),P3(e,(()=>e.deleteFramebuffer(this.framebuffer))),P3(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),P3(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),P3(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=O3(t,n);return B4(e,r,a,P4(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=O3(t,n);return B4(e,r,a,z4(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=O3(t,n);return B4(e,r,a,W4(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){P3(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===V$().getNumber("WEBGL_VERSION")?P3(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):P3(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===V$().getNumber("WEBGL_VERSION")?P3(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):P3(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),P3(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let o,i,l;P3(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(o=new Uint8Array(n*s*4),i=e.UNSIGNED_BYTE,l=e.RGBA):(o=new Float32Array(n*s*4),i=e.FLOAT,l=a.internalFormatPackedFloat),o.set(r),2===V$().getNumber("WEBGL_VERSION")?P3(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,i,o))):P3(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,i,o))),P3(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=L3(t,n);return B4(e,r,a,U4(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=L3(t,n);return B4(e,r,a,V4(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(q3(this.gl,this.framebuffer),this.outputTexture=null),P3(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=O3(t,n),o=new Uint8Array(t*n*4);return P3(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,o,i){const l=e,u=new Float32Array(function(e,t){const[n,s]=L3(e,t);return n*s*4}(a,o));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();P3(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return P3(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),P3(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),P3(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(V$().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return P3(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=u4();return function(e,t){const n=Y3(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(P3(e,(()=>e.shaderSource(n,t))),P3(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const n=function(e){return Y3(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);P3(t,(()=>t.attachShader(n,this.vertexShader))),P3(t,(()=>t.attachShader(n,e))),function(e,t){if(P3(e,(()=>e.linkProgram(t))),!V$().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n);const s=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&G3(t,s),s}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;P3(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),function(e,t,n){P3(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),H3(e,t,"clipSpacePos",n,3,20,0)&&H3(e,t,"uv",n,2,20,12)}(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(P3(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&G3(this.gl,this.program),P3(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return Y3(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),P3(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),j3(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=L3(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&G3(this.gl,this.program),X3(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}P3(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),P3(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=W3(this.gl,2===V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await x$((()=>this.disposed||this.isQueryAvailable(e,V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in V$().platform&&(n=V$().platform.setTimeoutCustom.bind(V$().platform)),x$((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),K3(this.gl,e,this.framebuffer),this.debug&&X3(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(K3(this.gl,this.outputTexture,this.framebuffer),this.debug&&X3(this.gl)):q3(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;K3(s,e,this.framebuffer),this.debug&&X3(s),this.outputTexture=e,P3(s,(()=>s.viewport(0,0,t,n))),P3(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),P3(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:H4,bincountImpl:j4,bincountReduceImpl:K4,bitwiseAndImpl:q4,castImpl:X4,ceilImpl:Y4,concatImpl:Z4,equalImpl:J4,expImpl:Q4,expm1Impl:e6,floorImpl:t6,gatherNdImpl:n6,gatherV2Impl:s6,greaterImpl:r6,greaterEqualImpl:a6,lessImpl:o6,lessEqualImpl:i6,linSpaceImpl:l6,logImpl:u6,maxImpl:c6,maximumImpl:h6,minimumImpl:d6,multiplyImpl:p6,negImpl:f6,notEqualImpl:m6,prodImpl:g6,raggedGatherImpl:x6,raggedRangeImpl:b6,raggedTensorToTensorImpl:y6,rangeImpl:v6,rsqrtImpl:k6,scatterImpl:w6,sigmoidImpl:I6,simpleAbsImpl:N6,sliceImpl:S6,sparseFillEmptyRowsImpl:$6,sparseReshapeImpl:C6,sparseSegmentReductionImpl:T6,sqrtImpl:E6,staticRegexReplaceImpl:R6,stridedSliceImpl:A6,stringNGramsImpl:_6,stringSplitImpl:F6,stringToHashBucketFastImpl:D6,subImpl:O6,tileImpl:M6,topKImpl:L6,transposeImpl:B6,uniqueImpl:P6}=A;function z6(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function W6(e,t){return 1===t?[e]:z6(e,t)}class V6{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=R4(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=W6("rc",this.rank),t=N4(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class U6{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?function(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${s[e+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${s[r]}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}(["r","c","d"],"inputShape"):c4(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":d4(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class G6{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const s=j6(t,n),r=K6(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=H6(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].pop();return this.usedTextures[r].push(e),e}let o;return s===D3.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===D3.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===D3.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===D3.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===D3.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(o),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),o}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=j6(n,s),a=K6(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const o=H6(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),i=V$().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==i&&this._numBytesAllocated>i?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=o):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const l=this.usedTextures[a],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function H6(e,t,n,s,r){const a=function(e,t){switch(e){case D3.PACKED_2X2_FLOAT32:return V4(t);case D3.PACKED_2X2_FLOAT16:return U4(t);case D3.UNPACKED_FLOAT32:return P4(t);case D3.UNPACKED_FLOAT16:return z4(t);case D3.PACKED_4X1_UNSIGNED_BYTE:return W4(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let o;if(r){const[t,n]=L3(e[0],e[1]);o=t*n}else{const[t,n]=O3(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return o*i}function j6(e,t){if(e===F3.UPLOAD)return D3.PACKED_2X2_FLOAT32;if(e===F3.RENDER||null==e)return function(e){return V$().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?D3.PACKED_2X2_FLOAT32:D3.UNPACKED_FLOAT32:e?D3.PACKED_2X2_FLOAT16:D3.UNPACKED_FLOAT16}(t);if(e===F3.DOWNLOAD||e===F3.PIXELS)return D3.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function K6(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class q6{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const X6="if (isnan(x)) return x;",Y6="return x;",Z6="return abs(x);",J6="return (x >= 0.0) ? x : (exp(x) - 1.0);",Q6=X6+"\n  return (x < 0.0) ? 0.0 : x;\n",e5=X6+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",t5="return x;",n5="return 1.0 / (1.0 + exp(-1.0 * x));",s5="return x;",r5="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",a5="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",o5="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",i5="return 1.0 / (1.0 + exp(-1.0 * x));";class l5{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class u5{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length);const t=e.length,n=W6("rc",t),s=N4(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),o=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const c5=UL,h5={},d5=V$().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class p5 extends r${nextDataId(){return p5.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!V$().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof G4)t=e;else{const n=A3(V$().getNumber("WEBGL_VERSION"),e);t=new G4(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=A3(V$().getNumber("WEBGL_VERSION"));t=new G4(e),this.binaryCache=((n=V$().getNumber("WEBGL_VERSION"))in h5||(h5[n]={}),h5[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new G6(this.gpgpu),this.numMBBeforeWarning=null==V$().global.screen?1024:V$().global.screen.height*V$().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new s$(this,__())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,s,r,a){const o=this.makeTensorInfo(t,n),i=this.texData.get(o.dataId);i.isPacked=!1,i.texture={texture:e,texShape:[s,r]},i.texShape=[s,r];const l=Q3(t),u=new M4(l,!1,a),c=this.runWebGLProgram(u,[o],n,[[s,r]]);return c.shape=t,i.texture=null,this.disposeIntermediateTensorInfo(o),c.dataId}write(e,t,n){if((V$().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||V$().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:F3.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,r){if(V$().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:F3.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:o,isPacked:i}=t;if(null!=a){let t;t=i?new l5(o,t5):new q6(o,t5);const n=this.runWebGLProgram(t,[{dataId:e,shape:o,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=ER()),c="complex64"===s?DP(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=ER()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:o,isPacked:i}=t;if(null!=r){let t;t=i?new l5(s,t5):new q6(s,t5);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(V$().getBool("DEBUG")&&!V$().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===V$().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&V$().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...M3(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(o.real.dataId),this.read(o.imag.dataId)]);u=DP(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=d$(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;P3(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&__().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:o,isPacked:i,texture:l}=n;if("complex64"===o)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=i?new l5(r,t5):new q6(r,t5);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:o}],o),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=__().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>AR(e)));return T_(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return T_(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!z3(n)){if(V$().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=d$(t);if(V$().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...M3(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=V$().getBool("WEBGL_PACK")&&!0===s,o=a?Q3(t):t,i=a?new D4(o):new F4(o),l=this.runWebGLProgram(i,[{shape:o,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=FR(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=FR(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);o.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),o.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:ER(),endMs:null}}endTimer(e){return V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=ER(),e)}async getQueryTime(e){if(V$().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,l=this.dataRefCount.get(i);l>1?this.dataRefCount.set(i,l-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=d5){return V$().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&d$(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){sR("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return c5(e.shape,t)}packedUnaryOp(e,t,n){const s=new l5(e.shape,t),r=this.compileAndRun(s,[e],n);return __().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=N6(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(V$().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Z6,e.dtype);const t=new q6(e.shape,Z6),n=this.compileAndRun(t,[e]);return __().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&S$(n[0])){const r=n.map((e=>RR(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return __().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new u5(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new V6(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[Z3(e.shape),...J3(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[Z3(t),...J3(t)],a=new U6(r,n),o=[n],i=this.runWebGLProgram(a,[s],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;null!=t&&u$(d$(r)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."));const o=Q3(r);let i;i=s?new _4(o):new A4(o);const l=[null!=t?t:M3(o)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(i,[{shape:o,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const o=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(o.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===_3.DENSE){const t=null!=a?a:M3(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===d$(o.shape))return i.values=k$(o.dtype,0),o;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&d$(t.shape)<=V$().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!t4(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(o.dataId);const c={shape:o.shape,texData:i,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:o,uniformShape:i,keptDims:l}=S4(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===i.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==i.length||e.packedInputs){if(i.length>2&&!e.packedInputs){const e=E$(i);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${i[0]>1}_${i[1]>1}`;const d=t.shape.length,p=2===i.length&&p$(t.shape,a),f=1===d$(t.shape),m=nF(t.shape,n.shape),g=!e.packedInputs&&d===n.shape.length&&p$(a,n.texData.texShape),x=e.packedInputs||i.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${d}_${g}_${o?l:""}_${i.length}_${f}_${m}_${p}_${u}_${c}_${h}_${x}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${V$().getNumber("WEBGL_VERSION")}`,a}(e,u,c),d=this.getAndSaveBinary(h,(()=>function(e,t,n,s){const r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),a=r.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=m4(r,o,t),l=function(e,t){const n=Y3(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(P3(e,(()=>e.shaderSource(n,t))),P3(e,(()=>e.compileShader(n))),V$().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw U3(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,i),u=e.createProgram(l);return V$().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:a,outShapeInfo:o},T4(e,t,u)))}(this.gpgpu,e,u,c))),p=null!=this.activeTimers;let f;p&&(f=this.startTimer()),V$().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,r){t.program.enableShapeUniforms||(E4(t.inShapeInfos,n),E4([t.outShapeInfo],[s]));const a=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,o[0],o[1]):e.setOutputMatrixTexture(a.texture,o[0],o[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===V$().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let s=0;s<n.length;++s){const r=n[s],{uniform:a,offset:o,shape:i,texShape:l}=t.variablesLocations[s];if(i){const{uniformShape:n}=S4(t.program.packedInputs,r.shape,r.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(i,new Int32Array(n));break;case 2:e.gl.uniform2iv(i,new Int32Array(n));break;case 3:e.gl.uniform3iv(i,new Int32Array(n));break;case 4:e.gl.uniform4iv(i,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,r.texData.texShape[0],r.texData.texShape[1]),null!=a)if(r.isUniform)if(d$(r.shape)<2)e.gl.uniform1f(a,r.uniformValues[0]);else{let t=r.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=r.texData.slice&&null!=o&&e.gl.uniform1i(o,r.texData.slice.flatOffset),e.setInputMatrixTexture(r.texData.texture.texture,a,s)}const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:e.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=E$(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let n=0;n<t.program.customUniforms.length;++n){const s=t.program.customUniforms[n],a=t.customUniformLocations[n],o=r[n];if("float"===s.type)e.gl.uniform1fv(a,o);else if("vec2"===s.type)e.gl.uniform2fv(a,o);else if("vec3"===s.type)e.gl.uniform3fv(a,o);else if("vec4"===s.type)e.gl.uniform4fv(a,o);else if("int"===s.type)e.gl.uniform1iv(a,o);else if("ivec2"===s.type)e.gl.uniform2iv(a,o);else if("ivec3"===s.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==s.type)throw Error(`uniform type ${s.type} is not supported yet.`);e.gl.uniform4iv(a,o)}}e.executeProgram()}(this.gpgpu,d,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=V$().getNumber("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=ER();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!V$().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,s,r=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(V$().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=F_((()=>{if(!V$().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=V$().getBool("DEBUG");V$().set("DEBUG",!1);const t=this.abs(H_(1e-8)).dataSync()[0];if(V$().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:o,isPacked:i}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=ER());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=V$().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=V$().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&V$().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?i$(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=v$(e);e=t.newShape}let r=d$(e),a=null;e.length<=1&&r<=n?a=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const o=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||o)if(t){const t=Z3(e);let n=2,s=2;e.length&&([n,s]=J3(e)),r=t*(n/2)*(s/2),a=m$(r).map((e=>2*e))}else a=m$(r);return a}(n,i),t.texShape=c),null!=r){const e=Q3(n);let a,o=c[1],h=c[0];const d=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!i&&d||([o,h]=L3(c[0],c[1])),a=i?new L4(e,d):new M4(e,d);const p=d?[h,o]:c,f=this.makeTensorInfo(p,s),m=this.texData.get(f.dataId);m.usage=d?F3.PIXELS:F3.UPLOAD,m.texShape=p,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,h,r);const g=[[h,o]],x=!0,b=this.runWebGLProgram(a,[f],s,g,x),y=this.texData.get(b.dataId);t.texShape=y.texShape,t.isPacked=y.isPacked,t.usage=y.usage,V$().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=y.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=ER()-u)}else{const e=this.acquireTexture(c,o,s,i);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*N$(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await new Promise((e=>uP((()=>e())))),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw U3(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}=T4(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.outShapeLocation=a,e.outShapeStridesLocation=o,e.outTexShapeLocation=i}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:s,height:r,width:a,channels:o}=e,i=__().backend;if(!i.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=i.writeTexture(s,t,n,r,a,o);return __().makeTensorFromDataId(l,t,n,i)}}p5.nextDataId=0,bA()&&M_("webgl",(()=>new p5),2);const f5="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class m5{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=rF(t,n),this.enableShapeUniforms=R4(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const g5="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class x5{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=rF(t,n);const r=this.outputShape.length;this.enableShapeUniforms=R4(r);let a="";if(s)if(0===r||1===d$(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${N4(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=W6("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function b5(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const y5={kernelName:iT,backendName:"webgl",kernelFunc:b5};function v5(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),o=n.texData.get(a.dataId),i=b5({inputs:{x:s},backend:n}),l=b5({inputs:{x:r},backend:n});return o.complexTensorInfos={real:i,imag:l},a}const k5={kernelName:yC,backendName:"webgl",kernelFunc:v5},w5="return (a < 0.) ? b * a : a;",I5="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",N5={kernelName:pT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,o=n.makeTensorInfo([],"float32",CR(a,"float32")),i=V$().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new x5(I5,r.shape,o.shape):new m5(w5,r.shape,o.shape),l=n.runWebGLProgram(i,[r,o],"float32");return n.disposeIntermediateTensorInfo(o),l}},S5="return (a < 0.) ? b * a : a;",$5="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",C5={kernelName:qT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=V$().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new x5($5,s.shape,r.shape):new m5(S5,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}},T5="if (isnan(x)) return x;";function E5({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:o}=r,i=a,l=s||o.dtype;if(i.shouldExecuteOnCPU([o])&&null!=n){const e=i.texData.get(o.dataId),t=n(e.values,l);return i.makeTensorInfo(o.shape,l,t)}let u;return u=V$().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new l5(o.shape,t):new q6(o.shape,e),i.runWebGLProgram(u,[o],l)}}function R5({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:o,backend:i})=>{const{a:l,b:u}=o,c=i;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},o=new m5(e,l.shape,u.shape);return c.runWebGLProgram(o,[r,a],rA(n.dtype,s.dtype))})),a=v5({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||rA(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?fz(e):e,s="string"===l.dtype?fz(t):t,[a,o]=r(l.shape,u.shape,n,s,h),i=c.makeTensorInfo(o,h);return c.texData.get(i.dataId).values=a,i}let d;return d=V$().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new x5(t,l.shape,u.shape,n):new m5(e,l.shape,u.shape),c.runWebGLProgram(d,[l,u],h)}}function A5(e,t=!1){if("linear"===e)return t?s5:Y6;if("relu"===e)return t?a5:Q6;if("elu"===e)return t?r5:J6;if("relu6"===e)return t?o5:e5;if("prelu"===e)return t?$5:S5;if("leakyrelu"===e)return t?I5:w5;if("sigmoid"===e)return t?i5:n5;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class _5{constructor(e,t,n,s=!1,r=!1,a=!1,o=null,i=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=R4(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",d=r?"rc.z, i * 2":"i * 2, rc.z",p=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const x=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",y="rc.x";e[0]<t[0]?b=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(y=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${y};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${d});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${p[0]} * ${f[0]});\n          result += (${p[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const F5={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class D5{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=rF(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const O5="return a * b;";function M5(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=rA(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new D5(F5.REAL,s.shape,r.shape),o=new D5(F5.IMAG,s.shape,r.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,i,"float32"),u=n.runWebGLProgram(o,i,"float32"),c=v5({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[o,i]=p6(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(i,a);return n.texData.get(l.dataId).values=o,l}let o;return o=V$().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new x5(O5,s.shape,r.shape):new m5(O5,s.shape,r.shape),n.runWebGLProgram(o,[s,r],a)}const L5={kernelName:LT,backendName:"webgl",kernelFunc:M5};function B5(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,o=n,i=d$(r.shape),l=b$(a,i),u=d$(l);u$(i===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`));const c=o.texData.get(r.dataId);return!c.isPacked||t4(r.shape,l)||null!==c.texture&&t4(c.shape,l)?(o.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[Z3(e.shape),...J3(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[Z3(t),...J3(t)],o=new U6(a,s),i=[s],l=n.runWebGLProgram(o,[r],e.dtype,i,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,o)}const P5={kernelName:sE,backendName:"webgl",kernelFunc:B5};class z5{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const o=4*Math.floor(n/4),i=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${f$(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===i}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===i}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class W5{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,d="vec4";"all"===t?(o="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===t&&(o="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");let p="";r%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${d} values = ${d}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function V5(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=bP(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let o=0;o<r.length;o++){const{inSize:i,windowSize:l,outSize:u}=r[o];let c,h;c="mean"===n?0===o?new z5({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},i):new z5({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u}):new W5({windowSize:l,inSize:i,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class U5{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=N4(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class G5{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=N4(this.rank),r=z6("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const o=`vec2(${a.slice(-2).join()})`,i=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${i}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${i}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function H5(e,t,n){const s=V$().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new G5(e.shape,t):new U5(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function j5(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s;return function(e,t,n,s){const r=t,a=e.shape.length,o=y$(r,e.shape);let i=o;const l=wO(i,a),u=null!=l;let c=e;u&&(c=H5(e,l,s),i=NO(i.length,a)),kO("sum",i,a);const[h,d]=yO(c.shape,i);let p=h;n&&(p=vO(h,o));const f=d$(d),m=B5({inputs:{x:c},attrs:{shape:[d$(e.shape)/f,f]},backend:s}),g=V5(m,aA(e.dtype),"sum",s),x=B5({inputs:{x:g},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),x}(r,a,o,n)}const K5={kernelName:NE,backendName:"webgl",kernelFunc:j5};function q5(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,o=n,i=r.shape.length,l=new Array(i);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(o.shouldExecuteOnCPU([r])){const e=o.texData.get(r.dataId).values,t=B6(e,r.shape,r.dtype,a,l);u=o.makeTensorInfo(l,r.dtype),o.texData.get(u.dataId).values=t}else u=H5(r,a,o);return u}const X5={kernelName:jE,backendName:"webgl",kernelFunc:q5},Y5=1e3;function Z5({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),x=d$(m),b=d$(g),y=rF(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);u$(h===d,(()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const v=n?[x,h,p]:[x,p,h],k=s?[b,f,d]:[b,d,f],w=B5({inputs:{x:e},backend:r,attrs:{shape:v}}),I=B5({inputs:{x:t},backend:r,attrs:{shape:k}}),N=[w,I],S=Math.max(x,b),$=n?w.shape[1]:w.shape[2],C=null!=a,T=null!=o,E="leakyrelu"===l,R=null!=l?A5(l,!0):null;let A;if((1===p||1===f)&&$>Y5&&!1===(C||T||E||null!=R)){let e=w,t=I;n&&(e=q5({inputs:{x:w},backend:r,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=q5({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),N.push(t));const a=1===f;let o=e;1!==f&&(o=B5({inputs:{x:e},backend:r,attrs:{shape:[S,$,1]}}),N.push(o));const i=1===f?2:1;let l=t;a&&(l=B5({inputs:{x:t},backend:r,attrs:{shape:[S,1,$]}}),N.push(l));const u=M5({inputs:{a:o,b:l},backend:r});A=j5({inputs:{x:u},backend:r,attrs:{axis:i,keepDims:!0}}),N.push(u)}else{const l=rA(e.dtype,t.dtype),u=new _5(v,k,[S,p,f],n,s,C,R,T,E),c=[w,I];if(null!=a&&c.push(a),T&&c.push(o),E){const e=r.makeTensorInfo([],"float32",CR(i,"float32"));c.push(e),N.push(e)}A=r.runWebGLProgram(u,c,l)}const _=B5({inputs:{x:A},backend:r,attrs:{shape:y}});N.push(A);for(const e of N)r.disposeIntermediateTensorInfo(e);return _}const J5={kernelName:eR,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:o,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Z5({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},Q5="return abs(x);",e8={kernelName:K$,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=N6(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=V$().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new l5(s.shape,Q5):new q6(s.shape,Q5),n.runWebGLProgram(r,[s],s.dtype)}},t8=E5({opSnippet:X6+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),n8={kernelName:q$,backendName:"webgl",kernelFunc:t8},s8=E5({opSnippet:X6+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),r8={kernelName:X$,backendName:"webgl",kernelFunc:s8},a8="return a + b;",o8=R5({opSnippet:a8,packedOpSnippet:a8,supportsComplex:!0,cpuKernelImpl:H4}),i8={kernelName:Y$,backendName:"webgl",kernelFunc:o8};class l8{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class u8{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const c8={kernelName:Z$,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return b5({inputs:{x:r[0]},backend:s});if(r.length>V$().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>rA(e,t))),o=r.map((e=>e.shape)),i=V$().getBool("WEBGL_PACK")?new u8(r[0].shape,o):new l8(r[0].shape,o);return s.runWebGLProgram(i,r,a)}},h8={kernelName:J$,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=y$(a,r.shape);let u=l;const c=wO(u,i);let h=r;null!=c&&(h=q5({inputs:{x:r},backend:n,attrs:{perm:c}}),u=NO(u.length,i)),kO("all",u,i);const[d,p]=yO(h.shape,u),f=B5({inputs:{x:h},backend:n,attrs:{shape:[-1,d$(p)]}}),m=V5(f,f.dtype,"all",n);let g;return g=B5(o?{inputs:{x:m},backend:n,attrs:{shape:vO(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},d8={kernelName:Q$,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=y$(a,r.shape);let u=l;const c=wO(u,i);let h=r;null!=c&&(h=q5({inputs:{x:r},backend:n,attrs:{perm:c}}),u=NO(u.length,i)),kO("any",u,i);const[d,p]=yO(h.shape,u),f=B5({inputs:{x:h},backend:n,attrs:{shape:[-1,d$(p)]}}),m=V5(f,f.dtype,"any",n);let g;return g=B5(o?{inputs:{x:m},backend:n,attrs:{shape:vO(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class p8{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class f8{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,u$(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const o=this.outputShape,i=o.length,l=N4(i),u=W6("coords",i);let c,h;if(1===a){h=i+1;const e=N4(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[i-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[i-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[i-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[i-2]};`}else h=i,c=`\n        ${l} sourceLocR = coords;\n        ++${u[i-1]};\n        ${l} sourceLocG = coords;\n        ++${u[i-2]};\n        ${l} sourceLocA = coords;\n        --${u[i-1]};\n        ${l} sourceLocB = coords;\n        --${u[i-2]};`;const d=["x","y","z","w","u","v"].slice(0,h),p="."+d[h-1],f=d.map((e=>"int "+e)),m=W6("sourceLocR",h-1).concat("inIdx.r"),g=W6("sourceLocG",h-1).concat("inIdx.g"),x=W6("sourceLocB",h-1).concat("inIdx.b"),b=W6("sourceLocA",h-1).concat("inIdx.a"),y="max"===n?"greaterThan":"lessThan",v=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,w=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${d.join()}),\n                                          vec2(${d.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${d.join()}),\n                               vec2(${d.slice(-2).join()}));\n      }\n      ${w}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[i-1]} < ${o[i-1]-1};\n        bool hasNextRow = ${u[i-2]} < ${o[i-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\n          sourceLocB${p}, sourceLocA${p}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${v}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${y}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function m8(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const o=bP(a),i={windowSize:o,inSize:a,batchSize:r,outSize:Math.ceil(a/o)},l=new p8(i,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=m8(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function g8(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=bP(r[r.length-1]),o=new f8(r,a,n,null==s),i=null==s?[t]:[t,s],l=e.runWebGLProgram(o,i,"int32");if(l.shape.length===t.shape.length){const s=g8(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function x8(e,t,n,s){const r=[n];if(kO("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!V$().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let o=t;null!==a&&a.isPacked&&(o=e.unpackTensor(t),n.push(o));const[i,l]=yO(o.shape,r),u=d$(l),c=B5({inputs:{x:o},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=m8(e,c,s);n.push(h);const d=B5({inputs:{x:h},backend:e,attrs:{shape:i}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),d}return g8(e,t,s)}const b8={kernelName:eC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let o=y$(a,r.shape);const i=wO(o,r.shape.length);let l=r;const u=[];null!=i&&(l=q5({inputs:{x:r},backend:n,attrs:{perm:i}}),u.push(l),o=NO(o.length,l.shape.length)),kO("argMax",[o[0]],l.shape.length);const c=x8(n,l,o[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},y8={kernelName:tC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let o=y$(a,r.shape);const i=wO(o,r.shape.length);let l=r;const u=[];null!=i&&(l=q5({inputs:{x:r},backend:n,attrs:{perm:i}}),u.push(l),o=NO(o.length,l.shape.length)),kO("argMin",[o[0]],l.shape.length);const c=x8(n,l,o[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},v8=E5({opSnippet:X6+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),k8={kernelName:nC,backendName:"webgl",kernelFunc:v8},w8=E5({opSnippet:X6+"return log(x + sqrt(x * x + 1.0));"}),I8={kernelName:sC,backendName:"webgl",kernelFunc:w8},N8=E5({opSnippet:X6+"\n  return atan(x);\n"}),S8={kernelName:rC,backendName:"webgl",kernelFunc:N8},$8=R5({opSnippet:f5+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+g5+"\n  return result;\n"}),C8={kernelName:oC,backendName:"webgl",kernelFunc:$8},T8=E5({opSnippet:X6+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),E8={kernelName:aC,backendName:"webgl",kernelFunc:T8};class R8{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideHeight,i=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.top,p=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let x="0.0";if(f||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${d}, ${p});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");const y=4*Math.floor(a/4),v=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${d}, ${p});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${y}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${y};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class A8{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,o=e.strideDepth,i=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,d=e.effectiveFilterDepth,p=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,x=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let y="0.0";if(b||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${d};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${p};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${p} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / max(count, 1.0)");const k=4*Math.floor(a/4),w=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${x});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${d};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n        }\n        setOutput(${v});\n      }\n    `}}const _8={kernelName:iC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;i4(r,"avgPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;u$(yD(o,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=uD(r.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&p$(u.inShape,u.outShape))return b5({inputs:{x:r},backend:n});const c=new R8(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},F8={kernelName:uC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:o,pad:i,dimRoundingMode:l,dataFormat:u}=s,c=cD(r.shape,a,o,[1,1,1],i,l,u),h=new A8(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class D8{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=i-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class O8{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=d-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const M8={kernelName:cC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=cD(o.shape,i,l,[1,1,1],u,c),d=new O8(h);return n.runWebGLProgram(d,[r],o.dtype)}},L8={kernelName:lC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,o=a;i4([r,a],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=uD(o.shape,i,l,1,u),h=new D8(c);return n.runWebGLProgram(h,[r],o.dtype)}},B8={kernelName:hC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:o,transposeB:i}=s;return Z5({a:r,b:a,transposeA:o,transposeB:i,backend:n})}};class P8{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],rF(e,t),rF(e,n);let o="0.0";null!=s&&(rF(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="1.0";null!=r&&(rF(e,r),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${o};\n        float scale = ${i};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class z8{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],rF(e,t),rF(e,n);let o="vec4(0.0)";null!=s&&(rF(e,s),this.variableNames.push("offset"),o="getOffsetAtOutCoords()");let i="vec4(1.0)";null!=r&&(rF(e,r),this.variableNames.push("scale"),i="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${o};\n        vec4 scale = ${i};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const W8={kernelName:nT,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:o,scale:i}=e;u$(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),u$(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),u$(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=o&&(c=o.shape,u.push(o));let h=null;null!=i&&(h=i.shape,u.push(i));const d=V$().getBool("WEBGL_PACK_NORMALIZATION")?new z8(s.shape,r.shape,a.shape,c,h,l):new P8(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class V8{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=N4(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return U8.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${U8[t]} = start[${t}] + coords.${U8[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const U8=["x","y","z","w","u","v"];class G8{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=N4(this.rank),n=W6("coords",this.rank),s=W6("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,o=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function H8(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:o}=s,[i,l]=KF(r,a,o);if(FF(r,i,l),0===d$(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=S6(e.values,i,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=HF(r.shape,i,l);if(u||!c){const e=V$().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new G8(l):new V8(l),t=[i];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),o=s.texData.get(a.dataId);Object.assign(o,r),o.refCount=1,o.shape=n,o.dtype=e.dtype;let i=jF(t,E$(e.shape));r.slice&&(i+=r.slice.flatOffset),o.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(o.slice.origDataId)||1;return s.dataRefCount.set(o.slice.origDataId,l+1),a}(r,i,l,n)}const j8={kernelName:xE,backendName:"webgl",kernelFunc:H8},K8={kernelName:dC,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:o}=s;u$(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=vP(r.shape,a,i),u=kP(l.length,a.length),c=wP(r.shape,a,i),h=IP(o,a.length),d=NP(c,o,a.length),p=[],f=B5({inputs:{x:r},backend:n,attrs:{shape:l}}),m=q5({inputs:{x:f},backend:n,attrs:{perm:u}}),g=B5({inputs:{x:m},backend:n,attrs:{shape:c}}),x=H8({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return p.push(f),p.push(m),p.push(g),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},q8={kernelName:pC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:o}=s,i=n.readSync(r.dataId),l=n.readSync(a.dataId),u=j4(i,l,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,u)}},X8={kernelName:fC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=V$().getBool("WEBGL_PACK_BINARY_OPERATIONS"),o=V$().getNumber("WEBGL_VERSION");if(n.shouldExecuteOnCPU([s,r])||1===o){const e=n.texData.get(s.dataId).values,t=n.texData.get(r.dataId).values,[a,o]=q4(s.shape,r.shape,e,t,s.dtype),i=n.makeTensorInfo(o,s.dtype);return n.texData.get(i.dataId).values=a,i}let i;return i=a?new x5("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new m5("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),n.runWebGLProgram(i,[s,r],s.dtype)}},Y8={kernelName:mC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),o=n.readSync(r.dataId),i=rF(Array.from(a),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Z8=R5({opSnippet:"return float(a != b);",cpuKernelImpl:m6,dtype:"bool"}),J8={kernelName:PT,backendName:"webgl",kernelFunc:Z8};function Q8(e){const{inputs:t,backend:n}=e,{input:s}=t;return b5({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const e7={kernelName:eE,backendName:"webgl",kernelFunc:Q8},t7={kernelName:gC,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:o}=r;if("complex64"===o){if("complex64"===a.dtype)return b5({inputs:{x:a},backend:s});const t=pM(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=v5({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=Q8({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:o}});return s.disposeIntermediateTensorInfo(t),n}if(!I$(a.dtype,o)){const e=b5({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:o}}if(s.shouldExecuteOnCPU([a])){const e=s.texData.get(a.dataId).values,[t,n,r]=X4(e,a.shape,a.dtype,o);return s.makeTensorInfo(t,n,r)}if("int32"===o)return function(e,t){const n=new q6(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===o){const e=s.makeTensorInfo([],"bool",k$("bool",1)),t=Z8({inputs:{a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},n7="return ceil(x);",s7=E5({opSnippet:n7,packedOpSnippet:n7,cpuKernelImpl:Y4}),r7={kernelName:xC,backendName:"webgl",kernelFunc:s7};class a7{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class o7{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const i7={kernelName:bC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:o}=s;let i;i=V$().getBool("WEBGL_PACK_CLIP")?new o7(r.shape):new a7(r.shape);const l=[[a],[o]];return n.runWebGLProgram(i,[r],r.dtype,l)}};class l7{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function u7(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const c7={kernelName:vC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new l7(s.shape),o=[u7(s,r.complexTensorInfos.real),u7(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,o,o[0].dtype)}};class h7{constructor(e){this.outputShape=[],this.outputShape=hP(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class d7{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=hP(e,t);const n=this.outputShape,s=n.length,r=N4(s),a=W6("coords",s),o=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const i=new Array(e.length-1);i[0]=e[0][t];for(let n=1;n<i.length;n++)i[n]=i[n-1]+e[n][t];const l=o[t],u=o.slice(-2),c=o.join();let h=`if (${l} < ${i[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<i.length;e++){const t=i[e-1];h+=`\n        if (${l} < ${i[e]}  && ${l} >= ${i[e-1]}) {\n          return getChannel(\n            getT${e}(${p7(o,l,t)}),\n            vec2(${p7(u,l,t)}));\n        }`}const d=i.length,p=i[i.length-1];h+=`\n        return getChannel(\n          getT${d}(${p7(o,l,p)}),\n          vec2(${p7(u,l,p)}));`,this.userCode=`\n      float getValue(${o.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function p7(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function f7(e){const{inputs:t,backend:n}=e,{input:s}=t;return b5({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const m7={kernelName:uT,backendName:"webgl",kernelFunc:f7};function g7(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>Q8({inputs:{input:e},backend:n}))),r=e.map((e=>f7({inputs:{input:e},backend:n}))),a=g7(s,t,n),o=g7(r,t,n),i=v5({inputs:{real:a,imag:o},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),i}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=d$(e.shape.slice(t));return B5({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=hP(r.map((e=>e.shape)),1),i=1===r[0].shape[0],l=Z4(a,o,s,i),u=hP(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=e.filter((e=>d$(e.shape)>0)),o=V$().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=o?new q6(e[0].shape,t5):new l5(e[0].shape,t5);return n.runWebGLProgram(t,e,s)}const i=V$().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>i){const e=[];for(let s=0;s<a.length;s+=i){const r=a.slice(s,s+i);e.push(g7(r,t,n))}const s=g7(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return s}if(o){const e=new d7(a.map((e=>e.shape)),t);return n.runWebGLProgram(e,a,s)}const{tensors2D:l,outShape:u}=function(e,t,n){const s=hP(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>B5({inputs:{x:e},attrs:{shape:[-1,d$(e.shape.slice(t))]},backend:n}))),outShape:s}}(a,t,n),c=new h7(l.map((e=>e.shape))),h=n.runWebGLProgram(c,l,s);l.forEach((e=>n.disposeIntermediateTensorInfo(e)));const d=B5({inputs:{x:h},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(h),d}function x7(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=y$(r,t[0].shape)[0];cP(t.map((e=>e.shape)),a);const o=hP(t.map((e=>e.shape)),a);if(0===d$(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter((e=>d$(e.shape)>0));return 1===i.length?b5({inputs:{x:i[0]},backend:n}):g7(i,a,n)}const b7={kernelName:kC,backendName:"webgl",kernelFunc:x7};class y7{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,x=m?2:3,b=m?3:1;let y="",v="";n&&(y=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${v}\n        setOutput(result);\n      }\n    `}}class v7{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,d=e.filterWidth,p=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${p}) *\n                  getW(wF, wR, wC, ${p}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${p}),\n                  getX(batch, xF, xR, xC, ${p} + 1),\n                  getX(batch, xF, xR, xC, ${p} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${p}, d2),\n                  getW(wF, wR, wC, ${p} + 1, d2),\n                  getW(wF, wR, wC, ${p} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class k7{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=R4(this.outputShape.length);const a=e.padInfo.left,o=e.strideWidth,i=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)h+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;h+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)h+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(h+=`\n           xC = xCCorner + ${n*i};\n           `,1===o){if(n<u&&(a%2==1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,h+=1===i&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){const e=a%2==0?i$(i):i;i%2==0&&a%2==1||i%2!=0&&a%2!=1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,h+=i>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):h+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(a%2==1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(h+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(h+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(h+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let d="",p="";n&&(d=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,p="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${d}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${p}\n         setOutput(result);\n       }\n     `}}class w7{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=R4(this.outputShape.length);const{dataFormat:n}=t,s=u4(),r="channelsLast"===n,a=r?1:2,o=r?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function I7(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function N7({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],d=n.outChannels,p="channelsLast"===n.dataFormat;let f;const m=[];if(null!=a){const e=I7(a.shape,p);null!=e&&(a=B5({inputs:{x:a},backend:s,attrs:{shape:e}}),m.push(a))}if(null!=r){const e=I7(r.shape,p);null!=e&&(r=B5({inputs:{x:r},backend:s,attrs:{shape:e}}),m.push(r))}if((1!==h&&1!==d||!(c>Y5))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&p$(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},d=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,u$(t4(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const p=B5({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(p);const g=Z5({a:h,b:p,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:a,leakyreluAlpha:o}),x=s.texData.get(g.dataId);u$(x.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=d,x.shape=n.outShape,f=b5({inputs:{x:g},backend:s}),f.shape=n.outShape,m.push(g)}else{const l=n.outHeight*n.outWidth,u=B5({inputs:{x:e},backend:s,attrs:{shape:p?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=B5({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=Z5({a:p?u:c,b:p?c:u,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:a,leakyreluAlpha:o});f=B5({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function S7({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=n,f="channelsLast"===p,m=l*u*c,g=d*h,x=[n.batchSize,m,g],b=[];if(null!=a){const e=I7(a.shape,f);null!=e&&(a=B5({inputs:{x:a},backend:s,attrs:{shape:e}}),b.push(a))}if(null!=r){const e=I7(r.shape,f);null!=e&&(r=B5({inputs:{x:r},backend:s,attrs:{shape:e}}),b.push(r))}const y=B5({inputs:{x:t},backend:s,attrs:{shape:[1,m,d$(t.shape)/m]}});b.push(y);const v=new w7(x,n),k=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],w=s.runWebGLProgram(v,[e],"float32",k),I=B5({inputs:{x:w},backend:s,attrs:{shape:x}});b.push(w),b.push(I);const N=null!=r,S=null!=a,$="leakyrelu"===i,C=i?A5(i,!0):null,T=new _5(f?I.shape:y.shape,f?y.shape:I.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,N,C,S,$),E=f?[I,y]:[y,I];if(r&&E.push(r),S&&E.push(a),$){const e=s.makeTensorInfo([],"float32",CR(o,"float32"));E.push(e),b.push(e)}const R=s.runWebGLProgram(T,E,"float32"),A=B5({inputs:{x:R},backend:s,attrs:{shape:n.outShape}});b.push(R);for(const e of b)s.disposeIntermediateTensorInfo(e);return A}const $7={kernelName:wC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=kD(l),d=hD(r.shape,a.shape,o,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&V$().getBool("WEBGL_EXP_CONV")){const e=new k7(d),t=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];p=n.runWebGLProgram(e,[r,a],"float32",t)}else if(V$().getBool("WEBGL_CONV_IM2COL"))p=S7({x:r,filter:a,convInfo:d,backend:n});else{const e=new y7(d);p=n.runWebGLProgram(e,[r,a],"float32")}else p=N7({x:r,filter:a,convInfo:d,backend:n});const f=B5({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class C7{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class T7{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class E7{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class R7{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const A7={kernelName:IC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=kD(l),d=hD(r.shape,c,o,1,i,u,!1,h),p=new C7(d);return n.runWebGLProgram(p,[r,a],"float32")}};class _7{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=R4(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,s=t-1-e.padInfo.top,r=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${r});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const F7={kernelName:NC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=kD(u),d=hD(o,a.shape,i,1,l,c,!1,h);if(V$().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const e=[[d.strideHeight,d.strideWidth]],t=new _7(d);return n.runWebGLProgram(t,[r,a],"float32",e)}{const e=new T7(d);return n.runWebGLProgram(e,[r,a],"float32")}}},D7={kernelName:SC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s,u=dD(r.shape,a.shape,o,l,i),c=new v7(u);return n.runWebGLProgram(c,[r,a],"float32")}},O7={kernelName:$C,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,pad:i,filterShape:l}=s,u=dD(r.shape,l,o,1,i),c=new E7(u);return n.runWebGLProgram(c,[r,a],"float32")}},M7={kernelName:CC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:o,strides:i,inputShape:l}=s,u=dD(l,a.shape,i,1,o),c=new R7(u);return n.runWebGLProgram(c,[r,a],"float32")}},L7=E5({opSnippet:T5+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${g5}\n  return result;\n`}),B7={kernelName:TC,backendName:"webgl",kernelFunc:L7},P7=E5({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),z7={kernelName:EC,backendName:"webgl",kernelFunc:P7};class W7{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,o,i,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const d="bilinear"===s?1:0,[p,f]=[o-1+".0",i-1+".0"],[m,g,x]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${p} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${p}`],[b,y,v]=h>1?[""+(i-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${y};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${p} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${d} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const V7={kernelName:_C,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:o}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new W7(r.shape,a.shape,i,l,u);return n.runWebGLProgram(c,[r,a,o],"float32")}};var U7;!function(e){e.Prod="*",e.Sum="+"}(U7||(U7={}));class G7{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===U7.Prod?"1.0":"0.0",o=n?a:`getX(${H7(r,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(i-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${i}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${N4(r)} coords = getOutputCoords();\n        int end = ${j7(r,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${j7(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${H7(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function H7(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function j7(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function K7(e,t,n,s,r,a){const o=t.shape.length,i=wO([s],o);let l=t;null!=i&&(l=q5({inputs:{x:t},backend:n,attrs:{perm:i}}));const u=NO(1,o)[0];if(u!==o-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=b5({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const s=new G7(e,l.shape,!1,a),r=[[t]],o=h;h=n.runWebGLProgram(s,[h],h.dtype,r),n.disposeIntermediateTensorInfo(o)}if(r){const t=new G7(e,l.shape,r,a),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=i){const e=q5({inputs:{x:h},backend:n,attrs:{perm:IO(i)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const q7={kernelName:RC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;return K7(U7.Prod,r,n,a,o,i)}},X7={kernelName:AC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:o,reverse:i}=s;return K7(U7.Sum,r,n,a,o,i)}},Y7={kernelName:FC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:o,binaryOutput:i}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=j4(e,t,a.dtype,a.shape,o);return n.makeTensorInfo([o],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=K4(e,t,o,i);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class Z7{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const J7={kernelName:DC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:o}=s,i=r.shape[0],l=("NHWC"===o?r.shape[1]:r.shape[2])*a,u=("NHWC"===o?r.shape[2]:r.shape[3])*a,c=("NHWC"===o?r.shape[3]:r.shape[1])/(a*a),h=new Z7("NHWC"===o?[i,l,u,c]:[i,c,l,u],a,o);return n.runWebGLProgram(h,[r],r.dtype)}};class Q7{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=R4(this.outputShape.length);const a=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class e9{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=R4(this.outputShape.length);const a=e.outChannels/e.inChannels,o=e.padInfo.left,i=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let d="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)d+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;d+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)d+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;d+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(d+=`\n          xC = xCCorner + ${t*l};\n          `,1===i){if(t<c&&(o%2==1?(d+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,d+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):d+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=o%2==0?i$(l):l;l%2==0&&o%2==1||l%2!=0&&o%2!=1?(d+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,d+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):d+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(o%2==1?(d+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(d+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(d+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(d+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(d+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(d+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}d+="\n    }\n  ",d+="\n      }\n    ";let p="",f="";n&&(p=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${p}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${d}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const t9={kernelName:OC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),u$(yD(o,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`));const h=hD(r.shape,a.shape,o,c,i,u,!0);let d;d=V$().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new e9(h):new Q7(h);const p=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(d,[r,a],"float32",p)}};class n9{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class s9{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const r9={kernelName:MC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=hD(r.shape,c,o,i,l,u,!0),d=new n9(h);return n.runWebGLProgram(d,[r,a],"float32")}},a9={kernelName:LC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:o,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=hD(c,a.shape,o,i,l,u,!0),d=new s9(h);return n.runWebGLProgram(d,[r,a],"float32")}};class o9{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const i9={kernelName:BC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=d$(s.shape),o=B5({inputs:{x:s},backend:n,attrs:{shape:[a]}}),i=new o9(a),l=n.runWebGLProgram(i,[o],o.dtype),u=B5({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}};class l9{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:o,filterWidth:i,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const u9={kernelName:PC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:o,pad:i,dilations:l}=s,u=lD(r.shape,a.shape,o,i,"NHWC",l);let c;const h=new l9(u);c=n.runWebGLProgram(h,[r,a],"float32");const d=B5({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}},c9={kernelName:UC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:o,summedDims:i,idDims:l}=jP(r,a.length);qP(o.length,l,a);const{path:u,steps:c}=XP(i,l),h=c.length;let d=null,p=o.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=KP(p,l[t]);let r;YP(e)?r=a[t]:(r=q5({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const o=r.shape.slice();for(let e=0;e<s.length;++e)o.splice(s[e],0,1);p$(r.shape,o)||(r=B5({inputs:{x:r},backend:n,attrs:{shape:o}}),f.push(r)),null===d?d=r:(d=M5({inputs:{a:r,b:d},backend:n}),f.push(d))}e<h-1&&(u[e]>=0&&(d=j5({inputs:{x:d},backend:n,attrs:{axis:u[e]-(o.length-p),keepDims:!1}}),f.push(d)),p--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},h9=E5({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),d9={kernelName:GC,backendName:"webgl",kernelFunc:h9},p9={kernelName:HC,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=V$().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new x5("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new m5("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},f9=R5({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:J4}),m9={kernelName:KC,backendName:"webgl",kernelFunc:f9},g9=E5({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${TP};\n  float a1 = ${EP};\n  float a2 = ${RP};\n  float a3 = ${AP};\n  float a4 = ${_P};\n  float a5 = ${FP};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),x9={kernelName:jC,backendName:"webgl",kernelFunc:g9},b9=E5({opSnippet:T5+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Q4,dtype:"float32"}),y9={kernelName:qC,backendName:"webgl",kernelFunc:b9};function v9(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,o=a.shape.length,i=a.shape.slice();let l=r;return r<0&&(u$(-(o+1)<=r,(()=>`Axis must be in the interval [${-(o+1)}, ${o}]`)),l=o+r+1),i.splice(l,0,1),B5({inputs:{x:a},backend:s,attrs:{shape:i}})}const k9={kernelName:XC,backendName:"webgl",kernelFunc:v9},w9="return exp(x) - 1.0;",I9=E5({opSnippet:w9,packedOpSnippet:w9,cpuKernelImpl:e6}),N9={kernelName:YC,backendName:"webgl",kernelFunc:I9};class S9{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function $9(e,t,n){const s=n.texData.get(e.dataId),r=d$(e.shape),a=e.shape[e.shape.length-1],o=B5({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),i=o.shape,l=new S9("real",i,t),u=new S9("imag",i,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:i},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:i}],h=n.runWebGLProgram(l,c,"float32"),d=n.runWebGLProgram(u,c,"float32"),p=v5({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const f=B5({inputs:{x:p},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(p),f}const C9={kernelName:ZC,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return $9(s,!1,n)}};class T9{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function E9(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||$$(r),"string"===a){const e=w$(a,d$(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new T9(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const R9={kernelName:JC,backendName:"webgl",kernelFunc:E9};class A9{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const _9={kernelName:QC,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new A9(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},F9="return floor(x);",D9=E5({opSnippet:F9,packedOpSnippet:F9,cpuKernelImpl:t6}),O9={kernelName:eT,backendName:"webgl",kernelFunc:D9},M9=R5({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),L9={kernelName:tT,backendName:"webgl",kernelFunc:M9};class B9{constructor(e){this.variableNames=["A"];const t=u4(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class P9{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=u4(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const z9={kernelName:JE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,o="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,i="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=o?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];if(i||o){const e=V$().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=W9&&e===V9||(V9=e,W9=document.createElement("canvas").getContext("2d",{willReadFrequently:V9})),W9.canvas.width=l,W9.canvas.height=u,W9.drawImage(r,0,0,l,u),r=W9.canvas}const d=n.makeTensorInfo(c,"int32");n.texData.get(d.dataId).usage=F3.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const p=V$().getBool("WEBGL_PACK")?new P9(h):new B9(h),f=n.runWebGLProgram(p,[d],"int32");return n.disposeData(d.dataId),f}};let W9,V9=V$().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const U9={kernelName:tR,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=kD(c),g=hD(r.shape,a.shape,l,h,u,d,!1,m);let x;const b=[],y=null!=o,v=null!=i,k="leakyrelu"===p,w=()=>{const e=[r,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=B5({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(y&&e.push(t(o,c)),v&&e.push(t(i,c)),k){const t=n.makeTensorInfo([],"float32",CR(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&V$().getBool("WEBGL_EXP_CONV")){const e=p?A5(p,!0):null,t=new k7(g,y,e,v,k),s=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],r=w();x=n.runWebGLProgram(t,r,"float32",s)}else if(V$().getBool("WEBGL_CONV_IM2COL"))x=S7({x:r,filter:a,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const e=p?A5(p,!1):null,t=new y7(g,y,e,v,k),s=w();x=n.runWebGLProgram(t,s,"float32")}else x=N7({x:r,filter:a,convInfo:g,backend:n,bias:o,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const I=B5({inputs:{x},backend:n,attrs:{shape:g.outShape}});return b.push(x),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}},G9={kernelName:nR,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:o,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let m=c;null==m&&(m=[1,1]),u$(yD(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=hD(r.shape,a.shape,l,m,u,h,!0),x=V$().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=d?A5(d,x):null,y=[r,a],v=null!=o,k=null!=i,w="leakyrelu"===d;if(v&&y.push(o),k&&y.push(i),w){const e=n.makeTensorInfo([],"float32",CR(p,"float32"));y.push(e),f.push(e)}let I;I=x?new e9(g,v,b,k,w):new Q7(g,v,b,k,w);const N=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(I,y,"float32",N);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class H9{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const r=N4(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const j9={kernelName:rT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,o=a[a.length-1],i=d$(s.shape),[l,u,c,h]=SP(s,r),d=B5({inputs:{x:r},backend:n,attrs:{shape:[u,o]}}),p=B5({inputs:{x:s},backend:n,attrs:{shape:[d$(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=n6(e,t,s.dtype,u,o,c,h,s.shape,i);return n.makeTensorInfo(l,s.dtype,a.values)}const f=new H9(o,h,[u,c],s.shape),m=n.runWebGLProgram(f,[p,d],p.dtype),g=B5({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),g}};class K9{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=N4(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function q9(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:o,batchDims:i}=s,l=y$(o,r.shape)[0];if(V$().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];u$(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=pz(r,a,l,i),c=d$(a.shape),h=[],d=B5({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=B5({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(p),t=n.bufferSync(d),s=s6(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new K9(d.shape,f),g=n.runWebGLProgram(m,[d,p],d.dtype);h.push(g);const x=B5({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}const X9={kernelName:sT,backendName:"webgl",kernelFunc:q9},Y9=R5({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:r6,dtype:"bool"}),Z9={kernelName:aT,backendName:"webgl",kernelFunc:Y9},J9=R5({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:a6}),Q9={kernelName:oT,backendName:"webgl",kernelFunc:J9},eee={kernelName:lT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return $9(s,!0,n)}},tee=E5({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),nee={kernelName:cT,backendName:"webgl",kernelFunc:tee},see=E5({opSnippet:"return float(isinf(x));",dtype:"bool"}),ree={kernelName:hT,backendName:"webgl",kernelFunc:see},aee=E5({opSnippet:"return float(isnan(x));",dtype:"bool"}),oee={kernelName:dT,backendName:"webgl",kernelFunc:aee},iee=R5({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:o6,dtype:"bool"}),lee={kernelName:fT,backendName:"webgl",kernelFunc:iee},uee=R5({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:i6,dtype:"bool"}),cee={kernelName:mT,backendName:"webgl",kernelFunc:uee},hee={kernelName:gT,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,o=l6(s,r,a);return t.makeTensorInfo([o.length],"float32",o)}},dee=E5({opSnippet:T5+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:u6}),pee={kernelName:xT,backendName:"webgl",kernelFunc:dee},fee=E5({opSnippet:T5+"\n  return log(1.0 + x);\n"}),mee={kernelName:bT,backendName:"webgl",kernelFunc:fee},gee=R5({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),xee={kernelName:yT,backendName:"webgl",kernelFunc:gee},bee=E5({opSnippet:"return float(!(x >= 1.0));"}),yee={kernelName:vT,backendName:"webgl",kernelFunc:bee},vee=R5({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),kee={kernelName:kT,backendName:"webgl",kernelFunc:vee};class wee{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;i=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class Iee{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,o=e[3]-1;let i;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;i=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const Nee={kernelName:wT,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:o,alpha:i,beta:l}=s,u=V$().getBool("WEBGL_PACK_NORMALIZATION")?new Iee(r.shape,a,o,i,l):new wee(r.shape,a,o,i,l);return n.runWebGLProgram(u,[r],r.dtype)}};class See{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const $ee={kernelName:IT,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:o}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new See(r.shape,i,l,u,c);return n.runWebGLProgram(h,[r,a,o],r.dtype)}};function Cee(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:o}=s,i=r.shape.length,l=y$(a,r.shape);let u=l;const c=wO(u,i),h=null!=c,d=n.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const e=n.texData.get(p.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=B6(e,r.shape,r.dtype,c,t);p=n.makeTensorInfo(t,r.dtype),n.texData.get(p.dataId).values=s}else p=H5(r,c,n);u=NO(u.length,i)}kO("max",u,i);const[f,m]=yO(p.shape,u);let g,x=f;if(o&&(x=vO(f,l)),d){const e=n.texData.get(p.dataId).values,t=c6(e,d$(m),x,r.dtype);g=n.makeTensorInfo(x,r.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=d$(t),a=B5({inputs:{x:e},attrs:{shape:[d$(e.shape)/r,r]},backend:s}),o=V5(a,e.dtype,"max",s),i=B5({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o),i}(p,m,x,n);return h&&n.disposeIntermediateTensorInfo(p),g}const Tee={kernelName:NT,backendName:"webgl",kernelFunc:Cee},Eee=R5({opSnippet:f5+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+g5+"\n  return result;\n",cpuKernelImpl:h6}),Ree={kernelName:ST,backendName:"webgl",kernelFunc:Eee},Aee={kernelName:$T,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;i4(r,"maxPool");const{filterSize:a,strides:o,pad:i,dimRoundingMode:l}=s;u$(yD(o,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`));const u=uD(r.shape,a,o,1,i,l);if(1===u.filterWidth&&1===u.filterHeight&&p$(u.inShape,u.outShape))return b5({inputs:{x:r},backend:n});const c=new R8(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},_ee={kernelName:TT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=s,c=cD(r.shape,a,o,[1,1,1],i,u,l),h=new A8(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class Fee{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,o=r-1-e.padInfo.top,i=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Dee{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.front,h=l-1-e.padInfo.top,d=u-1-e.padInfo.left,p=i*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${p} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Oee={kernelName:ET,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,o=a,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,h=cD(o.shape,i,l,[1,1,1],u,c),d=new A8(h,"max",!0),p=n.runWebGLProgram(d,[o],o.dtype),f=new Dee(h),m=n.runWebGLProgram(f,[r,p],o.dtype);return n.disposeIntermediateTensorInfo(p),m}},Mee={kernelName:CT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:o}=t,i=a;i4([a,o],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=uD(i.shape,l,u,1,c,h),p=new R8(d,"max",!0),f=n.runWebGLProgram(p,[i],i.dtype),m=new Fee(d),g=n.runWebGLProgram(m,[r,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}},Lee={kernelName:RT,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:o,includeBatchInIndex:i}=t,l=n;u$(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];u$(yD(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=uD(s.shape,r,a,u,o),[h,d]=function(e,t,n,s){let r=new R8(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new R8(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,i,c,l);return[h,d]}},Bee={kernelName:AT,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,o=n,i=s.shape.length,l=y$(a,s.shape);let u=l;const c=wO(u,i),h=null!=c,d=o.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const e=o.texData.get(f.dataId).values,t=new Array(i);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=B6(e,s.shape,s.dtype,c,t);f=o.makeTensorInfo(t,s.dtype),o.texData.get(f.dataId).values=n}else f=H5(s,c,o);p.push(f),u=NO(u.length,i)}kO("sum",u,i);const[m,g]=yO(f.shape,u);let x=m;r&&(x=vO(m,l));const b=function(e,t,n,s){const r=d$(t),a=B5({inputs:{x:e},attrs:{shape:[d$(e.shape)/r,r]},backend:s}),o=V5(a,"float32","mean",s),i=B5({inputs:{x:o},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o),i}(f,g,x,o);for(const e of p)o.disposeIntermediateTensorInfo(e);return b}},Pee={kernelName:_T,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=y$(a,r.shape);let u=l;const c=wO(u,i);let h=r;null!=c&&(h=q5({inputs:{x:r},backend:n,attrs:{perm:c}}),u=NO(u.length,r.shape.length)),kO("min",u,i);const[d,p]=yO(h.shape,u),f=B5({inputs:{x:h},backend:n,attrs:{shape:[-1,d$(p)]}}),m=V5(f,f.dtype,"min",n);let g;return g=B5(o?{inputs:{x:m},backend:n,attrs:{shape:vO(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},zee=R5({opSnippet:f5+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+g5+"\n  return result;\n",cpuKernelImpl:d6}),Wee={kernelName:FT,backendName:"webgl",kernelFunc:zee};class Vee{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=N4(s),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class Uee{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=N4(s),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=W6("rc",s),l=W6("source",s),u=`${i[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let d="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;d=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${i[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[s-2]} += 1;\n        if(${i[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${i[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const Gee={kernelName:DT,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,o=V$().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Uee(s.shape,r,a):new Vee(s.shape,r,a);return t.runWebGLProgram(o,[s],s.dtype)}},Hee=R5({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+g5+"\n  return result;\n"}),jee={kernelName:OT,backendName:"webgl",kernelFunc:Hee};class Kee{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const qee=R5({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),Xee={kernelName:VC,backendName:"webgl",kernelFunc:qee},Yee="return a - b;",Zee=R5({opSnippet:Yee,packedOpSnippet:Yee,supportsComplex:!0,cpuKernelImpl:O6}),Jee={kernelName:zE,backendName:"webgl",kernelFunc:Zee};function Qee(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,o=y$([a],r.shape),i=Cee({inputs:{x:r},backend:n,attrs:{reductionIndices:o,keepDims:!1}}),l=vO(i.shape,o),u=B5({inputs:{x:i},backend:n,attrs:{shape:l}}),c=Zee({inputs:{a:r,b:u},backend:n}),h=b9({inputs:{x:c},backend:n}),d=j5({inputs:{x:h},backend:n,attrs:{axis:o,keepDims:!1}}),p=B5({inputs:{x:d},backend:n,attrs:{shape:l}}),f=qee({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const ete={kernelName:CE,backendName:"webgl",kernelFunc:Qee},tte={kernelName:MT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:o,normalized:i}=s,l=i?r:Qee({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new Kee(u,c,a),d=[[o]],p=n.runWebGLProgram(h,[l],"int32",d);return i||n.disposeIntermediateTensorInfo(l),p}},nte=X6+"\n  return -x;\n",ste={kernelName:BT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=f6(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=V$().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new l5(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new q6(s.shape,nte),n.runWebGLProgram(r,[s],s.dtype)}},rte=NB,ate={kernelName:zT,backendName:"webgl",kernelFunc:function(e){sR("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=rte(u,c,o,i,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},ote=SB,ite={kernelName:WT,backendName:"webgl",kernelFunc:function(e){sR("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:d,validOutputs:p}=ote(c,h,o,i,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([p]))]}},lte=$B,ute={kernelName:VT,backendName:"webgl",kernelFunc:function(e){sR("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),d=o,p=i,f=l,m=u,{selectedIndices:g,selectedScores:x}=lte(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class cte{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const hte={kernelName:GT,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:o,onValue:i,offValue:l}=s,u=d$(r.shape),c=new cte(u,o,i,l),h=B5({inputs:{x:r},backend:n,attrs:{shape:[u]}}),d=n.runWebGLProgram(c,[h],a);n.disposeIntermediateTensorInfo(h);const p=B5({inputs:{x:d},backend:n,attrs:{shape:[...r.shape,o]}});return n.disposeIntermediateTensorInfo(d),p}};function dte(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=Q8({inputs:{input:s},backend:n}),t=dte({inputs:{x:e},backend:n}),r=f7({inputs:{input:s},backend:n}),a=dte({inputs:{x:r},backend:n}),o=v5({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),o}return E9({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const pte={kernelName:YE,backendName:"webgl",kernelFunc:dte},fte={kernelName:UT,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=Q8({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=f7({inputs:{input:r},backend:s}),o=dte({inputs:{x:a},backend:s}),i=v5({inputs:{real:n,imag:o},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(o),i}return E9({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},mte={kernelName:HT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return v9({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,o=t[0].dtype;t.forEach((e=>{c$(a,e.shape,"All tensors passed to stack must have matching shapes"),u$(o===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const i=[],l=x7({inputs:t.map((e=>{const t=v9({inputs:{input:e},backend:n,attrs:{dim:r}});return i.push(t),t})),backend:n,attrs:{axis:r}});return i.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class gte{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=N4(s),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class xte{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=N4(s),a=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=W6("rc",s),l=W6("source",s),u=`${i[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${i[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${i[s-2]} += 1;\n       if(${i[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${i[s-1]} += 1;\n         if(${u}) {`],d=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let p="";for(let e=0,t=1===s?2:4;e<t;e++)p+=`\n        ${h[e]}\n        if (${d}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;p+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${o});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const bte=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:o}=s;if(0===d$(r.shape)){const e=a.map(((e,t)=>e[0]+r.shape[t]+e[1]));return E9({backend:n,attrs:{shape:e,value:o,dtype:r.dtype}})}const i=V$().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xte(r.shape,a,o):new gte(r.shape,a,o),l=[[o]];return n.runWebGLProgram(i,[r],r.dtype,l)},yte={kernelName:jT,backendName:"webgl",kernelFunc:bte},vte=R5({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+g5+"\n  return result;\n"}),kte={kernelName:KT,backendName:"webgl",kernelFunc:vte},wte={kernelName:XT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:o}=s,i=r.shape.length,l=[],u=y$(a,r.shape);let c=u;const h=wO(c,i);let d,p=r;if(null!=h&&(p=q5({inputs:{x:r},backend:n,attrs:{perm:h}}),c=NO(c.length,i),l.push(p)),kO("prod",c,i),n.shouldExecuteOnCPU([p])){const e=n.texData.get(p.dataId).values,{outVals:t,outShape:s,outDtype:r}=g6(p.shape,p.dtype,e,c);d=n.makeTensorInfo(s,r,t)}else{const[e,t]=yO(p.shape,c),s=d$(t),a=B5({inputs:{x:p},backend:n,attrs:{shape:[-1,s]}}),o=V5(a,aA(r.dtype),"prod",n);d=B5({inputs:{x:o},backend:n,attrs:{shape:e}}),l.push(a),l.push(o)}if(o){l.push(d);const e=vO(d.shape,u);d=B5({inputs:{x:d},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},Ite={kernelName:YT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:o}=t,{outputRaggedRank:i}=s,l=r.map((e=>n.readSync(e.dataId))),u=r.map((e=>e.shape)),c=n.readSync(a.dataId),h=n.readSync(o.dataId),[d,p,f]=x6(l,u,c,a.shape,a.dtype,h,o.shape,i),m=d.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,p);return m.concat([g])}},Nte={kernelName:ZT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,o=n.readSync(s.dataId),i=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=b6(o,s.shape,s.dtype,i,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}},Ste={kernelName:JT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),h=n.readSync(o.dataId),d=i.map((e=>n.readSync(e.dataId))),p=i.map((e=>e.shape)),[f,m]=y6(u,r.shape,c,a.shape,a.dtype,h,o.shape,d,p,l);return n.makeTensorInfo(f,a.dtype,m)}},$te=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:o}=n,i=v6(s,r,a,o);return t.makeTensorInfo([i.length],o,i)},Cte={kernelName:QT,backendName:"webgl",kernelFunc:$te},Tte=E5({opSnippet:"return 1.0 / x;"}),Ete={kernelName:tE,backendName:"webgl",kernelFunc:Tte},Rte=E5({opSnippet:X6+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Ate={kernelName:nE,backendName:"webgl",kernelFunc:Rte},_te=E5({opSnippet:X6+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Fte={kernelName:lE,backendName:"webgl",kernelFunc:_te};class Dte{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class Ote{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Mte={kernelName:oE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s,[l,u]=i,c=V$().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Ote(r.shape,l,u,a,o):new Dte(r.shape,l,u,a,o);return n.runWebGLProgram(c,[r],"float32")}};class Lte{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,o]=e,i=[n&&a>1?s-1:s,n&&o>1?r-1:r],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Bte={kernelName:iE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:o}=s,i=new Lte(a.shape,r.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class Pte{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class zte{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,o,i,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?o-1:o,s&&n>1?i-1:i],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let d;d=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const Wte={kernelName:rE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:o,size:i}=s,[l,u]=i,c=V$().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new zte(r.shape,l,u,a,o):new Pte(r.shape,l,u,a,o);return n.runWebGLProgram(c,[r],r.dtype)}};class Vte{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,o]=e,i=[n&&a>1?s-1:s,n&&o>1?r-1:r],l=[n&&a>1?a-1:a,n&&o>1?o-1:o],u=i[0]/l[0],c=i[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${d});\n\n        const int winHeight = int(${p});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Ute={kernelName:aE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:o}=s,i=new Vte(a.shape,r.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}};class Gte{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=N4(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class Hte{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=W6("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,o=N4(n);function i(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const jte={kernelName:uE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,o=r.shape.length,i=y$(a,r.shape);if(0===o)return b5({inputs:{x:r},backend:n});const l=V$().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Hte(r.shape,i):new Gte(r.shape,i);return n.runWebGLProgram(l,[r],r.dtype)}};class Kte{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const qte={kernelName:QE,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:o}=t,i=n,l=new Kte(s.shape,a),[u,c]=yP(o,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},Xte=E5({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Yte={kernelName:cE,backendName:"webgl",kernelFunc:Xte},Zte=E5({opSnippet:"return inversesqrt(x);",cpuKernelImpl:k6}),Jte={kernelName:hE,backendName:"webgl",kernelFunc:Zte};class Qte{constructor(e,t,n,s,r,a,o=!0,i=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const l=N4(r.length),u=N4(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let d="";1===s?d="i":2===s&&(d="i, coords[1]");const p=`getUpdates(${d})`;let f="";i&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${h});\n              flattenedIndex += index * ${g};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}}class ene{constructor(e,t,n,s,r,a,o=!0,i=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const l=N4(r.length),u=N4(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let d="";1===s?d="i":2===s&&(d="i, coords[1]");const p=`getUpdates(${d})`;let f="";i&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides",x=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${h});\n              flattenedIndex += index.xz * ${g};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${x};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${p};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}const tne={kernelName:dE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:o}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=DL(0,r,o),d=[h/u,u];if(0===h)return n.makeTensorInfo(o,r.dtype);const p=B5({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),f=B5({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=V$().getBool("WEBGL_PACK")?new ene(l,i,p.shape.length,f.shape.length,c,d):new Qte(l,i,p.shape.length,f.shape.length,c,d);const x=n.runWebGLProgram(g,[f,p,m],f.dtype),b=B5({inputs:{x},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(m),b}};class nne{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===V$().getNumber("WEBGL_VERSION")?"while (left < right) {":r,o="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${o} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const sne={kernelName:fE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:o}=s,i=new nne(r.shape[0],r.shape[1],a.shape[1],o),l=[[r.shape[1]]];return n.runWebGLProgram(i,[r,a],"int32",l)}};class rne{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],o=[];for(let s=0;s<t.length;s++)o.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=o.join()}const a=N4(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const ane={kernelName:mE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,o=new rne(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(o,[s,r,a],rA(r.dtype,a.dtype))}},one=E5({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${$P};\n  float scale = ${CP};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),ine={kernelName:gE,backendName:"webgl",kernelFunc:one},lne=E5({opSnippet:T5+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:I6}),une={kernelName:kE,backendName:"webgl",kernelFunc:lne},cne=E5({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),hne={kernelName:vE,backendName:"webgl",kernelFunc:cne},dne=E5({opSnippet:T5+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${g5}\n  return result;\n`}),pne={kernelName:bE,backendName:"webgl",kernelFunc:dne},fne=E5({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),mne={kernelName:yE,backendName:"webgl",kernelFunc:fne},gne=E5({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),xne={kernelName:wE,backendName:"webgl",kernelFunc:gne},bne={kernelName:SE,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:o}=s;u$(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const i=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...o);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=bte({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=vP(c.shape,a,i,!1),d=kP(h.length,a.length,!1),p=wP(c.shape,a,i,!1),f=B5({inputs:{x:c},backend:n,attrs:{shape:h}}),m=q5({inputs:{x:f},backend:n,attrs:{perm:d}}),g=B5({inputs:{x:m},backend:n,attrs:{shape:p}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},yne={kernelName:TE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:o}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(o.dataId)[0],[h,d,p,f,m]=$6(i,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(d,s.dtype,h),n.makeTensorInfo([d[0]],r.dtype,p),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},vne={kernelName:EE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const o=Array.from(n.readSync(r.dataId)),i=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=C6(i,s.shape,s.dtype,o,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}},kne={kernelName:RE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const o=n.readSync(s.dataId),i=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=T6(o,s.shape,s.dtype,i,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},wne={kernelName:AE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const o=n.readSync(s.dataId),i=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=T6(o,s.shape,s.dtype,i,l);return n.makeTensorInfo(c,s.dtype,u)}},Ine={kernelName:_E,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:o}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=DL(0,r,i);if("string"===a.dtype){const e=n.bufferSync(r),t=n.bufferSync(a),s=AR(n.readSync(o.dataId)[0]),p=w6(e,t,i,d,c,u,l,h,s,!1);return n.makeTensorInfo(i,p.dtype,p.values)}const p=new Qte(u,l,r.shape.length,a.shape.length,h,[d,1],!1),f=n.runWebGLProgram(p,[a,r,o],a.dtype),m=B5({inputs:{x:f},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),m}},Nne={kernelName:$E,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:o}=s,i=y$(o,r.shape)[0],l=JP(r,a,i),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[i]=e;const s=H8({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[i]+=e,s}))}},Sne="return sqrt(x);",$ne=E5({opSnippet:Sne,packedOpSnippet:Sne,cpuKernelImpl:E6}),Cne={kernelName:IE,backendName:"webgl",kernelFunc:$ne},Tne={kernelName:DE,backendName:"webgl",kernelFunc:E5({opSnippet:"return x * x;"})},Ene="return (a - b) * (a - b);",Rne=R5({opSnippet:Ene,packedOpSnippet:Ene}),Ane={kernelName:FE,backendName:"webgl",kernelFunc:Rne},_ne={kernelName:OE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=fz(n.readSync(r.dataId)),o=R6(a,"string",s);return n.makeTensorInfo(r.shape,"string",o)}},Fne={kernelName:ZE,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=X6+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new q6(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class Dne{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=N4(n.length),a=N4(n.length);let o="";if(1===s)o="coords * strides + begin";else{let e=0;o=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const One={kernelName:ME,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:o,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:x,begin:b,end:y,strides:v}=qF(r.shape,a,o,i,l,u,c,h,d);let k;if(m)k=B5({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||x){u$(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=OF(b,y,v),t=H8({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});k=B5({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=T_(r.shape,r.dtype,e),s=A6(p,t,v,b);k=n.makeTensorInfo(f,r.dtype,s.values)}else{const e=new Dne(b,v,p);k=n.runWebGLProgram(e,[r],r.dtype)}const w=B5({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),w}},Mne={kernelName:LE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:o,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,m]=_6(d,p,r,a,o,i,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},Lne={kernelName:BE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:o}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(a.dataId),l=n.readSync(o.dataId)[0],[u,c,h]=F6(i,l,r),d=c.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},Bne={kernelName:PE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(a.dataId),i=D6(o,r);return n.makeTensorInfo(a.shape,"int32",i)}},Pne=E5({opSnippet:"return tan(x);"}),zne={kernelName:WE,backendName:"webgl",kernelFunc:Pne},Wne=E5({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),Vne={kernelName:VE,backendName:"webgl",kernelFunc:Wne},Une={kernelName:pE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{tensor:r,indices:a,updates:o}=t,{}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=DL(0,a,r.shape),d=[h/u,u];if(0===h)return n.makeTensorInfo(r.shape,a.dtype);const p=B5({inputs:{x:a},backend:n,attrs:{shape:[l,i]}}),f=B5({inputs:{x:o},backend:n,attrs:{shape:[l,u]}}),m=B5({inputs:{x:r},backend:n,attrs:{shape:d}}),g=new Qte(l,i,p.shape.length,f.shape.length,c,d,!1,!0),x=n.runWebGLProgram(g,[f,p,m],m.dtype),b=B5({inputs:{x},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(x),b}};class Gne{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=N4(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function Hne(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>AR(e))):e,s=T_(r.shape,r.dtype,t),o=M6(s,a);return n.makeTensorInfo(o.shape,o.dtype,o.values)}const o=new Gne(r.shape,a);return n.runWebGLProgram(o,[r],r.dtype)}const jne={kernelName:UE,backendName:"webgl",kernelFunc:Hne};class Kne{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class qne{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Xne(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function Yne(e){let t=1;for(;t<e;)t*=2;return t}const Zne={kernelName:GE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:o}=s,i=V$().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=V$().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<i||a>l){const e=n.readSync(r.dataId),[t,s]=L6(e,u,r.dtype,a,o);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,E9({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?n.unpackTensor(r):r,f=d$(u)/c,m=B5({inputs:{x:p},attrs:{shape:[f,c]},backend:n});d&&Xne(n,p);const g=Yne(a),x=Yne(c);let b=null;const y=()=>null===b?[m,m]:[m,b],v=(e,t,s)=>{const r=y(),a=new Kne(s),o=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(a,r,"int32",o),Xne(n,i)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)v(t,n,[f,x])}for(let e=x;e>g;e/=2){const t=y(),s=new qne([f,e/2]),r=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(s,t,"int32",r),Xne(n,a);const o=g/2,i=2*o;for(let e=o;e>=1;e/=2)v(i,e,b.shape)}let k=b;b=H8({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),Xne(n,k);let w=q9({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});Xne(n,m);const I=u.slice(0,-1);I.push(a),k=b,b=B5({inputs:{x:b},attrs:{shape:I},backend:n}),Xne(n,k);const N=w;return w=B5({inputs:{x:w},attrs:{shape:I},backend:n}),Xne(n,N),[w,b]}};class Jne{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const o="nearest"===n?1:2;let i;switch(s){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const Qne={kernelName:HE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:o,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,m]=null!=u?u:[h,d],g=new Jne(h,d,o,i,l,[c,f,m,p]);return n.runWebGLProgram(g,[r,a],"float32")}},ese={kernelName:KE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;i4(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=s.readSync(a.dataId),{outputValues:i,outputShape:l,indices:u}=P6(o,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},tse={kernelName:qE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const o=r,i=o.shape.length,l=r.shape[a],u=new Array(i-1);let c=0;for(let e=0;e<i;e++)e!==a&&(u[c++]=o.shape[e]);const h=[],d=new Array(i).fill(0),p=o.shape.slice();p[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){d[a]=e;const t=H8({inputs:{x:o},backend:n,attrs:{begin:d,size:p}}),s=B5({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class nse{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,o=a*Math.ceil(r/n);this.outputShape=[s,o];const i=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const sse=[J5,e8,n8,r8,i8,c8,h8,d8,b8,y8,k8,I8,S8,C8,E8,_8,F8,M8,L8,B8,W8,K8,q8,X8,Y8,t7,r7,i7,k5,c7,b7,$7,A7,F7,D7,O7,M7,B7,z7,V7,q7,X7,Y7,J7,t9,r9,a9,i9,u9,c9,d9,p9,m9,x9,y9,k9,N9,C9,R9,_9,O9,L9,z9,U9,G9,j9,X9,Z9,Q9,y5,eee,m7,nee,ree,oee,N5,lee,cee,hee,pee,mee,xee,yee,kee,Nee,$ee,Tee,Ree,Aee,_ee,Oee,Mee,Lee,Bee,Pee,Wee,Gee,jee,tte,L5,ste,ate,ite,ute,J8,hte,fte,mte,yte,kte,C5,wte,Ite,Nte,Ste,Cte,e7,Xee,Ete,Ate,Fte,P5,Mte,Bte,Wte,Ute,jte,qte,Yte,Jte,tne,sne,ane,ine,une,hne,pne,mne,j8,ete,xne,bne,yne,vne,kne,wne,Ine,Nne,Cne,Tne,Ane,_ne,Fne,One,Mne,Lne,Bne,Jee,K5,zne,Vne,Une,jne,Zne,Qne,X5,ese,tse,{kernelName:XE,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:o}=s,i=r.shape.length,l=[];let u=0;const c=wO([u],i);let h=r;null!=c&&(h=q5({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=NO(1,i)[0]);const d=dz(h.shape,u,o),p=d$([h.shape[u]]),f=B5({inputs:{x:h},backend:n,attrs:{shape:[-1,p]}});l.push(f);const m=aA(r.dtype),g=(e,t,s,r,a)=>{const o=e.shape[0],i=e.shape[1],u=hz(i,a),c=new nse({windowSize:u,inSize:i,batchSize:o,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const d=$te({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),p=Hne({inputs:{x:d},backend:n,attrs:{reps:[i/u]}});return l.push(d),l.push(p),g(h,t,p,r,a)},x=B5({inputs:{x:g(f,"unsortedSegmentSum",a,m,o)},backend:n,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const e=IO(c);b=q5({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},pte];for(const e of sse)cR(e);var rse=n(1354),ase=n.n(rse);let ose,ise,lse;async function use(e){const t=document.createElement("canvas");t.width=e.width,t.height=e.height,t.getContext("2d").drawImage(e,0,0,t.width,t.height);let n=RF(t);n=rP.resizeBilinear(n,[224,224],!1,!0).div(255).sub([.485,.456,.406]).div([.229,.224,.225]),n=jL(n,[2,0,1]),n=n.expandDims();const s=function(e){const t=W_(e.slice([0,0,0],[e.shape[0],1,1]).square().add(e.slice([0,1,0],[e.shape[0],1,1]).square())),n=t.less(1e-6).cast("float32"),s=oD(e.slice([0,2,1],[e.shape[0],1,1]),e.slice([0,2,2],[e.shape[0],1,1])),r=oD(e.slice([0,2,0],[e.shape[0],1,1]).neg(),t),a=oD(e.slice([0,1,0],[e.shape[0],1,1]),e.slice([0,0,0],[e.shape[0],1,1])),o=oD(e.slice([0,1,2],[e.shape[0],1,1]).neg(),e.slice([0,1,1],[e.shape[0],1,1])),i=oD(e.slice([0,2,0],[e.shape[0],1,1]).neg(),t),l=pM([e.shape[0],1,1]);return s.mul(eF(1,n)).add(o.mul(n)).concat(r.mul(eF(1,n)).add(i.mul(n)),-1).concat(a.mul(eF(1,n)).add(l.mul(n)),-1)}(await ose.executeAsync(n)).mul(180/Math.PI),r=Array.from(s.dataSync());return{pitch:r[0],yaw:r[1],roll:r[2]}}const cse=async(e,t,n,s,r=500)=>{if(ise=r,!n.endsWith("==")||"="===n[n.length-3])return void alert("授权码错误");const a=JSON.parse((i=n,ase().AES.decrypt(i,ase().enc.Utf8.parse("235325fdgerteGHdsfsdewred4345341"),{mode:ase().mode.ECB,padding:ase().pad.Pkcs7}).toString(ase().enc.Utf8)));var i;const l=new Date(Date.now()),u=new Date(a.start),c=new Date(a.end);a.callerNo===t?l<u||l>c?alert("授权码错误"):(await async function(){ose=await async function(e,t={},n=o){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}(e));const s=new SY(e,t,n);return await s.load(),s}("./model/pose_detection/model.json")}(),await async function(e,t){if("VIDEO"===e.nodeName){const n=e.videoWidth,s=e.videoHeight;e.width=n,e.height=s,lse=setInterval((async()=>{const n=await use(e);t(n)}),ise)}else{const n=await use(e);t(n)}}(e,s)):alert("用户权限错误")}})();var r=s.Z;export{r as default};